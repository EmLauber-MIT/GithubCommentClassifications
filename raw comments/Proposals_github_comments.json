[
    {
        "id": 981893736,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
        "created_at": "2021-11-29T18:19:17Z",
        "updated_at": "2021-11-29T18:19:17Z",
        "body": "I was reading the updated FedCM API spec and while the introduction discusses the need to solve identity experiences that will be broken when support for 3rd party cookies is removed, many (if not most) of the use cases described are not broken by the removal of support for 3rd party cookies. Therefore, it is unclear to me if the proposed solution is a more general (as in new) way to support identity federation with the browser acting as a mediator in all identity flows, or a more specific proposal to address the flows that will be broken (e.g. single-sign-out, sign-in widget on relying party for federated sign-in). Is it possible to clarify this before acceptance as a work item for the group?",
        "user": "gffletch",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 981948597,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
        "created_at": "2021-11-29T19:31:20Z",
        "updated_at": "2021-11-29T19:31:20Z",
        "body": "For the flows in the spec, I realized we never stated explicitly, but the cases being referenced are when the flow is done through an iframe. You can still do federated login using top level redirects, but after 3rd party cookie deprecation doing siginin within an iframe will not work as the IDP cookies will no longer be passed.\r\n\r\nWould adding the the iframe clarification clear up the issue? Or are there other specific use-cases listed in the spec which are problematic from your point of view?",
        "user": "dj2",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 981953610,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
        "created_at": "2021-11-29T19:38:18Z",
        "updated_at": "2021-11-29T19:38:18Z",
        "body": "> Therefore, it is unclear to me if the proposed solution is a more general (as in new) way to support identity federation with the browser acting as a mediator in all identity flows, or a more specific proposal to address the flows that will be broken (e.g. single-sign-out, sign-in widget on relying party for federated sign-in).\r\n\r\nGood question, and sorry for not making it clear enough, but it is for the latter: the more specific / narrow proposal to address the flows that will be broken by the deprecation of third party cookies (used in iframes and XHR as @dj2 suggested).",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 982003592,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
        "created_at": "2021-11-29T20:41:41Z",
        "updated_at": "2021-11-29T20:41:41Z",
        "body": "@dj2 @samuelgoto Thank you for your responses! I do think it would be good to clarify in the doc. Possibly in section 1.1 call out that these use cases refer to these flows occurring in an iframe. That would help to constrain the over all doc to be referring to flows that occur within iframes.",
        "user": "gffletch",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 983044629,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
        "created_at": "2021-11-30T21:39:42Z",
        "updated_at": "2021-11-30T21:39:42Z",
        "body": "@gffletch I've integrated a change to hopefully clarify. I've got an outstanding request to add more context of third-party cookies in there. Does the clarification added address your concerns?",
        "user": "dj2",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 988267684,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
        "created_at": "2021-12-07T21:14:21Z",
        "updated_at": "2021-12-07T21:14:21Z",
        "body": "This was approved on the 2021-12-03 call: https://github.com/fedidcg/meetings/blob/main/2021/2021-12-03-notes.md",
        "user": "timcappalli",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 988980941,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
        "created_at": "2021-12-08T16:41:57Z",
        "updated_at": "2021-12-08T16:41:57Z",
        "body": "@dj2 I'm glad to see the document was accepted by the WG. I do think the clarifications help. They might need to be restated and readers may gloss over them, but generally it sets a much narrower context which I think will help:)\r\n\r\nMy apologies for being so tardy in my response.",
        "user": "gffletch",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1009420639,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
        "created_at": "2022-01-10T22:44:55Z",
        "updated_at": "2022-01-10T22:44:55Z",
        "body": "Note: this move has been completed. https://github.com/fedidcg/FedCM. Thanks everyone who helped!",
        "user": "travisleithead",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1013280245,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
        "created_at": "2022-01-14T16:38:29Z",
        "updated_at": "2022-01-14T16:38:29Z",
        "body": "@LGraber - you may be interested in the \"[Teams SSO](https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso#get-an-access-token-with-graph-permissions)\" flow that implements this pattern using postMessage (behind an SDK).  We've found that it's insufficient for proper use - the deeplinked note explains why.  This flow works ok for webapps that use cookie auth, but SPAs (that have no backend) cannot use this flow to run, because they cannot get additional tokens.  We are redesigning this flow in order to move away from it, as opposed to doubling down on it. ",
        "user": "hpsin",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1013292356,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
        "created_at": "2022-01-14T16:54:20Z",
        "updated_at": "2022-01-14T16:54:20Z",
        "body": "@hpsin I don't follow the limitations referenced in your link. Why would postMessage not be an alternative to the functionality that @LGraber is proposing for #22?\r\n\r\n@LGraber  would passing the access_token as a fragment in the URL for the iFrame work? (I have not tried that) -- it would have similar security properties to passing parameters from the AS to the client using a fragment.",
        "user": "dickhardt",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1013331151,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
        "created_at": "2022-01-14T17:48:49Z",
        "updated_at": "2022-01-14T17:48:49Z",
        "body": "postMessage is an alternative - the issue is that the end state of both is insufficient to run a full-fledged application that has its own identity and session.  This is a valid proposal to implement OAuth inside an embedded tag (iframe, img, etc) but it's insufficient for authentication, which is the limitation hit in the link. ",
        "user": "hpsin",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1013491844,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
        "created_at": "2022-01-14T21:39:29Z",
        "updated_at": "2022-01-14T21:39:29Z",
        "body": "@hpsin Hirsh ... if you have time, I would like to talk about it. Obviously you have some insight into more customers but there are some use cases I think that can / do work. My claim is that there is not one single magic bullet that we are going to solve but that we might need a set of mechanisms that can work well for different use cases and/or might be easier for some people to transition to. As Kris pointed out, I think we should have a recommendation on how this can work and it, ideally, should not require super heavy lifting for all of the developers.\r\n\r\nWe actually built a solution using the token in the frame. We had to do a bunch of work to protect it and essentially make them single use but it works. @dickhardt putting it the url of the frame is the security risk because request urls are logged all over the place (perhaps not in browser history). If it is in a header ... it is not logged (ideally). If what I had proposed existed, it would have significantly reduced the work we needed to do. We actually can switch to using PostMessage given how we built it without any changes to our customers but ... I would like to understand more other people's experiences. I don't think we got technical enough in the meeting today :)",
        "user": "LGraber",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1013496654,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
        "created_at": "2022-01-14T21:48:49Z",
        "updated_at": "2022-01-14T21:48:49Z",
        "body": "@LGraber , certainly - either here or hirsin @ my employer is good. I agree in principle - there are certainly things that this solves, that we've seen solved using postMessage (but in a cleaner way that is easy to parse, rather than bespoke protocols). I'm not opposed, and agree that is solves a subclass of #22.  I would only argue that it doesn't provide \"SSO\" as described in the issue title - it provides an access token, that can sometimes (depending on IDP) be parlayed into a session on the RP2 back-end. \r\n\r\nMy intent here is not to say this is bad, only to provide additional backing to your statement that other options (alongside this one) may be necessary. ",
        "user": "hpsin",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1013563395,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
        "created_at": "2022-01-15T00:45:43Z",
        "updated_at": "2022-01-15T00:45:43Z",
        "body": "@LGraber my suggestion was putting the access token in a URL fragment. I understand the security issues of the access token in the URL that is sent to the server. The fragment is not sent to the server, and can be retrieved by the iFrame javascript using `window.location.hash`\r\n\r\nThis mechanism is common in OAuth 2 for sending the authorization response back to a client to prevent the  authorization code, ID Token, access token from being logged in the clients server. It also works well for SPA apps. The diagram in [4.2](https://datatracker.ietf.org/doc/html/rfc6749#section-4.2) shows how it works.\r\n\r\nOAuth 2 does not allow URL fragments per [3.1.2](https://datatracker.ietf.org/doc/html/rfc6749#section) so that the fragment is available for results. \r\n\r\n@hpsin for authentication, why not pass an ID token to the iFrame? If passed as a fragment, it seems to have the same security properties as a full OIDC flow using:\r\n\r\n        `response_type=id_token`\r\n        `response_mode=query`\r\n\r\n\r\n\r\n\r\n",
        "user": "dickhardt",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1013751882,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
        "created_at": "2022-01-15T20:48:53Z",
        "updated_at": "2022-01-15T20:48:53Z",
        "body": "@dickhardt Sorry ... I see what you are saying. That is interesting. (I think) It is similar'ish to PostMessage but simpler. The resource server still needs to server up an initial, unauthenticated page, get the access_token from the fragment, and send it back to the resource server to AuthN/Z the user and determine if whatever resource is being requested should be loaded. I agree that seems simpler than postMessage (although I haven't thought through all the security questions but perhaps you have). I wonder how we think comparatively of that flow versus the flow which sends the token in the Auth header on the initial get request for the iframe src. For a lot of apps, I can see how what you are talking about would work quite well ",
        "user": "LGraber",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1366070796,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
        "created_at": "2022-12-27T17:42:41Z",
        "updated_at": "2022-12-27T17:42:41Z",
        "body": "One thing we need to be sure everyone is aligned on is terminology. In the identity world, registration is typically another term for account creation. I think in some of these browser flows, registration could mean either account creation, or \"linking\" the IdP + account to the browser. \r\n\r\nThe rest of my comments are in the context of the identity use of registration (account creation).\r\n\r\nIn many cases, the registration (account creation flow) does not happen in the same browser or on the same device, or may not even be done by the end user (ex: work/school account created on your behalf). So for \"RP Log in\" step2, what happens if the user already has an account with the IdP, but did not create that account in this browser or device?\r\n\r\n> RP Log out\r\n\r\nLogging out of only the local site is the typical experience for consumer services that use a third party sign in provider, but this is not typical for work/school where global sign out is required. In some of the FedCM discussions, we had talked about potentially having a model where the browser call logout endpoints on behalf of the IdP.",
        "user": "timcappalli",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1369789212,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
        "created_at": "2023-01-03T13:47:27Z",
        "updated_at": "2023-01-03T14:13:45Z",
        "body": "> One thing we need to be sure everyone is aligned on is terminology. In the identity world, registration is typically another term for account creation. I think in some of these browser flows, registration could mean either account creation, or \"linking\" the IdP + account to the browser.\r\n\r\nAh, good to know. I've added strikethroughs and replacement text above. I was using registration as I understood it was used in FedCM- to mean linking.\r\n\r\n> In many cases, the registration (account creation flow) does not happen in the same browser or on the same device, or may not even be done by the end user (ex: work/school account created on your behalf). So for \"RP Log in\" step2, what happens if the user already has an account with the IdP, but did not create that account in this browser or device?\r\n\r\nThey go to Linking step2 and in step3 the IDP \"popup (or new tab) appears of idp.com that allows the user confirm the permissions for example.com\" would allow them to log in to the IDP before making permissions decisions.\r\n\r\n> Logging out of only the local site is the typical experience for consumer services that use a third party sign in provider, but this is not typical for work/school where global sign out is required. In some of the FedCM discussions, we had talked about potentially having a model where the browser call logout endpoints on behalf of the IdP.\r\n\r\nSome version of this is probably still possible in depending on the structure of the endpoints. We would need to add them to some in-browser store at linking-time and add an IDP logout to the Federated Login Status API that issues those requests with first-party cookies. Does that sound reasonable as a high-level description?",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1373142785,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
        "created_at": "2023-01-06T04:52:55Z",
        "updated_at": "2023-01-06T04:52:55Z",
        "body": "I provided a version of this feedback in a discussion with @bvandersloot-mozilla, but I thought that I'd surface my feedback on it.\r\n\r\nAn extension to the FedCM is my preferred way to approach this; though the fully-worked standalone example is helpful for understanding the ideas without encumbrance, we have an obligation to reconcile our changes with what exists.  There are also some key aspects of FedCM that are worth retaining.\r\n\r\nThere are 2 things here that are fairly critical extensions to the basic functions that FedCM provides:\r\n\r\n1. A way for a user to log in or sign up to an IdP.\r\n2. A way for the user and IdP to interact and define more precisely what the identity (or token) means.\r\n\r\nBoth address what I consider are major shortcomings of the current FedCM approach.  They both largely follow the same high-level interaction, but the latter really opens up a bunch of authorization cases.\r\n\r\nI like @timcappalli's insistence on the word \"linking\"; it (coincidentally?) highlights my main concern with this sort of interaction model.  No matter what happens here, this sort of API enables *linkability*.  That is, it allows the RP and IdP to link activity on their respective sites to the same person.  Linkability enables [cross-site tracking](https://www.w3.org/2001/tag/doc/unsanctioned-tracking/), which is undesirable in the general case and why we now insist on sites gaining explicit and deliberate permission prior to allowing it.\r\n\r\nThat brings me to my next point.  If we are to open up the API to authorization use cases (which I think is justified), there are constraints that a browser might want to apply that aren't necessarily present in existing systems.\r\n\r\nI'm going to use a bit of a bad example here to illustrate my point, but it is the best I have that illustrates the potential for there to be a gap between actuality and practice, so bear with me.  Let's say that you have a vendor of adult beverages who wants some certainty that their customer is over 21.  Now, leaving aside the many problems with this use case[^1], you might imagine the vendor being an RP to an IdP that can authorize the generation of a [verifiable credential (VC)](https://www.w3.org/TR/vc-data-model/) that says \"IdP X has verified that this person is over 21\".\r\n\r\nThere is a gap here between the user's understanding of that interaction and the reality.  A user might expect that there is a single bit of information flowing from IdP to RP: whether they are over 21 or not.  Leaving aside the fact that one bit of information can be enough to enable tracking, the sort of exchange contemplated here contains far more information than that.  Consequently, whether or not the RP and IdP act to link user identities across sites, they now have that capability.\r\n\r\nPart of building a system like this is building in controls (like choosers and permissions prompts), but we also need to think about accountability for those cases where sites gain access to these capabilities.  These controls need to be commensurate with the capabilities that are being extended to sites.\r\n\r\nThankfully, I think that the existing FedCM approach provides all we need here to hang off.  The account details that the IdP extends to the RP are bound to an identifier that the browser understands and can present to the user.  That identifier (perhaps with a friendly name and image provided by the IdP) gives us a strong handle that can be the basis of providing feedback and control over the linkage.\r\n\r\nInsisting on authorization flows being elevated to employ all the characteristics of federated login might seem like overreach.  However, the only requirement is the inclusion of a label for each authorization: the identifier.  For each authorization, the IdP can maintain a set of tuples that include the RP, the allocated identifier, the set of resources that were exchanged/authorized with the RP under that identifier, plus supplementary information (a name, a picture, access times, etc...).  The browser can maintain its own view, with stores for each RP that record the IdP, the identifier as known to the RP, the identifier as known to the IdP, any active tokens, and other information.\r\n\r\nIn the degenerate case, the allocated identifier might be the primary identifier for the user at the IdP (`user@idp.example`), but this offers a great opportunity to engage with projected identity (`<random-seeming>@auth.idp.example`).  IdPs can allocate identifiers that aren't linkable to the canonical identifier.  This identifier is then a handle on a specific IdP-RP interaction.  Projected identity is therefore optional, but it gives IdPs a more privacy-respecting option.\r\n\r\nThere's a lot more to this that needs to be worked out, like the various revocation flows, but it would help if we could get alignment on a basic model like the one suggested here.  Most of these details should become more tractable once there is a good set of handles that all actors can agree to.\r\n\r\n\r\n[^1]: It's hard to know exactly where to start on the problems with this example, so I'll just point out that online age verification has a long and chequered history.  I will, however, point out that [Privacy Pass](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-architecture) and [Private State Tokens](https://wicg.github.io/trust-token-api/) (warning: hard hat area) provide an alternative approach for passing low entropy signals between sites and so might offer a superior approach when applied to this class of problem.",
        "user": "martinthomson",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1400498598,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
        "created_at": "2023-01-23T15:04:12Z",
        "updated_at": "2023-01-23T15:04:12Z",
        "body": "Hey @bvandersloot-mozilla, this is an interesting proposal! I had a few questions which I'll try to ask at the call later today, but wanted to also post them here to allow for preparation or following up:\r\n\r\n1. Can you point to any documented breakage or developer experience issues that this would help with? I'm not saying that they don't exist, it would just help inform the discussion to know what we're trying to solve for. So, in other words, what is the API gap that we're filling with this vs. existing FedCM?\r\n\r\n2. \r\n> \"Can we manage to do front-channel logout if the RP constrains its use of Credentials.\"\r\n\r\ncan you expand on what \"constrains\" means here?\r\n\r\n3. How does your proposal interact with @martinthomson's comment above? (I had a quick chat with Martin to clarify some aspects of what he's saying here, which I think is approximately that we're still exchanging identifiers even for authentication and should embrace it)? I think it would be useful to describe how the \"authentication\" use case influences the design decisions in your proposal.\r\n\r\n4. Related to that:\r\n> \"Can we support redirect login flows with minor changes to this definition and no change in UX or DX?\"\r\n\r\nCan you expand on this question?\r\n",
        "user": "johannhof",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1400536705,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
        "created_at": "2023-01-23T15:26:36Z",
        "updated_at": "2023-01-23T15:30:07Z",
        "body": "> A way for a user to log in or sign up to an IdP.\r\n\r\nIn most cases, the user is not signing up for an account at the IdP.\r\n\r\nWe should explicitly split out accounts, relationships, and credentials:\r\n- Local account, local credential\r\n- Local account, federated credential\r\n\r\nSo we end up with the following inline combinations:\r\n\r\n1. User creates a local account at the RP, using a local credential(s) [common]\r\n2. User signs in with a local account at the RP [common]\r\n3. User creates a local account, using an existing federated identity (common)\r\n4. User creates a local account, using an existing federated identity, that uses an existing federated identity (aka chaining) [common in work/school]\r\n5. User creates a local account, using a newly created federated identity [not very common for 3P consumer]\r\n6. User adds a federated identity to an existing local account [fairly common, happens out of band]",
        "user": "timcappalli",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1400583540,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
        "created_at": "2023-01-23T15:57:25Z",
        "updated_at": "2023-01-23T15:57:25Z",
        "body": "\r\n>     1. Can you point to any documented breakage or developer experience issues that this would help with? I'm not saying that they don't exist, it would just help inform the discussion to know what we're trying to solve for. So, in other words, what is the API gap that we're filling with this vs. existing FedCM?\r\n\r\nIt is hard to point to exactly one issue, but there are two things this helps address:\r\n\r\n1. Not-logged-in users (#67, w3c-fedid/FedCM#283, w3c-fedid/FedCM#380)\r\n2. IDPs that do not want to implement the new API endpoints (can't find an issue, but has been discussed in meetings)\r\n\r\n> \r\n> \r\n> > \"Can we manage to do front-channel logout if the RP constrains its use of Credentials.\"\r\n> \r\n> can you expand on what \"constrains\" means here?\r\n> \r\n\r\nOnly use the `token` via the Credential, rather than storing it in Local Storage and not using the API. This allows us to delete the relevant Credentials to prevent their use, effectively logging the user out.\r\n\r\n>     3. How does your proposal interact with @martinthomson's comment above? (I had a quick chat with Martin to clarify some aspects of what he's saying here, which I think is approximately that we're still exchanging identifiers even for authentication and should embrace it)? I think it would be useful to describe how the \"authentication\" use case influences the design decisions in your proposal.\r\n\r\nRE @martinthomson's comment:\r\n1. This credential type would be integrated with \"identity\" using its CredentialRequestOptions.\r\n2. The primary point of this design that is influenced by the AuthN use case is the `FederatedProviderConfig` which is pretty bare to just transmit a `blob` of data associated with a `clientId` and whatever information is needed to make the flow happen (`loginURL`, `style`).\r\n3. The best way to combine Martin's view with this proposal is to roll some of the `IdentityProviderAccount` information into this proposal's `completeFederatedLoginRequest`. In particular, a user-friendly account name and picture URL. This would give the user some way to know what account this is when managing it. Probably unifying the two flows (Server API and Federated Login Status API) would be a tactic I prefer, via changing the argument of  `completeFederatedLoginRequest` to objects representing the Server API responses.\r\n4. Additionally, we would need to augment the `IdentityProviderToken` to represent a broader set of claims representable to the user. The example Martin used here was age > 21. This gives the user the chance to understand what is being exchanged a bit better \r\n\r\n@martinthomson: feel free to correct me if I misunderstand you here.\r\n\r\n> \r\n>     4. Related to that:\r\n> \r\n> \r\n> > \"Can we support redirect login flows with minor changes to this definition and no change in UX or DX?\"\r\n> \r\n> Can you expand on this question?\r\n\r\nCurrently this proposal assumes a new tab/window is opened to log in to the IDP. This question is asking if we can manage to do this in the same tab with this approximate structure.\r\n\r\n\r\n\r\nThis is a little last minute, but I'll try to get my thoughts here before our meeting. Sorry for any places where I'm not verbose enough.\r\n",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1401280450,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
        "created_at": "2023-01-24T01:24:32Z",
        "updated_at": "2023-01-24T01:24:32Z",
        "body": "> Additionally, we would need to augment the IdentityProviderToken to represent a broader set of claims representable to the user. The example Martin used here was age > 21. This gives the user the chance to understand what is being exchanged a bit better\r\n\r\nI think that the >21 example was probably misconstrued.  That was a negative example, as in I wanted to highlight something that browsers shouldn't do.  I deliberately chose a bad example for that reason, but I guess it's hard to get this stuff right...\r\n\r\nMy core point was that browsers shouldn't be in the business of arbitrating at that level of granularity.  The shape of the API is such that RP and IdP join identity; that's the real effect of any token exchange, no matter what limitations might be claimed.\r\n\r\nOnce identity is joined, the sites can exchange whatever information they choose for this user, bound only by what they know about the user.  Of course, trustworthy sites will give users control over what they exchange.  But at a technical level, the browser is no longer involved.\r\n\r\nWhat I am aiming to do here is ensure that the browser has a handle (an identifier) that it can use as a handle for talking to the user about what is going on.  That identifier can be used by both sites so that all parties have a basis for building a shared understanding:\r\n\r\n* The browser can say that X is provided by the IdP and given to the RP.\r\n* The IdP can use X when talking about the set of information that is being exchanged with the RP.\r\n* The RP can use X when talking about what it has obtained from the IdP.\r\n\r\nThe information we're talking about here could be traits or authorization information.  The browser doesn't need to care.  But it's not an opaque token, it's something that is both user-visible and a key part of all subsequent interactions.  (Adding a name and picture is potentially helpful in making the handle more manageable and accessible, but secondary.)\r\n\r\nOf more serious import is whether we can do anything to ensure that the identifier can be meaningful to users.  I'm not sure that we have a solid defense here.  What stops an IdP from minting identifiers that appear to reveal nothing (over21@example.com for instance), but then using the API to covertly exchange far more than that?",
        "user": "martinthomson",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1401301689,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
        "created_at": "2023-01-24T01:58:15Z",
        "updated_at": "2023-01-24T02:04:42Z",
        "body": "@bvandersloot-mozilla just wanted to write down here what I hopefully relaid in person at the FedID CG call.\r\n\r\nFirst and foremost, I wanted to say that we all got this proposal with a good amount of excitement: it was great to see Firefox being creative about variations here and propose ways in which we could help the ecosystem!\r\n\r\nSecond, I wanted to give some validation about the problem statement: `preserve federated login scenarios without adding IDP APIs`. Decreasing operational and deployment costs for IdPs is a really important problem that we would all agree is unsatisfying about FedCM at the moment.\r\n\r\nThird, I'm sure this was intended by you, but something to be said explicitly is that FedCM lacks an \"extensibility\" story: ways in which IdPs can innovate without asking for permission. That, in addition to decreasing costs, is an area that we haven't investigated enough, and are interested in seeing proposals!\r\n\r\nFourth, I loved the way you went about it: you isolated your proposal into something self-contained and easy to review, but made it clear that it probably should live as an extension of something else rather than something on its own. I think that's a great way to make forward progress.\r\n\r\nFifth, I wanted to say that, while it is great to see exploration, we are / were struggling to understand the proposal (specially because it seems that @martinthomson and you are talking about different things when we first read).\r\n\r\nSo, here are some (clarifying-and-genuinely-non-judgemental) questions that I asked you today, along with what I think we heard from you:\r\n\r\n1. Is the permission here per IdP or per Rp/IdP pair? Ben: the latter, per Rp/IdP pair.\r\n2. What does the permission entitle? Third party cookies? Ben: nope, IdP gets loaded as a top-level frame, first party context.\r\n3. At what point does the IdP learn about the Rp? Ben: after the permission is accepted, the browser loads the IdP in a top-level frame with the information about the requestor, the Rp.\r\n\r\nAnd three questions that I think I don't think I got a clear answer from you:\r\n\r\n1. Isn't this already possible with link decoration, `postMessage()` and `window.open()` without any browser permissions? Why would an IdP choose to use this (more constrained and less performant) API if it can already do this? Ben: Good question, let me get back to you on this.\r\n2. You made a few references to the `Login Status API` but this feels similar to the `Storage Access API` when it comes to linking identities with a permission prompt. What's the relationship between this and SAA?\r\n3. Does this API unlock something special later? For example, can the IdP do front-channel logout?\r\n\r\nWhen we started FedCM ([TPAC2020](https://github.com/fedidcg/FedCM/blob/main/meetings/2020/The%20Web%20Platform%2C%20Privacy%20and%20Federation%20-%20TPAC.pdf)) we looked at three different variations. We called them: the Permissions-oriented variation, the Mediation-oriented (what we ended up with) variation and the Delegation-oriented (Personas-like) variation.\r\n\r\nWe were very deliberate about starting with mediation, but we always thought of the permission variation as complementary and co-existing, rather than in opposition of: mediation is always going to be behind, paving the cowpath,  but we need an API that allows IdP to innovate without asking for (the browsers) permission.\r\n\r\nI think this proposal has a lot of similarities to the Permissions-oriented variation: a permission prompt that allows IdPs to control the rest of the flow. Here is a mock that we used early on [1].\r\n\r\nDoes [1] seem right? Is this more or less what you had in mind from a UX / permission perspective (modulo strings, obviously), but also from a browser affordance perspective (i.e. a pop-up window, with an origin attribution, but otherwise capable of loading the expressivity power of HTML/JS/CSS).\r\n\r\nIf this is more or less what you had in mind, I think you'd find a lot of synergy here from us.\r\n\r\n[1]\r\n\r\n![Untitled](https://user-images.githubusercontent.com/693738/214195535-4def5f5c-6291-495c-a974-f258aaf415f3.gif)\r\n",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1408677883,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
        "created_at": "2023-01-30T14:01:31Z",
        "updated_at": "2023-01-30T14:01:31Z",
        "body": "As I already expressed in the meeting, I agree with @martinthomson's point here:\r\n\r\n> My core point was that browsers shouldn't be in the business of arbitrating at that level of granularity. The shape of the API is such that RP and IdP join identity; that's the real effect of any token exchange, no matter what limitations might be claimed.\r\n\r\nThinking about any kind of other semantic than sharing identity (even with the restrictions Martin describes) seems to be an interesting challenge, but from my understanding of this thread and https://github.com/fedidcg/proposals/issues/3#issuecomment-1400583540 it doesn't seem to be the primary goal/pain point that this proposal is solving. As such, I would suggest that it poses a major distraction and that we should separate out the two ideas :)\r\n\r\nAs mentioned before, I'm otherwise very interested in this proposal and the potential for building a more flexible FedCM(-like) flow for developers, as long as we manage to keep the user experience relevant and contextual.",
        "user": "johannhof",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1433176263,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
        "created_at": "2023-02-16T14:30:31Z",
        "updated_at": "2023-02-16T14:30:31Z",
        "body": "I think this benefits from being split into several interrelated PRs on FedCM, as suggested by commenters. I've split the core points into [fedidcg/FedCM#441](https://github.com/fedidcg/FedCM/issues/441), [fedidcg/FedCM#442](https://github.com/fedidcg/FedCM/issues/442), [fedidcg/FedCM#443](https://github.com/fedidcg/FedCM/issues/443), and a comment on [fedidcg/FedCM#429](https://github.com/fedidcg/FedCM/issues/429) that led to PR [fedidcg/FedCM#439](https://github.com/fedidcg/FedCM/pull/439). \r\n\r\nGiven those discussions/proposals on FedCM, I will close this as completed.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1452165323,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-02T16:32:05Z",
        "updated_at": "2023-03-02T16:32:05Z",
        "body": "Hello!\r\nIt is not clear to me what the difference is between `n.c.allowed.get` and `n.c.allowed.invoke`. More specifically, what I would use get for. \r\n\r\nAlso, the sequence diagram for this shows a flow that involves some kind of embedded discovery service (and I assume is limited to an embedded type). That is not clearly reflected in the test. For example, if the SP is in an unconfigured state, a first step could be to initiate discovery before the `put` API is called?",
        "user": "philsmart",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1452180271,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-02T16:42:36Z",
        "updated_at": "2023-03-02T16:42:36Z",
        "body": "Allowing for IdP-Initiated SSO. It might be useful to have a similar call to `n.c.allowed.isEmpty` but taking an IdP and SP combination. Just as a way for the IdP to know if it needs to call `put` again i.e. `put` is probably redudant if the IdP and SP already have a relationship in the browser. ",
        "user": "philsmart",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1452340305,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-02T18:25:48Z",
        "updated_at": "2023-03-02T18:25:48Z",
        "body": "Thinking about this after our workshop I suspect we may need some trust component in this case aswell to make the UX work reasonably well. \r\n\r\nAs it stands the IdP and SP are represented essentially by their respective ORIGIN but in order to support human-friendly naming, branding elements and - equally importantly - multiple protocol endpoints per IdP/SP it is probably necessary to authenticate the binding between ORIGIN and any additional data needed to produce good UX. \r\n\r\nThis is exactly what SAML and OIDC metadata does today but trusting the caller to provide this data opens the way for a rogue SP to provide false endpoints thereby tricking a user into a flow that leads to tracking. The solution could be to introduce some form of trust anchor (eg the federation operator) that can authenticate data associated with the SP and IdP. ",
        "user": "leifj",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1452358154,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-02T18:37:29Z",
        "updated_at": "2023-03-02T18:37:29Z",
        "body": "it may be possible to support a simple version of the api which only takes ORIGIN (sp and idp) as input without introducing external trust but at the expense of the UX only being able to display the ORIGIN. In the mockups above the name of the University would be replaced by its URL.",
        "user": "leifj",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1454799155,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-04T16:44:10Z",
        "updated_at": "2023-03-04T16:44:10Z",
        "body": "added [judielaine](https://github.com/judielaine)'s flowchart diagram that was also agreed by the participants at the meeting",
        "user": "sunetzacharias",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1458242701,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-07T14:11:24Z",
        "updated_at": "2023-03-07T14:11:24Z",
        "body": "Adding steps in authentication process is the opposite of seamless. It's not user-friendly; it's frustrating. There are already so many steps that users have to go through (multiple results in WAYF, IdP's MFA, questions at SP's side, popups asking for rating, updates, etc.). This was meant to be seamless access.\r\n\r\nIf we ask a user to take action then it needs to make sense to them, and in such situation the user is not making an informed choice, they're just feeding the browser so it lets them pass. It's not even a choice. 99,99% of all users will have no clue what's going on, they can't possibly know whether the SP is to be trusted or not or whether their choice was the right one (before they actually authenticate). And if they do make the wrong choice in haste, then what?\r\n\r\nThere's already an existing trust infrastructure that has been established for this purpose and we should utilize that.\r\n\r\nThis could perhaps be a fallback for when the existing trust infrastructure isn't in place, for bilateral connections. It still won't be user friendly but at least it would be needed.",
        "user": "meshna",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1460261742,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-08T14:39:46Z",
        "updated_at": "2023-03-08T14:40:40Z",
        "body": "It would be very helpful if you could add an intro section that talks about both the user journey and problem statement before diving into a proposed solution. For example, \"A university student wants to access a research paper from research.org. Their university is part of a federation that provides access to research.org... blah blah\". Ideally the problem statement would highlight the issues you're facing today and the issues you think you'll be facing tomorrow (3PCD, link decoration, etc).",
        "user": "timcappalli",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1460329339,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-08T15:25:07Z",
        "updated_at": "2023-03-08T15:28:30Z",
        "body": "> Hello! It is not clear to me what the difference is between `n.c.allowed.get` and `n.c.allowed.invoke`. More specifically, what I would use get for.\r\n\r\n@philsmart The idea here is that `n.c.allowed.get` would return the list of IdP objects associated with the SP, so that a chooser UI element (a la seamlessaccess) can be presented. When an IdP is selected from that chooser, `n.c.allowed.invoke` is called, which presents a browser-generated permission modal (\"do you want to sign-in with XYZ IdP?\") and returns a Promise that resolves to either the selected IdP object (if the user clicks \"allow\"), or an Error (if the user clicks \"deny\").",
        "user": "windhamg",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1460707764,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-08T19:02:07Z",
        "updated_at": "2023-03-08T19:02:07Z",
        "body": "[user-flows-saml-meshna.pdf](https://github.com/fedidcg/proposals/files/10924133/user-flows-saml-meshna.pdf)\r\n\r\nAttaching a quickly put together user flow with some descriptions; if a different format is needed and/or I could upload it somewhere for easy collaboration, please let me know where.",
        "user": "meshna",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1467130866,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-13T23:50:29Z",
        "updated_at": "2023-03-13T23:50:29Z",
        "body": "> [user-flows-saml-meshna.pdf](https://github.com/fedidcg/proposals/files/10924133/user-flows-saml-meshna.pdf)\r\n> \r\n> Attaching a quickly put together user flow with some descriptions; if a different format is needed and/or I could upload it somewhere for easy collaboration, please let me know where.\r\n\r\nFor clarity: This describes an old flow of how a implementor of the SeamlessAccess discovery and persistence service has its set up. It is not related to the context of the proposal #4.",
        "user": "sunetzacharias",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1467718527,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-14T09:25:23Z",
        "updated_at": "2023-03-14T09:25:23Z",
        "body": "> > [user-flows-saml-meshna.pdf](https://github.com/fedidcg/proposals/files/10924133/user-flows-saml-meshna.pdf)\r\n> > Attaching a quickly put together user flow with some descriptions; if a different format is needed and/or I could upload it somewhere for easy collaboration, please let me know where.\r\n> \r\n> For clarity: This describes an old flow of how a implementor of the SeamlessAccess discovery and persistence service has its set up. It is not related to the context of the proposal #4.\r\n\r\nYes, this was a response to timcappalli's comment above.",
        "user": "meshna",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1475362020,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-19T18:57:55Z",
        "updated_at": "2023-03-19T18:57:55Z",
        "body": "Updated the proposal today with information about the \"Threat model\".\r\nLast monday updated the text with various information and updated diagrams. Interested parties should read through the entire text as a lot has been attempted to be clarified.",
        "user": "sunetzacharias",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1476304600,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-20T14:09:46Z",
        "updated_at": "2023-03-20T14:09:46Z",
        "body": "Here are a few issues with the current FedCM and solutions this model offers. \r\n\r\n### Many IdPs may be hosted by a cloud provider at an Origin\r\n\r\nAzure and Cirrus are examples. Current model cannot distinguish between all the different IdPs at the origin. \r\n\r\nThis proposal provides a method by which more sophisticated integrations can supply the full URLs for the endpoints currently at .well-known . Note that while an identifier could be provided for the origin .well-known, the scale of some of the cloud provides may make loading that file prohibitively slow.\r\n\r\n### Many SPs may be hosted by a cloud provider \r\n\r\nOffice 365 and Liblynx (a platform for journals) are examples. Current model cannot provide the IdP sufficient information to distinguish between options. \r\n\r\nThis proposal provides a method by which more sophisticated integrations can supply the full URLs for the endpoints IdPs pre-provision as acceptable locations to return Authentication responses.\r\n\r\n### Roadmap for more trust\r\n\r\nAssuming that browsers will allow protocol exchanges to continue, the provisioning of all the metadata allows a browser to restrict front channel cross domain authentication exchanges to the same pre-specified endpoints that the protocols use. Admittedly, this will require additional user interactions when protocol endpoints change.\r\n\r\nThe endpoints provided by the SP for the IdP and or the SP itself can also be signed by a trust credentialing partner, allowing browsers to signal to endusers that the endpoints are certified by an trusted party. \r\n",
        "user": "judielaine",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1476421125,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-20T15:15:53Z",
        "updated_at": "2023-03-20T15:16:36Z",
        "body": "> Azure and Cirrus are examples. Current model cannot distinguish between all the different IdPs at the origin.\r\n\r\nCan you give us real world examples? Can you copy/paste an Azure / Cirrus URL that represents a real world IdP? And can't some of this be solved with DNS CNAMES?",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1476427806,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-20T15:19:32Z",
        "updated_at": "2023-03-20T15:20:26Z",
        "body": "> Here are a few issues with the current FedCM and solutions this model offers.\r\n\r\nFrom what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\r\n\r\nIs it fair to articulate this as one of the problems we face?",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1476431433,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-20T15:21:38Z",
        "updated_at": "2023-03-20T15:24:03Z",
        "body": "> Here are a few issues with the current FedCM and solutions this model offers.\r\n\r\nThe other issue that I heard from Gary was along the lines of \"IdP sessions are typically short-lived (say, a few hours, e.g. at the University Of Arizona it was around 8 hours)\", which is an assumption that we don't take into consideration in the current design.",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1476435045,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-20T15:23:41Z",
        "updated_at": "2023-03-20T15:23:41Z",
        "body": "FedCM calls all IdPs to find accounts. Typical federation flow would be just to choose the IdP without making any calls to find account/session.",
        "user": "philsmart",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1476455783,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-20T15:33:07Z",
        "updated_at": "2023-03-20T15:34:18Z",
        "body": "> > Here are a few issues with the current FedCM and solutions this model offers.\r\n> \r\n> From what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\r\n> \r\n> Is it fair to articulate this as one of the problems we face?\r\n\r\nMost website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.",
        "user": "wanpengli",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1476479457,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-20T15:44:59Z",
        "updated_at": "2023-03-20T15:44:59Z",
        "body": "Another note I got from the demo you walked us through:\r\n\r\n> The SAML tracer breaks when we use FedCM, because the extension doesn't have visibility over the browser mediated UI.",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1477098438,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-20T23:53:40Z",
        "updated_at": "2023-03-20T23:53:40Z",
        "body": "> > Azure and Cirrus are examples. Current model cannot distinguish between all the different IdPs at the origin.\r\n> \r\n> Can you give us real world examples? Can you copy/paste an Azure / Cirrus URL that represents a real world IdP? And can't some of this be solved with DNS CNAMES?\r\n\r\nHere are some examples:\r\n\r\n1. Multiple institutions have registered their Google IdPs in various national federations' metadata that are part of the eduGAIN aggregate metadata:\r\n    - **Institut des Arts de Diffusion (BELNET Federation)**:\r\n       ```\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02lghgox\"/>\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02lghgox\"/>\r\n       ```\r\n    - **Luxembourg School of Business (eduID Luxembourg)**:\r\n       ```\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02ws9ruj\"/>\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02ws9ruj\"/>\r\n       ```\r\n    -  **University of Technology and Applied Sciences (OMREN)**\r\n        ```\r\n        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02afc2g7\"/>\r\n        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02afc2g7\"/>\r\n        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02afc2g7\"/>\r\n        ```\r\n2. University of Northern Colorado has 2 separate Azure AD tenants (one for staff, the other for students) behind a Cirrus Proxy:\r\n    - **Azure AD tenant 1**:\r\n       ```\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://login.microsoftonline.com/b4dce27c-d088-4454-9965-2b59a23ea171/saml2\"/>\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://login.microsoftonline.com/b4dce27c-d088-4454-9965-2b59a23ea171/saml2\"/>\r\n        ```\r\n    - **Azure AD tenant 2**:\r\n       ```\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://login.microsoftonline.com/48e07fd6-ad72-497f-b298-b5c57de6db2d/saml2\"/>\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://login.microsoftonline.com/48e07fd6-ad72-497f-b298-b5c57de6db2d/saml2\"/>\r\n       ```\r\n3. The Danish federation has all of their member IdPs (72 listed in the eduGAIN metadata aggregate) behind a single domain; so all of their SSO endpoints start with https://birk.wayf.dk/. \r\n\r\n\r\n",
        "user": "windhamg",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1479849732,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-22T16:03:47Z",
        "updated_at": "2023-03-22T16:03:47Z",
        "body": "> > > Here are a few issues with the current FedCM and solutions this model offers.\r\n> > \r\n> > \r\n> > From what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\r\n> > Is it fair to articulate this as one of the problems we face?\r\n> \r\n> Most website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.\r\n\r\nCILogon is a RP that brokers access from the eduGAIN federation to a large number of scientific resources. It supports more than 4000 IdP. See https://cilogon.org/\r\n\r\nThat is only one example. Many RPs in the higher education and research space federate with thousands of IdPs. It's how the community facilitates scholarly and research collaboration.\r\n\r\n",
        "user": "skoranda",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1479869761,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-22T16:16:13Z",
        "updated_at": "2023-03-22T16:16:13Z",
        "body": "Correct.\n\nElsevier SP federates with 3200+ IdPs and that's not the only publisher doing that; this is a normal use case.\n\nKind regards,\nMeshna\n\n\n\nFrom: Scott Koranda ***@***.***>\nSent: Wednesday, March 22, 2023 17:04\nTo: fedidcg/proposals ***@***.***>\nCc: Koren, Meshna (ELS-AMS) ***@***.***>; Comment ***@***.***>\nSubject: Re: [fedidcg/proposals] idp-sp-storage API (Issue #4)\n\n\n*** External email: use caution ***\n\n\n\nHere are a few issues with the current FedCM and solutions this model offers.\n\nFrom what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\nIs it fair to articulate this as one of the problems we face?\n\nMost website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.\n\nCILogon is a RP that brokers access from the eduGAIN federation to a large number of scientific resources. It supports more than 4000 IdP. See https://cilogon.org/<https://nam11.safelinks.protection.outlook.com/?url=https%3A%2F%2Fcilogon.org%2F&data=05%7C01%7Cm.koren%40elsevier.com%7Cf2b1b3ed5f81435628dd08db2aef0bf5%7C9274ee3f94254109a27f9fb15c10675d%7C0%7C0%7C638150978418604233%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=XcOIWOQdq05LitgIJXm3VeNGVboaYnIKJhSBeyar2gU%3D&reserved=0>\n\nThat is only one example. Many RPs in the higher education and research space federate with thousands of IdPs. It's how the community facilitates scholarly and research collaboration.\n\n-\nReply to this email directly, view it on GitHub<https://nam11.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Ffedidcg%2Fproposals%2Fissues%2F4%23issuecomment-1479849732&data=05%7C01%7Cm.koren%40elsevier.com%7Cf2b1b3ed5f81435628dd08db2aef0bf5%7C9274ee3f94254109a27f9fb15c10675d%7C0%7C0%7C638150978418604233%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=ktO3z7Gljws1nvlYsgxVpbGXPCxHsiAJ3e7fjAhmlOU%3D&reserved=0>, or unsubscribe<https://nam11.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAFOCGTRCFP4V5M6TVW5KHP3W5MPG5ANCNFSM6AAAAAAVMVWX3Q&data=05%7C01%7Cm.koren%40elsevier.com%7Cf2b1b3ed5f81435628dd08db2aef0bf5%7C9274ee3f94254109a27f9fb15c10675d%7C0%7C0%7C638150978418604233%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=cuG9LkZGecBT5U50TUH6RtCBbDsjBeOfKQ2DVJjbZcQ%3D&reserved=0>.\nYou are receiving this because you commented.Message ID: ***@***.******@***.***>>\n\n________________________________\n\nElsevier B.V. Registered Office: Radarweg 29, 1043 NX Amsterdam, The Netherlands, Registration No. 33158992, Registered in The Netherlands.\n",
        "user": "meshna",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1480855664,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/5",
        "created_at": "2023-03-23T09:25:50Z",
        "updated_at": "2023-03-23T09:25:50Z",
        "body": "proposal has been updated with more elaborate explanations of the flows and background",
        "user": "sunetzacharias",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1481439229,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-23T15:50:52Z",
        "updated_at": "2023-03-23T15:53:06Z",
        "body": "> Most website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs. \r\n\r\nI'm going through a list of publishers. In the past 40 minutes i identified the following sites with more than ten IdPs.  Adding -- one normally needs to search for their institution, you may not be able to determine the precise number of IdPs but can explore search terms to determine \"more than ten\".\r\n\r\nhttps://5minuteconsult.com see https://5minuteconsult.com/SignInShibboleth.aspx, pick from five federations\r\nhttps://akjournals.com/ see https://akjournals.com/login\r\nhttps://acpjournals.org see https://www.acpjournals.org/action/ssostart?redirectUri=%2F\r\nhttps://alexanderstreet.com/ see https://search.alexanderstreet.com/wayf?destination=\r\nhttps://anatomy.tv see https://www.anatomy.tv/login?lastpageurl=titles\r\n\r\nhttps://academic.oup.com/ see  https://oup2-ds.sams-sigma.com/?entityID=https%3A%2F%2Foup-sp.sams-sigma.com%2Fshibboleth&return=https%3A%2F%2Foup-sp.sams-sigma.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Afd4b4a0c1b2d0e230c53001b312510d6d644de32ff591de54a561602d1bd794d\r\nhttps://access.torrossa.com see https://access.torrossa.com/shibboleth-ds/index.html?entityID=https%3A%2F%2Fwww.torrossa.com%2Fshibboleth&return=https%3A%2F%2Faccess.torrossa.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Aa28767884b281870eba40e75d8f1fde661614e20f8e49c16823d93259d5e078b\r\nhttps://acta.chadwyck.co.uk see https://www.proquest.com/legacyredirect/actasanctorum\r\nhttps://advantage.marketline.com see https://advantage.marketline.com/HomePage/Index?returnUrl=Home\r\nhttps://advisor.lww.com  see https://wayfinder.openathens.net/?return=https%3A%2F%2Fconnect.openathens.net%2Fsaml%2F2%2Fauth%3Fr%3Dhttps%253A%252F%252Fconnect.openathens.net%252Foidc%252Fauth%253Fresponse_type%253Dcode%2526client_id%253Dwolterskluwer.com.oidc-app-v1.0c519265-f12d-4407-915b-7c35a86d9c18%2526scope%253Dopenid%2526redirect_uri%253Dhttps%25253A%25252F%25252Flns-sso.lww.com%25252Fopenid_connect_login%2526nonce%253D357e3387b0746%2526state%253Dafaa38974fba%2526pfidpadapterid%253DLippincottAdapter%26d%3Dwolterskluwer.com%26c%3D092c9afe-6fb4-4d4e-bf47-dadfa3d358f7%26as%3Dpublished%26aid%3D0c519265-f12d-4407-915b-7c35a86d9c18&oaDomain=wolterskluwer.com&oaAppId=0c519265-f12d-4407-915b-7c35a86d9c18&entityID=https%3A%2F%2Fadvisor.lww.com%2Foa%2Fmetadata\r\n\r\n\r\n",
        "user": "judielaine",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1481509881,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-23T16:30:44Z",
        "updated_at": "2023-03-23T16:32:13Z",
        "body": "> > Most website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.\r\n> \r\n> I'm going through a list of publishers. In the past 40 minutes i identified the following sites with more than ten IdPs. Adding -- one normally needs to search for their institution, you may not be able to determine the precise number of IdPs but can explore search terms to determine \"more than ten\".\r\n> \r\n> https://5minuteconsult.com see https://5minuteconsult.com/SignInShibboleth.aspx, pick from five federations https://akjournals.com/ see https://akjournals.com/login https://acpjournals.org see https://www.acpjournals.org/action/ssostart?redirectUri=%2F https://alexanderstreet.com/ see https://search.alexanderstreet.com/wayf?destination= https://anatomy.tv see https://www.anatomy.tv/login?lastpageurl=titles\r\n> \r\n> https://academic.oup.com/ see https://oup2-ds.sams-sigma.com/?entityID=https%3A%2F%2Foup-sp.sams-sigma.com%2Fshibboleth&return=https%3A%2F%2Foup-sp.sams-sigma.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Afd4b4a0c1b2d0e230c53001b312510d6d644de32ff591de54a561602d1bd794d https://access.torrossa.com see https://access.torrossa.com/shibboleth-ds/index.html?entityID=https%3A%2F%2Fwww.torrossa.com%2Fshibboleth&return=https%3A%2F%2Faccess.torrossa.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Aa28767884b281870eba40e75d8f1fde661614e20f8e49c16823d93259d5e078b https://acta.chadwyck.co.uk see https://www.proquest.com/legacyredirect/actasanctorum https://advantage.marketline.com see https://advantage.marketline.com/HomePage/Index?returnUrl=Home https://advisor.lww.com see https://wayfinder.openathens.net/?return=https%3A%2F%2Fconnect.openathens.net%2Fsaml%2F2%2Fauth%3Fr%3Dhttps%253A%252F%252Fconnect.openathens.net%252Foidc%252Fauth%253Fresponse_type%253Dcode%2526client_id%253Dwolterskluwer.com.oidc-app-v1.0c519265-f12d-4407-915b-7c35a86d9c18%2526scope%253Dopenid%2526redirect_uri%253Dhttps%25253A%25252F%25252Flns-sso.lww.com%25252Fopenid_connect_login%2526nonce%253D357e3387b0746%2526state%253Dafaa38974fba%2526pfidpadapterid%253DLippincottAdapter%26d%3Dwolterskluwer.com%26c%3D092c9afe-6fb4-4d4e-bf47-dadfa3d358f7%26as%3Dpublished%26aid%3D0c519265-f12d-4407-915b-7c35a86d9c18&oaDomain=wolterskluwer.com&oaAppId=0c519265-f12d-4407-915b-7c35a86d9c18&entityID=https%3A%2F%2Fadvisor.lww.com%2Foa%2Fmetadata\r\n\r\nThe currently FeDCM API is allowing the RP developer to identify the IdP manually. This works fine with OAuth and OpenIDConnect. SAML needs some special IdP discovery process( see here https://techdocs.broadcom.com/us/en/symantec-security-software/identity-security/siteminder/12-8/configuring/partnership-federation/saml-2-0-only-configurable-features/idp-discovery-profile-saml-2-0.html). If FeDCM need to be compatible with SAML. The IdP discovery procedure of SAML needs to be considered.",
        "user": "wanpengli",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1482718118,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-03-24T12:24:30Z",
        "updated_at": "2023-03-24T12:24:30Z",
        "body": "@wanpengli  Yes! This proposal is in alignment with SAML discovery profiles.The actual specification for SAML Discovery is http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-idp-discovery.html However, with recent user experience and privacy research in the RA21 project -- https://ra21.org/ -- spun off the Seamless Access project -- https://seamlessaccess.org/ . Participants from Seamless Access helped draft this specification.",
        "user": "judielaine",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1502421086,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/5",
        "created_at": "2023-04-10T22:33:17Z",
        "updated_at": "2023-04-10T22:33:17Z",
        "body": "Here is this proposal, converted to markdown: https://github.com/fedidcg/proposals/blob/Offloading-Trust-Issue-5/offloading-trust.md",
        "user": "nckroy",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1502435361,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
        "created_at": "2023-04-10T22:52:09Z",
        "updated_at": "2023-04-10T22:52:09Z",
        "body": "This is now markdown at: https://github.com/fedidcg/proposals/blob/idp-sp-storage-API-Issue-4/idp-sp-storage-api.md",
        "user": "nckroy",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1601661856,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
        "created_at": "2023-06-21T20:54:50Z",
        "updated_at": "2023-06-21T20:54:50Z",
        "body": "@dickhardt I think I need to revive this as we continue to try and make things work with the planned cookie changes and ... in some cases it is simply not possible without drastic changes needed by us and our customers. If the iframe needs to be authenticated on page load, in order to for example set the CSP frame-ancestors headers to prevent click-jack attacks, then all of the other proposals are not valid. The only way to support setting the frame-ancestors is if the auth header is passed in on the frame load. ",
        "user": "LGraber",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    },
    {
        "id": 1856604755,
        "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
        "created_at": "2023-12-14T21:13:09Z",
        "updated_at": "2023-12-14T21:13:09Z",
        "body": "@hpsin you still around and have time to chat? I dropped this as I got caught up in a lot of other things but this is bubbling back up and I think I am going to try and restart this discussion. The link you included is now dead so I cant refresh on that. I feel like the current browser support make clickjack prevention really hard and while we have some workarounds, this is another tool that could make the flows easier for certain implementations. Would love to hear what you think",
        "user": "LGraber",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/Proposals"
    }
]