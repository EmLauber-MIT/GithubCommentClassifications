[
  {
    "id": 981893736,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-11-29T18:19:17Z",
    "updated_at": "2021-11-29T18:19:17Z",
    "body": "I was reading the updated FedCM API spec and while the introduction discusses the need to solve identity experiences that will be broken when support for 3rd party cookies is removed, many (if not most) of the use cases described are not broken by the removal of support for 3rd party cookies. Therefore, it is unclear to me if the proposed solution is a more general (as in new) way to support identity federation with the browser acting as a mediator in all identity flows, or a more specific proposal to address the flows that will be broken (e.g. single-sign-out, sign-in widget on relying party for federated sign-in). Is it possible to clarify this before acceptance as a work item for the group?",
    "user": "gffletch",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment expresses skepticism about whether the proposed solution is a more general or specific proposal to address various identity experiences that will be broken with the removal of support for 3rd party cookies, and requests clarification before accepting it as a work item."
  },
  {
    "id": 981948597,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-11-29T19:31:20Z",
    "updated_at": "2021-11-29T19:31:20Z",
    "body": "For the flows in the spec, I realized we never stated explicitly, but the cases being referenced are when the flow is done through an iframe. You can still do federated login using top level redirects, but after 3rd party cookie deprecation doing siginin within an iframe will not work as the IDP cookies will no longer be passed.\r\n\r\nWould adding the the iframe clarification clear up the issue? Or are there other specific use-cases listed in the spec which are problematic from your point of view?",
    "user": "dj2",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The commenter is requesting clarification on the behavior when using iframes, specifically to resolve a potential issue with federated login. They suggest adding an iframe-specific note to address this limitation and highlight other potentially problematic use cases in the specification that may require further consideration."
  },
  {
    "id": 981953610,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-11-29T19:38:18Z",
    "updated_at": "2021-11-29T19:38:18Z",
    "body": "> Therefore, it is unclear to me if the proposed solution is a more general (as in new) way to support identity federation with the browser acting as a mediator in all identity flows, or a more specific proposal to address the flows that will be broken (e.g. single-sign-out, sign-in widget on relying party for federated sign-in).\r\n\r\nGood question, and sorry for not making it clear enough, but it is for the latter: the more specific / narrow proposal to address the flows that will be broken by the deprecation of third party cookies (used in iframes and XHR as @dj2 suggested).",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "The comment appears to provide a clarification on the proposed solution's scope, specifically addressing concerns about the proposed solution being too broad or general. It does not offer new technical information or propose a change to existing functionality, which are characteristics of Technical Feedback or Feature Requests. The tone is also professional and polite, suggesting it may be part of an administrative process or discussion, such as a meeting or feedback session."
  },
  {
    "id": 982003592,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-11-29T20:41:41Z",
    "updated_at": "2021-11-29T20:41:41Z",
    "body": "@dj2 @samuelgoto Thank you for your responses! I do think it would be good to clarify in the doc. Possibly in section 1.1 call out that these use cases refer to these flows occurring in an iframe. That would help to constrain the over all doc to be referring to flows that occur within iframes.",
    "user": "gffletch",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "This comment is requesting a clarification or additional information in the documentation, which indicates that it is related to enhancing user experience (UX) by specifying the nature of the flow being referred to, thereby guiding readers on what to expect from those flows. The mention of \"in section 1.1\" also implies that this feature request pertains to a specific part or page within the documentation."
  },
  {
    "id": 983044629,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-11-30T21:39:42Z",
    "updated_at": "2021-11-30T21:39:42Z",
    "body": "@gffletch I've integrated a change to hopefully clarify. I've got an outstanding request to add more context of third-party cookies in there. Does the clarification added address your concerns?",
    "user": "dj2",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment is expressing a concern and asking if the clarification provided addresses it, which indicates that this is not technical feedback or administrative."
  },
  {
    "id": 988267684,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-12-07T21:14:21Z",
    "updated_at": "2021-12-07T21:14:21Z",
    "body": "This was approved on the 2021-12-03 call: https://github.com/fedidcg/meetings/blob/main/2021/2021-12-03-notes.md",
    "user": "timcappalli",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "The comment appears to be providing administrative information, specifically referencing a meeting that was approved and documented on the 2021-12-03 call, linked to a GitHub repository. It doesn't pose any technical, use case, or philosophical questions, nor does it request something specific from others."
  },
  {
    "id": 988980941,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-12-08T16:41:57Z",
    "updated_at": "2021-12-08T16:41:57Z",
    "body": "@dj2 I'm glad to see the document was accepted by the WG. I do think the clarifications help. They might need to be restated and readers may gloss over them, but generally it sets a much narrower context which I think will help:)\r\n\r\nMy apologies for being so tardy in my response.",
    "user": "gffletch",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "The comment provides feedback on the acceptance of a document by a Working Group (WG), specifically mentioning that the clarifications are helpful and setting a narrower context, suggesting it addresses a specific use case."
  },
  {
    "id": 1009420639,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2022-01-10T22:44:55Z",
    "updated_at": "2022-01-10T22:44:55Z",
    "body": "Note: this move has been completed. https://github.com/fedidcg/FedCM. Thanks everyone who helped!",
    "user": "travisleithead",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment is providing constructive feedback on the implementation of a new feature, specifically an announcement that the codebase has been updated and a thank you for the help received from others. The tone is neutral and factual, with no requests or demands being made to anyone else."
  },
  {
    "id": 1013280245,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-14T16:38:29Z",
    "updated_at": "2022-01-14T16:38:29Z",
    "body": "@LGraber - you may be interested in the \"[Teams SSO](https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso#get-an-access-token-with-graph-permissions)\" flow that implements this pattern using postMessage (behind an SDK).  We've found that it's insufficient for proper use - the deeplinked note explains why.  This flow works ok for webapps that use cookie auth, but SPAs (that have no backend) cannot use this flow to run, because they cannot get additional tokens.  We are redesigning this flow in order to move away from it, as opposed to doubling down on it. ",
    "user": "hpsin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides a specific example of a technical issue that can be improved or resolved, which is the limitation of using postMessage for non-SPAs (Single Page Applications) when SSO authentication is required."
  },
  {
    "id": 1013292356,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-14T16:54:20Z",
    "updated_at": "2022-01-14T16:54:20Z",
    "body": "@hpsin I don't follow the limitations referenced in your link. Why would postMessage not be an alternative to the functionality that @LGraber is proposing for #22?\r\n\r\n@LGraber  would passing the access_token as a fragment in the URL for the iFrame work? (I have not tried that) -- it would have similar security properties to passing parameters from the AS to the client using a fragment.",
    "user": "dickhardt",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "The comment is discussing the limitations of the current approach and questioning whether postMessage should be used as an alternative, which implies that they are exploring how to improve or address these limitations."
  },
  {
    "id": 1013331151,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-14T17:48:49Z",
    "updated_at": "2022-01-14T17:48:49Z",
    "body": "postMessage is an alternative - the issue is that the end state of both is insufficient to run a full-fledged application that has its own identity and session.  This is a valid proposal to implement OAuth inside an embedded tag (iframe, img, etc) but it's insufficient for authentication, which is the limitation hit in the link. ",
    "user": "hpsin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment proposes an alternative solution to address the issue of insufficient end state for full-fledged application authentication, suggesting OAuth implementation within an embedded tag or iframe, with a valid justification that it's sufficient for authentication but not sufficient for running a full-fledged application."
  },
  {
    "id": 1013491844,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-14T21:39:29Z",
    "updated_at": "2022-01-14T21:39:29Z",
    "body": "@hpsin Hirsh ... if you have time, I would like to talk about it. Obviously you have some insight into more customers but there are some use cases I think that can / do work. My claim is that there is not one single magic bullet that we are going to solve but that we might need a set of mechanisms that can work well for different use cases and/or might be easier for some people to transition to. As Kris pointed out, I think we should have a recommendation on how this can work and it, ideally, should not require super heavy lifting for all of the developers.\r\n\r\nWe actually built a solution using the token in the frame. We had to do a bunch of work to protect it and essentially make them single use but it works. @dickhardt putting it the url of the frame is the security risk because request urls are logged all over the place (perhaps not in browser history). If it is in a header ... it is not logged (ideally). If what I had proposed existed, it would have significantly reduced the work we needed to do. We actually can switch to using PostMessage given how we built it without any changes to our customers but ... I would like to understand more other people's experiences. I don't think we got technical enough in the meeting today :)",
    "user": "LGraber",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "This comment expresses a suggestion for improving the current solution by proposing an alternative approach that could simplify the implementation and reduce the effort required from developers, specifically mentioning PostMessage as a potential mechanism. The commenter also asks others to share their experiences with similar solutions, indicating that it's a request for feedback or guidance rather than purely technical feedback, use case description, administrative discussion, conclusion/resolution, philosophical insight, or an unknown category."
  },
  {
    "id": 1013496654,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-14T21:48:49Z",
    "updated_at": "2022-01-14T21:48:49Z",
    "body": "@LGraber , certainly - either here or hirsin @ my employer is good. I agree in principle - there are certainly things that this solves, that we've seen solved using postMessage (but in a cleaner way that is easy to parse, rather than bespoke protocols). I'm not opposed, and agree that is solves a subclass of #22.  I would only argue that it doesn't provide \"SSO\" as described in the issue title - it provides an access token, that can sometimes (depending on IDP) be parlayed into a session on the RP2 back-end. \r\n\r\nMy intent here is not to say this is bad, only to provide additional backing to your statement that other options (alongside this one) may be necessary. ",
    "user": "hpsin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback on the proposed solution, suggesting alternative approaches and providing additional context to support its validity. It aims to improve understanding and address potential concerns or criticisms related to the proposed technique."
  },
  {
    "id": 1013563395,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-15T00:45:43Z",
    "updated_at": "2022-01-15T00:45:43Z",
    "body": "@LGraber my suggestion was putting the access token in a URL fragment. I understand the security issues of the access token in the URL that is sent to the server. The fragment is not sent to the server, and can be retrieved by the iFrame javascript using `window.location.hash`\r\n\r\nThis mechanism is common in OAuth 2 for sending the authorization response back to a client to prevent the  authorization code, ID Token, access token from being logged in the clients server. It also works well for SPA apps. The diagram in [4.2](https://datatracker.ietf.org/doc/html/rfc6749#section-4.2) shows how it works.\r\n\r\nOAuth 2 does not allow URL fragments per [3.1.2](https://datatracker.ietf.org/doc/html/rfc6749#section) so that the fragment is available for results. \r\n\r\n@hpsin for authentication, why not pass an ID token to the iFrame? If passed as a fragment, it seems to have the same security properties as a full OIDC flow using:\r\n\r\n        `response_type=id_token`\r\n        `response_mode=query`\r\n\r\n\r\n\r\n\r\n",
    "user": "dickhardt",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on an existing solution (putting access token in a URL fragment) and suggests alternative approaches (passing ID token as a fragment). It also explains the security implications of the current approach and compares it to proposed changes. The tone is constructive and aimed at improving the current implementation, making this a technical comment."
  },
  {
    "id": 1013751882,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-15T20:48:53Z",
    "updated_at": "2022-01-15T20:48:53Z",
    "body": "@dickhardt Sorry ... I see what you are saying. That is interesting. (I think) It is similar'ish to PostMessage but simpler. The resource server still needs to server up an initial, unauthenticated page, get the access_token from the fragment, and send it back to the resource server to AuthN/Z the user and determine if whatever resource is being requested should be loaded. I agree that seems simpler than postMessage (although I haven't thought through all the security questions but perhaps you have). I wonder how we think comparatively of that flow versus the flow which sends the token in the Auth header on the initial get request for the iframe src. For a lot of apps, I can see how what you are talking about would work quite well ",
    "user": "LGraber",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed information about a technical issue with the proposed solution and suggests improvements, indicating that it is focused on clarifying and refining the implementation rather than providing new ideas or requirements."
  },
  {
    "id": 1366070796,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2022-12-27T17:42:41Z",
    "updated_at": "2022-12-27T17:42:41Z",
    "body": "One thing we need to be sure everyone is aligned on is terminology. In the identity world, registration is typically another term for account creation. I think in some of these browser flows, registration could mean either account creation, or \"linking\" the IdP + account to the browser. \r\n\r\nThe rest of my comments are in the context of the identity use of registration (account creation).\r\n\r\nIn many cases, the registration (account creation flow) does not happen in the same browser or on the same device, or may not even be done by the end user (ex: work/school account created on your behalf). So for \"RP Log in\" step2, what happens if the user already has an account with the IdP, but did not create that account in this browser or device?\r\n\r\n> RP Log out\r\n\r\nLogging out of only the local site is the typical experience for consumer services that use a third party sign in provider, but this is not typical for work/school where global sign out is required. In some of the FedCM discussions, we had talked about potentially having a model where the browser call logout endpoints on behalf of the IdP.",
    "user": "timcappalli",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides an explanation and suggestion related to technical implementation, specifically around terminology usage in the identity world, and how it might impact user experience in certain scenarios. The tone is helpful and informative, with a focus on clarifying details rather than arguing or proposing new ideas."
  },
  {
    "id": 1369789212,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-03T13:47:27Z",
    "updated_at": "2023-01-03T14:13:45Z",
    "body": "> One thing we need to be sure everyone is aligned on is terminology. In the identity world, registration is typically another term for account creation. I think in some of these browser flows, registration could mean either account creation, or \"linking\" the IdP + account to the browser.\r\n\r\nAh, good to know. I've added strikethroughs and replacement text above. I was using registration as I understood it was used in FedCM- to mean linking.\r\n\r\n> In many cases, the registration (account creation flow) does not happen in the same browser or on the same device, or may not even be done by the end user (ex: work/school account created on your behalf). So for \"RP Log in\" step2, what happens if the user already has an account with the IdP, but did not create that account in this browser or device?\r\n\r\nThey go to Linking step2 and in step3 the IDP \"popup (or new tab) appears of idp.com that allows the user confirm the permissions for example.com\" would allow them to log in to the IDP before making permissions decisions.\r\n\r\n> Logging out of only the local site is the typical experience for consumer services that use a third party sign in provider, but this is not typical for work/school where global sign out is required. In some of the FedCM discussions, we had talked about potentially having a model where the browser call logout endpoints on behalf of the IdP.\r\n\r\nSome version of this is probably still possible in depending on the structure of the endpoints. We would need to add them to some in-browser store at linking-time and add an IDP logout to the Federated Login Status API that issues those requests with first-party cookies. Does that sound reasonable as a high-level description?",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed explanations and reasoning behind proposed changes, clarifies ambiguities in terminology, and offers solutions to potential problems or complexities in implementing the Federated Login protocol. It is providing technical insight and guidance rather than just stating a fact."
  },
  {
    "id": 1373142785,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-06T04:52:55Z",
    "updated_at": "2023-01-06T04:52:55Z",
    "body": "I provided a version of this feedback in a discussion with @bvandersloot-mozilla, but I thought that I'd surface my feedback on it.\r\n\r\nAn extension to the FedCM is my preferred way to approach this; though the fully-worked standalone example is helpful for understanding the ideas without encumbrance, we have an obligation to reconcile our changes with what exists.  There are also some key aspects of FedCM that are worth retaining.\r\n\r\nThere are 2 things here that are fairly critical extensions to the basic functions that FedCM provides:\r\n\r\n1. A way for a user to log in or sign up to an IdP.\r\n2. A way for the user and IdP to interact and define more precisely what the identity (or token) means.\r\n\r\nBoth address what I consider are major shortcomings of the current FedCM approach.  They both largely follow the same high-level interaction, but the latter really opens up a bunch of authorization cases.\r\n\r\nI like @timcappalli's insistence on the word \"linking\"; it (coincidentally?) highlights my main concern with this sort of interaction model.  No matter what happens here, this sort of API enables *linkability*.  That is, it allows the RP and IdP to link activity on their respective sites to the same person.  Linkability enables [cross-site tracking](https://www.w3.org/2001/tag/doc/unsanctioned-tracking/), which is undesirable in the general case and why we now insist on sites gaining explicit and deliberate permission prior to allowing it.\r\n\r\nThat brings me to my next point.  If we are to open up the API to authorization use cases (which I think is justified), there are constraints that a browser might want to apply that aren't necessarily present in existing systems.\r\n\r\nI'm going to use a bit of a bad example here to illustrate my point, but it is the best I have that illustrates the potential for there to be a gap between actuality and practice, so bear with me.  Let's say that you have a vendor of adult beverages who wants some certainty that their customer is over 21.  Now, leaving aside the many problems with this use case[^1], you might imagine the vendor being an RP to an IdP that can authorize the generation of a [verifiable credential (VC)](https://www.w3.org/TR/vc-data-model/) that says \"IdP X has verified that this person is over 21\".\r\n\r\nThere is a gap here between the user's understanding of that interaction and the reality.  A user might expect that there is a single bit of information flowing from IdP to RP: whether they are over 21 or not.  Leaving aside the fact that one bit of information can be enough to enable tracking, the sort of exchange contemplated here contains far more information than that.  Consequently, whether or not the RP and IdP act to link user identities across sites, they now have that capability.\r\n\r\nPart of building a system like this is building in controls (like choosers and permissions prompts), but we also need to think about accountability for those cases where sites gain access to these capabilities.  These controls need to be commensurate with the capabilities that are being extended to sites.\r\n\r\nThankfully, I think that the existing FedCM approach provides all we need here to hang off.  The account details that the IdP extends to the RP are bound to an identifier that the browser understands and can present to the user.  That identifier (perhaps with a friendly name and image provided by the IdP) gives us a strong handle that can be the basis of providing feedback and control over the linkage.\r\n\r\nInsisting on authorization flows being elevated to employ all the characteristics of federated login might seem like overreach.  However, the only requirement is the inclusion of a label for each authorization: the identifier.  For each authorization, the IdP can maintain a set of tuples that include the RP, the allocated identifier, the set of resources that were exchanged/authorized with the RP under that identifier, plus supplementary information (a name, a picture, access times, etc...).  The browser can maintain its own view, with stores for each RP that record the IdP, the identifier as known to the RP, the identifier as known to the IdP, any active tokens, and other information.\r\n\r\nIn the degenerate case, the allocated identifier might be the primary identifier for the user at the IdP (`user@idp.example`), but this offers a great opportunity to engage with projected identity (`<random-seeming>@auth.idp.example`).  IdPs can allocate identifiers that aren't linkable to the canonical identifier.  This identifier is then a handle on a specific IdP-RP interaction.  Projected identity is therefore optional, but it gives IdPs a more privacy-respecting option.\r\n\r\nThere's a lot more to this that needs to be worked out, like the various revocation flows, but it would help if we could get alignment on a basic model like the one suggested here.  Most of these details should become more tractable once there is a good set of handles that all actors can agree to.\r\n\r\n\r\n[^1]: It's hard to know exactly where to start on the problems with this example, so I'll just point out that online age verification has a long and chequered history.  I will, however, point out that [Privacy Pass](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-architecture) and [Private State Tokens](https://wicg.github.io/trust-token-api/) (warning: hard hat area) provide an alternative approach for passing low entropy signals between sites and so might offer a superior approach when applied to this class of problem.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "The comment provides feedback on the proposed extension of the FedCM, which is aimed at addressing shortcomings in its current approach. It requests changes to include login and identity linking functionality, as well as authorization flows that enable linkability between sites and identities. The commenter also touches upon accountability considerations and proposes a basic model for handling these interactions. However, their suggestions are not necessarily technical or feature-related but rather administrative, focusing on providing guidance and clarification."
  },
  {
    "id": 1400498598,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-23T15:04:12Z",
    "updated_at": "2023-01-23T15:04:12Z",
    "body": "Hey @bvandersloot-mozilla, this is an interesting proposal! I had a few questions which I'll try to ask at the call later today, but wanted to also post them here to allow for preparation or following up:\r\n\r\n1. Can you point to any documented breakage or developer experience issues that this would help with? I'm not saying that they don't exist, it would just help inform the discussion to know what we're trying to solve for. So, in other words, what is the API gap that we're filling with this vs. existing FedCM?\r\n\r\n2. \r\n> \"Can we manage to do front-channel logout if the RP constrains its use of Credentials.\"\r\n\r\ncan you expand on what \"constrains\" means here?\r\n\r\n3. How does your proposal interact with @martinthomson's comment above? (I had a quick chat with Martin to clarify some aspects of what he's saying here, which I think is approximately that we're still exchanging identifiers even for authentication and should embrace it)? I think it would be useful to describe how the \"authentication\" use case influences the design decisions in your proposal.\r\n\r\n4. Related to that:\r\n> \"Can we support redirect login flows with minor changes to this definition and no change in UX or DX?\"\r\n\r\nCan you expand on this question?\r\n",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "The comment is asking specific questions about the proposed API, such as documenting breakages and developer experiences, and clarifying a concept related to authentication. This suggests that the commenter wants to understand how the proposal addresses real-world issues and pain points in the FedCM ecosystem."
  },
  {
    "id": 1400536705,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-23T15:26:36Z",
    "updated_at": "2023-01-23T15:30:07Z",
    "body": "> A way for a user to log in or sign up to an IdP.\r\n\r\nIn most cases, the user is not signing up for an account at the IdP.\r\n\r\nWe should explicitly split out accounts, relationships, and credentials:\r\n- Local account, local credential\r\n- Local account, federated credential\r\n\r\nSo we end up with the following inline combinations:\r\n\r\n1. User creates a local account at the RP, using a local credential(s) [common]\r\n2. User signs in with a local account at the RP [common]\r\n3. User creates a local account, using an existing federated identity (common)\r\n4. User creates a local account, using an existing federated identity, that uses an existing federated identity (aka chaining) [common in work/school]\r\n5. User creates a local account, using a newly created federated identity [not very common for 3P consumer]\r\n6. User adds a federated identity to an existing local account [fairly common, happens out of band]",
    "user": "timcappalli",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed information and suggestions related to the technical implementation of IdP functionality, specifically regarding how to handle different types of user actions (signing up vs. logging in). It is focused on optimizing and improving the technical aspects of the system rather than providing a use case or administrative insight."
  },
  {
    "id": 1400583540,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-23T15:57:25Z",
    "updated_at": "2023-01-23T15:57:25Z",
    "body": "\r\n>     1. Can you point to any documented breakage or developer experience issues that this would help with? I'm not saying that they don't exist, it would just help inform the discussion to know what we're trying to solve for. So, in other words, what is the API gap that we're filling with this vs. existing FedCM?\r\n\r\nIt is hard to point to exactly one issue, but there are two things this helps address:\r\n\r\n1. Not-logged-in users (#67, w3c-fedid/FedCM#283, w3c-fedid/FedCM#380)\r\n2. IDPs that do not want to implement the new API endpoints (can't find an issue, but has been discussed in meetings)\r\n\r\n> \r\n> \r\n> > \"Can we manage to do front-channel logout if the RP constrains its use of Credentials.\"\r\n> \r\n> can you expand on what \"constrains\" means here?\r\n> \r\n\r\nOnly use the `token` via the Credential, rather than storing it in Local Storage and not using the API. This allows us to delete the relevant Credentials to prevent their use, effectively logging the user out.\r\n\r\n>     3. How does your proposal interact with @martinthomson's comment above? (I had a quick chat with Martin to clarify some aspects of what he's saying here, which I think is approximately that we're still exchanging identifiers even for authentication and should embrace it)? I think it would be useful to describe how the \"authentication\" use case influences the design decisions in your proposal.\r\n\r\nRE @martinthomson's comment:\r\n1. This credential type would be integrated with \"identity\" using its CredentialRequestOptions.\r\n2. The primary point of this design that is influenced by the AuthN use case is the `FederatedProviderConfig` which is pretty bare to just transmit a `blob` of data associated with a `clientId` and whatever information is needed to make the flow happen (`loginURL`, `style`).\r\n3. The best way to combine Martin's view with this proposal is to roll some of the `IdentityProviderAccount` information into this proposal's `completeFederatedLoginRequest`. In particular, a user-friendly account name and picture URL. This would give the user some way to know what account this is when managing it. Probably unifying the two flows (Server API and Federated Login Status API) would be a tactic I prefer, via changing the argument of  `completeFederatedLoginRequest` to objects representing the Server API responses.\r\n4. Additionally, we would need to augment the `IdentityProviderToken` to represent a broader set of claims representable to the user. The example Martin used here was age > 21. This gives the user the chance to understand what is being exchanged a bit better \r\n\r\n@martinthomson: feel free to correct me if I misunderstand you here.\r\n\r\n> \r\n>     4. Related to that:\r\n> \r\n> \r\n> > \"Can we support redirect login flows with minor changes to this definition and no change in UX or DX?\"\r\n> \r\n> Can you expand on this question?\r\n\r\nCurrently this proposal assumes a new tab/window is opened to log in to the IDP. This question is asking if we can manage to do this in the same tab with this approximate structure.\r\n\r\n\r\n\r\nThis is a little last minute, but I'll try to get my thoughts here before our meeting. Sorry for any places where I'm not verbose enough.\r\n",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "This comment appears to be an administrative update or clarification on the proposal, specifically addressing technical issues and clarifying design decisions, which is a common use case in software development discussions. The tone is formal and informative, with a focus on providing context and ensuring understanding of the proposed solution."
  },
  {
    "id": 1401280450,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-24T01:24:32Z",
    "updated_at": "2023-01-24T01:24:32Z",
    "body": "> Additionally, we would need to augment the IdentityProviderToken to represent a broader set of claims representable to the user. The example Martin used here was age > 21. This gives the user the chance to understand what is being exchanged a bit better\r\n\r\nI think that the >21 example was probably misconstrued.  That was a negative example, as in I wanted to highlight something that browsers shouldn't do.  I deliberately chose a bad example for that reason, but I guess it's hard to get this stuff right...\r\n\r\nMy core point was that browsers shouldn't be in the business of arbitrating at that level of granularity.  The shape of the API is such that RP and IdP join identity; that's the real effect of any token exchange, no matter what limitations might be claimed.\r\n\r\nOnce identity is joined, the sites can exchange whatever information they choose for this user, bound only by what they know about the user.  Of course, trustworthy sites will give users control over what they exchange.  But at a technical level, the browser is no longer involved.\r\n\r\nWhat I am aiming to do here is ensure that the browser has a handle (an identifier) that it can use as a handle for talking to the user about what is going on.  That identifier can be used by both sites so that all parties have a basis for building a shared understanding:\r\n\r\n* The browser can say that X is provided by the IdP and given to the RP.\r\n* The IdP can use X when talking about the set of information that is being exchanged with the RP.\r\n* The RP can use X when talking about what it has obtained from the IdP.\r\n\r\nThe information we're talking about here could be traits or authorization information.  The browser doesn't need to care.  But it's not an opaque token, it's something that is both user-visible and a key part of all subsequent interactions.  (Adding a name and picture is potentially helpful in making the handle more manageable and accessible, but secondary.)\r\n\r\nOf more serious import is whether we can do anything to ensure that the identifier can be meaningful to users.  I'm not sure that we have a solid defense here.  What stops an IdP from minting identifiers that appear to reveal nothing (over21@example.com for instance), but then using the API to covertly exchange far more than that?",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "This comment provides specific information about how identity and authorization are handled in a web application, which is the primary focus of a use case. It outlines the user's experience with tokens, such as their handle or identifier, being used to facilitate interactions between different systems. The comment identifies key aspects of the system's behavior, including its role in arbitrating at the level of granularity and how it handles sensitive information like age. This provides valuable insights into the technical implementation of a web application that handles identity and authorization."
  },
  {
    "id": 1401301689,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-24T01:58:15Z",
    "updated_at": "2023-01-24T02:04:42Z",
    "body": "@bvandersloot-mozilla just wanted to write down here what I hopefully relaid in person at the FedID CG call.\r\n\r\nFirst and foremost, I wanted to say that we all got this proposal with a good amount of excitement: it was great to see Firefox being creative about variations here and propose ways in which we could help the ecosystem!\r\n\r\nSecond, I wanted to give some validation about the problem statement: `preserve federated login scenarios without adding IDP APIs`. Decreasing operational and deployment costs for IdPs is a really important problem that we would all agree is unsatisfying about FedCM at the moment.\r\n\r\nThird, I'm sure this was intended by you, but something to be said explicitly is that FedCM lacks an \"extensibility\" story: ways in which IdPs can innovate without asking for permission. That, in addition to decreasing costs, is an area that we haven't investigated enough, and are interested in seeing proposals!\r\n\r\nFourth, I loved the way you went about it: you isolated your proposal into something self-contained and easy to review, but made it clear that it probably should live as an extension of something else rather than something on its own. I think that's a great way to make forward progress.\r\n\r\nFifth, I wanted to say that, while it is great to see exploration, we are / were struggling to understand the proposal (specially because it seems that @martinthomson and you are talking about different things when we first read).\r\n\r\nSo, here are some (clarifying-and-genuinely-non-judgemental) questions that I asked you today, along with what I think we heard from you:\r\n\r\n1. Is the permission here per IdP or per Rp/IdP pair? Ben: the latter, per Rp/IdP pair.\r\n2. What does the permission entitle? Third party cookies? Ben: nope, IdP gets loaded as a top-level frame, first party context.\r\n3. At what point does the IdP learn about the Rp? Ben: after the permission is accepted, the browser loads the IdP in a top-level frame with the information about the requestor, the Rp.\r\n\r\nAnd three questions that I think I don't think I got a clear answer from you:\r\n\r\n1. Isn't this already possible with link decoration, `postMessage()` and `window.open()` without any browser permissions? Why would an IdP choose to use this (more constrained and less performant) API if it can already do this? Ben: Good question, let me get back to you on this.\r\n2. You made a few references to the `Login Status API` but this feels similar to the `Storage Access API` when it comes to linking identities with a permission prompt. What's the relationship between this and SAA?\r\n3. Does this API unlock something special later? For example, can the IdP do front-channel logout?\r\n\r\nWhen we started FedCM ([TPAC2020](https://github.com/fedidcg/FedCM/blob/main/meetings/2020/The%20Web%20Platform%2C%20Privacy%20and%20Federation%20-%20TPAC.pdf)) we looked at three different variations. We called them: the Permissions-oriented variation, the Mediation-oriented (what we ended up with) variation and the Delegation-oriented (Personas-like) variation.\r\n\r\nWe were very deliberate about starting with mediation, but we always thought of the permission variation as complementary and co-existing, rather than in opposition of: mediation is always going to be behind, paving the cowpath,  but we need an API that allows IdP to innovate without asking for (the browsers) permission.\r\n\r\nI think this proposal has a lot of similarities to the Permissions-oriented variation: a permission prompt that allows IdPs to control the rest of the flow. Here is a mock that we used early on [1].\r\n\r\nDoes [1] seem right? Is this more or less what you had in mind from a UX / permission perspective (modulo strings, obviously), but also from a browser affordance perspective (i.e. a pop-up window, with an origin attribution, but otherwise capable of loading the expressivity power of HTML/JS/CSS).\r\n\r\nIf this is more or less what you had in mind, I think you'd find a lot of synergy here from us.\r\n\r\n[1]\r\n\r\n![Untitled](https://user-images.githubusercontent.com/693738/214195535-4def5f5c-6291-495c-a974-f258aaf415f3.gif)\r\n",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "philosophical",
    "reason": "The comment is philosophical because it discusses the nature of FedCM, its ecosystem, and the relationship between IdPs (Identity Providers), browsers, and permission prompts. It also explores the concepts of extensibility, innovation, and user experience. While the comment expresses an opinion about the proposal's design and features, it does so in a thoughtful and reflective manner that suggests a deeper consideration of the philosophical implications rather than simply providing technical feedback or administrative guidance."
  },
  {
    "id": 1408677883,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-30T14:01:31Z",
    "updated_at": "2023-01-30T14:01:31Z",
    "body": "As I already expressed in the meeting, I agree with @martinthomson's point here:\r\n\r\n> My core point was that browsers shouldn't be in the business of arbitrating at that level of granularity. The shape of the API is such that RP and IdP join identity; that's the real effect of any token exchange, no matter what limitations might be claimed.\r\n\r\nThinking about any kind of other semantic than sharing identity (even with the restrictions Martin describes) seems to be an interesting challenge, but from my understanding of this thread and https://github.com/fedidcg/proposals/issues/3#issuecomment-1400583540 it doesn't seem to be the primary goal/pain point that this proposal is solving. As such, I would suggest that it poses a major distraction and that we should separate out the two ideas :)\r\n\r\nAs mentioned before, I'm otherwise very interested in this proposal and the potential for building a more flexible FedCM(-like) flow for developers, as long as we manage to keep the user experience relevant and contextual.",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "The comment discusses the feasibility of addressing a specific issue (arbitration at fine granularity) in a broader proposal, but emphasizes that it may not be the primary goal or concern. It also expresses interest in the potential for building a more flexible FedCM flow while maintaining user relevance and context. This suggests that the main purpose of the comment is to provide an alternative perspective on how to address the issue, rather than being a technical feedback point."
  },
  {
    "id": 1433176263,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-02-16T14:30:31Z",
    "updated_at": "2023-02-16T14:30:31Z",
    "body": "I think this benefits from being split into several interrelated PRs on FedCM, as suggested by commenters. I've split the core points into [fedidcg/FedCM#441](https://github.com/fedidcg/FedCM/issues/441), [fedidcg/FedCM#442](https://github.com/fedidcg/FedCM/issues/442), [fedidcg/FedCM#443](https://github.com/fedidcg/FedCM/issues/443), and a comment on [fedidcg/FedCM#429](https://github.com/fedidcg/FedCM/issues/429) that led to PR [fedidcg/FedCM#439](https://github.com/fedidcg/FedCM/pull/439). \r\n\r\nGiven those discussions/proposals on FedCM, I will close this as completed.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment provides a justification for splitting several related PRs into separate requests, suggesting that the codebase benefits from being organized in multiple parts with interrelated features. This indicates that the feature request is to improve organization and structure of the code, rather than addressing technical issues or proposing a new feature directly."
  },
  {
    "id": 1452165323,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-02T16:32:05Z",
    "updated_at": "2023-03-02T16:32:05Z",
    "body": "Hello!\r\nIt is not clear to me what the difference is between `n.c.allowed.get` and `n.c.allowed.invoke`. More specifically, what I would use get for. \r\n\r\nAlso, the sequence diagram for this shows a flow that involves some kind of embedded discovery service (and I assume is limited to an embedded type). That is not clearly reflected in the test. For example, if the SP is in an unconfigured state, a first step could be to initiate discovery before the `put` API is called?",
    "user": "philsmart",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive criticism of a specific part of the code (the difference between two functions) and offers suggestions for improvement, specifically related to testing and debugging. It does not appear to be providing information or analysis about use cases, features, or administrative aspects of the system."
  },
  {
    "id": 1452180271,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-02T16:42:36Z",
    "updated_at": "2023-03-02T16:42:36Z",
    "body": "Allowing for IdP-Initiated SSO. It might be useful to have a similar call to `n.c.allowed.isEmpty` but taking an IdP and SP combination. Just as a way for the IdP to know if it needs to call `put` again i.e. `put` is probably redudant if the IdP and SP already have a relationship in the browser. ",
    "user": "philsmart",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback about how the current implementation of Single Sign-On (SSO) works, suggesting potential improvements or optimizations to make it more efficient and useful."
  },
  {
    "id": 1452340305,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-02T18:25:48Z",
    "updated_at": "2023-03-02T18:25:48Z",
    "body": "Thinking about this after our workshop I suspect we may need some trust component in this case aswell to make the UX work reasonably well. \r\n\r\nAs it stands the IdP and SP are represented essentially by their respective ORIGIN but in order to support human-friendly naming, branding elements and - equally importantly - multiple protocol endpoints per IdP/SP it is probably necessary to authenticate the binding between ORIGIN and any additional data needed to produce good UX. \r\n\r\nThis is exactly what SAML and OIDC metadata does today but trusting the caller to provide this data opens the way for a rogue SP to provide false endpoints thereby tricking a user into a flow that leads to tracking. The solution could be to introduce some form of trust anchor (eg the federation operator) that can authenticate data associated with the SP and IdP. ",
    "user": "leifj",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment suggests a need for an additional component, such as a trust anchor or federation operator, to enhance the user experience in SAML and OIDC-based authentication, specifically addressing issues of authenticity and integrity when interacting with multiple SPs and IdPs."
  },
  {
    "id": 1452358154,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-02T18:37:29Z",
    "updated_at": "2023-03-02T18:37:29Z",
    "body": "it may be possible to support a simple version of the api which only takes ORIGIN (sp and idp) as input without introducing external trust but at the expense of the UX only being able to display the ORIGIN. In the mockups above the name of the University would be replaced by its URL.",
    "user": "leifj",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "This comment is providing a suggestion for improving or modifying the existing API, specifically focusing on whether it can be simplified without compromising user experience. It's asking for feedback and guidance rather than simply providing technical information or making an administrative decision."
  },
  {
    "id": 1454799155,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-04T16:44:10Z",
    "updated_at": "2023-03-04T16:44:10Z",
    "body": "added [judielaine](https://github.com/judielaine)'s flowchart diagram that was also agreed by the participants at the meeting",
    "user": "sunetzacharias",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment is providing technical information about an external contribution (a flowchart diagram) to a project, specifically mentioning its addition and agreement. This can be considered as feedback on the code or software implementation rather than something else."
  },
  {
    "id": 1458242701,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-07T14:11:24Z",
    "updated_at": "2023-03-07T14:11:24Z",
    "body": "Adding steps in authentication process is the opposite of seamless. It's not user-friendly; it's frustrating. There are already so many steps that users have to go through (multiple results in WAYF, IdP's MFA, questions at SP's side, popups asking for rating, updates, etc.). This was meant to be seamless access.\r\n\r\nIf we ask a user to take action then it needs to make sense to them, and in such situation the user is not making an informed choice, they're just feeding the browser so it lets them pass. It's not even a choice. 99,99% of all users will have no clue what's going on, they can't possibly know whether the SP is to be trusted or not or whether their choice was the right one (before they actually authenticate). And if they do make the wrong choice in haste, then what?\r\n\r\nThere's already an existing trust infrastructure that has been established for this purpose and we should utilize that.\r\n\r\nThis could perhaps be a fallback for when the existing trust infrastructure isn't in place, for bilateral connections. It still won't be user friendly but at least it would be needed.",
    "user": "meshna",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment expresses frustration with the current authentication process and suggests an alternative approach that is more seamless and user-friendly. However, the tone is constructive rather than critical or negative, which indicates a feature request rather than an administrative or philosophical concern. Additionally, the commenter mentions potential limitations (e.g., existing trust infrastructure) to make their suggestion more feasible, further supporting the classification as a feature request."
  },
  {
    "id": 1460261742,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-08T14:39:46Z",
    "updated_at": "2023-03-08T14:40:40Z",
    "body": "It would be very helpful if you could add an intro section that talks about both the user journey and problem statement before diving into a proposed solution. For example, \"A university student wants to access a research paper from research.org. Their university is part of a federation that provides access to research.org... blah blah\". Ideally the problem statement would highlight the issues you're facing today and the issues you think you'll be facing tomorrow (3PCD, link decoration, etc).",
    "user": "timcappalli",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment appears to be providing a specific suggestion for improvement or additional functionality, which is characteristic of technical feedback. The proposed solution is also a concrete example that illustrates the problem and its potential impact on users, such as university students who are trying to access research papers from various online platforms."
  },
  {
    "id": 1460329339,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-08T15:25:07Z",
    "updated_at": "2023-03-08T15:28:30Z",
    "body": "> Hello! It is not clear to me what the difference is between `n.c.allowed.get` and `n.c.allowed.invoke`. More specifically, what I would use get for.\r\n\r\n@philsmart The idea here is that `n.c.allowed.get` would return the list of IdP objects associated with the SP, so that a chooser UI element (a la seamlessaccess) can be presented. When an IdP is selected from that chooser, `n.c.allowed.invoke` is called, which presents a browser-generated permission modal (\"do you want to sign-in with XYZ IdP?\") and returns a Promise that resolves to either the selected IdP object (if the user clicks \"allow\"), or an Error (if the user clicks \"deny\").",
    "user": "windhamg",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment proposes adding two related features to simplify the process of managing Single Sign-On (SSO) and authorization, allowing users to choose an Identity Provider (IdP) for a seamless login experience. The proposed solution is an improvement over existing approaches that require users to invoke a permission modal when selecting an IdP, making it clear what was intended by `n.c.allowed.get`."
  },
  {
    "id": 1460707764,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-08T19:02:07Z",
    "updated_at": "2023-03-08T19:02:07Z",
    "body": "[user-flows-saml-meshna.pdf](https://github.com/fedidcg/proposals/files/10924133/user-flows-saml-meshna.pdf)\r\n\r\nAttaching a quickly put together user flow with some descriptions; if a different format is needed and/or I could upload it somewhere for easy collaboration, please let me know where.",
    "user": "meshna",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "The comment appears to be requesting the user to provide a more collaborative or adaptable tool for sharing SAML flows, suggesting that the current tool (the PDF attachment) may not meet their needs. This is a request for an enhancement or upgrade to accommodate different usage scenarios, rather than feedback on technical details, administrative tasks, philosophical debates, or something unrelated to use cases in software development."
  },
  {
    "id": 1467130866,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-13T23:50:29Z",
    "updated_at": "2023-03-13T23:50:29Z",
    "body": "> [user-flows-saml-meshna.pdf](https://github.com/fedidcg/proposals/files/10924133/user-flows-saml-meshna.pdf)\r\n> \r\n> Attaching a quickly put together user flow with some descriptions; if a different format is needed and/or I could upload it somewhere for easy collaboration, please let me know where.\r\n\r\nFor clarity: This describes an old flow of how a implementor of the SeamlessAccess discovery and persistence service has its set up. It is not related to the context of the proposal #4.",
    "user": "sunetzacharias",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on a previously shared document (the SAML meshna PDF) with suggestions for improvement, indicating that it is intended to inform or assist in improving something, likely the SeamlessAccess discovery and persistence service."
  },
  {
    "id": 1467718527,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-14T09:25:23Z",
    "updated_at": "2023-03-14T09:25:23Z",
    "body": "> > [user-flows-saml-meshna.pdf](https://github.com/fedidcg/proposals/files/10924133/user-flows-saml-meshna.pdf)\r\n> > Attaching a quickly put together user flow with some descriptions; if a different format is needed and/or I could upload it somewhere for easy collaboration, please let me know where.\r\n> \r\n> For clarity: This describes an old flow of how a implementor of the SeamlessAccess discovery and persistence service has its set up. It is not related to the context of the proposal #4.\r\n\r\nYes, this was a response to timcappalli's comment above.",
    "user": "meshna",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides specific technical information about user flow diagrams used in SAML (Security Assertion Markup Language) implementation. It is intended for improvement and clarification purposes, as it does not relate to the context of the proposal #4 or contain suggestions for new ideas or discussions."
  },
  {
    "id": 1475362020,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-19T18:57:55Z",
    "updated_at": "2023-03-19T18:57:55Z",
    "body": "Updated the proposal today with information about the \"Threat model\".\r\nLast monday updated the text with various information and updated diagrams. Interested parties should read through the entire text as a lot has been attempted to be clarified.",
    "user": "sunetzacharias",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides technical updates, such as adding new information, diagrams, or clarifying existing details, which suggests that it is providing constructive criticism and suggesting improvements for the proposal."
  },
  {
    "id": 1476304600,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T14:09:46Z",
    "updated_at": "2023-03-20T14:09:46Z",
    "body": "Here are a few issues with the current FedCM and solutions this model offers. \r\n\r\n### Many IdPs may be hosted by a cloud provider at an Origin\r\n\r\nAzure and Cirrus are examples. Current model cannot distinguish between all the different IdPs at the origin. \r\n\r\nThis proposal provides a method by which more sophisticated integrations can supply the full URLs for the endpoints currently at .well-known . Note that while an identifier could be provided for the origin .well-known, the scale of some of the cloud provides may make loading that file prohibitively slow.\r\n\r\n### Many SPs may be hosted by a cloud provider \r\n\r\nOffice 365 and Liblynx (a platform for journals) are examples. Current model cannot provide the IdP sufficient information to distinguish between options. \r\n\r\nThis proposal provides a method by which more sophisticated integrations can supply the full URLs for the endpoints IdPs pre-provision as acceptable locations to return Authentication responses.\r\n\r\n### Roadmap for more trust\r\n\r\nAssuming that browsers will allow protocol exchanges to continue, the provisioning of all the metadata allows a browser to restrict front channel cross domain authentication exchanges to the same pre-specified endpoints that the protocols use. Admittedly, this will require additional user interactions when protocol endpoints change.\r\n\r\nThe endpoints provided by the SP for the IdP and or the SP itself can also be signed by a trust credentialing partner, allowing browsers to signal to endusers that the endpoints are certified by an trusted party. \r\n",
    "user": "judielaine",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "This comment is expressing concerns about the current implementation of FedCM (Federal Identity and Access Management Consortium) and suggesting improvements to make it more robust and scalable. The commenter is specifically proposing changes related to how IdPs (Identity Providers) and SPs (Service Providers) can be identified, and how these identifiers are used for authentication exchanges. This comment implies that the current solution does not meet the expected level of sophistication or trustworthiness in handling complex integration scenarios involving multiple cloud providers and different service providers."
  },
  {
    "id": 1476421125,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:15:53Z",
    "updated_at": "2023-03-20T15:16:36Z",
    "body": "> Azure and Cirrus are examples. Current model cannot distinguish between all the different IdPs at the origin.\r\n\r\nCan you give us real world examples? Can you copy/paste an Azure / Cirrus URL that represents a real world IdP? And can't some of this be solved with DNS CNAMES?",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "This comment is requesting improvements to the current model, specifically suggesting ways to distinguish between different Identity Providers (IdPs) at the origin. It's asking for new features or enhancements that would make it easier to identify and separate these IdPs, which can be achieved through better DNS-based methods such as CNAME records."
  },
  {
    "id": 1476427806,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:19:32Z",
    "updated_at": "2023-03-20T15:20:26Z",
    "body": "> Here are a few issues with the current FedCM and solutions this model offers.\r\n\r\nFrom what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\r\n\r\nIs it fair to articulate this as one of the problems we face?",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The commenter identifies a specific issue with the current FedCM design, which is that the Multi-IdP API may struggle to handle high volumes of IDs (in this case, 1K), leading to potential scalability issues. This criticism provides technical feedback on the feasibility and performance of the FedCM model, which can be used to inform further development or improvement."
  },
  {
    "id": 1476431433,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:21:38Z",
    "updated_at": "2023-03-20T15:24:03Z",
    "body": "> Here are a few issues with the current FedCM and solutions this model offers.\r\n\r\nThe other issue that I heard from Gary was along the lines of \"IdP sessions are typically short-lived (say, a few hours, e.g. at the University Of Arizona it was around 8 hours)\", which is an assumption that we don't take into consideration in the current design.",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on the existing FedCM model by addressing a specific issue (short-lived IdP sessions) and offers a different perspective, indicating that it is intended to improve or correct the model."
  },
  {
    "id": 1476435045,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:23:41Z",
    "updated_at": "2023-03-20T15:23:41Z",
    "body": "FedCM calls all IdPs to find accounts. Typical federation flow would be just to choose the IdP without making any calls to find account/session.",
    "user": "philsmart",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides specific technical details about how a function or process works, addressing a potential issue or limitation in its operation. It does not express an opinion, request something, provide a conclusion or resolution, present a philosophical point of view, or offer information that is not meant to be conveyed directly to the reader."
  },
  {
    "id": 1476455783,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:33:07Z",
    "updated_at": "2023-03-20T15:34:18Z",
    "body": "> > Here are a few issues with the current FedCM and solutions this model offers.\r\n> \r\n> From what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\r\n> \r\n> Is it fair to articulate this as one of the problems we face?\r\n\r\nMost website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.",
    "user": "wanpengli",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment is asking for an improvement or a solution to a specific problem with the current FedCM design, specifically that it cannot handle a large number of IdP options (e.g., 9 different IdPs in this case). It does not seem to be providing technical feedback, administrative information, or concluding on a philosophical aspect."
  },
  {
    "id": 1476479457,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:44:59Z",
    "updated_at": "2023-03-20T15:44:59Z",
    "body": "Another note I got from the demo you walked us through:\r\n\r\n> The SAML tracer breaks when we use FedCM, because the extension doesn't have visibility over the browser mediated UI.",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment is requesting a change to how the SAML tracer works in relation to using FedCM (Federal Component Management) for security and identity verification purposes. It specifically mentions that the current configuration breaks when used with this technology, indicating a need for an adjustment in the implementation of the SAML tracer."
  },
  {
    "id": 1477098438,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T23:53:40Z",
    "updated_at": "2023-03-20T23:53:40Z",
    "body": "> > Azure and Cirrus are examples. Current model cannot distinguish between all the different IdPs at the origin.\r\n> \r\n> Can you give us real world examples? Can you copy/paste an Azure / Cirrus URL that represents a real world IdP? And can't some of this be solved with DNS CNAMES?\r\n\r\nHere are some examples:\r\n\r\n1. Multiple institutions have registered their Google IdPs in various national federations' metadata that are part of the eduGAIN aggregate metadata:\r\n    - **Institut des Arts de Diffusion (BELNET Federation)**:\r\n       ```\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02lghgox\"/>\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02lghgox\"/>\r\n       ```\r\n    - **Luxembourg School of Business (eduID Luxembourg)**:\r\n       ```\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02ws9ruj\"/>\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02ws9ruj\"/>\r\n       ```\r\n    -  **University of Technology and Applied Sciences (OMREN)**\r\n        ```\r\n        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02afc2g7\"/>\r\n        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02afc2g7\"/>\r\n        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02afc2g7\"/>\r\n        ```\r\n2. University of Northern Colorado has 2 separate Azure AD tenants (one for staff, the other for students) behind a Cirrus Proxy:\r\n    - **Azure AD tenant 1**:\r\n       ```\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://login.microsoftonline.com/b4dce27c-d088-4454-9965-2b59a23ea171/saml2\"/>\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://login.microsoftonline.com/b4dce27c-d088-4454-9965-2b59a23ea171/saml2\"/>\r\n        ```\r\n    - **Azure AD tenant 2**:\r\n       ```\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://login.microsoftonline.com/48e07fd6-ad72-497f-b298-b5c57de6db2d/saml2\"/>\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://login.microsoftonline.com/48e07fd6-ad72-497f-b298-b5c57de6db2d/saml2\"/>\r\n       ```\r\n3. The Danish federation has all of their member IdPs (72 listed in the eduGAIN metadata aggregate) behind a single domain; so all of their SSO endpoints start with https://birk.wayf.dk/. \r\n\r\n\r\n",
    "user": "windhamg",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "This comment appears to be providing examples and explanations for how different institutions can handle multiple IdPs (Identity Provider) in Azure Active Directory. It also mentions that some solutions, such as DNS CNAMES, may not be sufficient to solve the problem. Additionally, it discusses real-world examples of implementing SSO across different institutions."
  },
  {
    "id": 1479849732,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-22T16:03:47Z",
    "updated_at": "2023-03-22T16:03:47Z",
    "body": "> > > Here are a few issues with the current FedCM and solutions this model offers.\r\n> > \r\n> > \r\n> > From what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\r\n> > Is it fair to articulate this as one of the problems we face?\r\n> \r\n> Most website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.\r\n\r\nCILogon is a RP that brokers access from the eduGAIN federation to a large number of scientific resources. It supports more than 4000 IdP. See https://cilogon.org/\r\n\r\nThat is only one example. Many RPs in the higher education and research space federate with thousands of IdPs. It's how the community facilitates scholarly and research collaboration.\r\n\r\n",
    "user": "skoranda",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides specific feedback about a technical issue or problem with the current FedCM design, highlighting an area for improvement regarding scalability and support for multiple Identity Provider (IdP) options. It is aimed at addressing the potential limitations of the Multi-IdP API in handling large numbers of IdPs, making it a technical issue that requires a solution."
  },
  {
    "id": 1479869761,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-22T16:16:13Z",
    "updated_at": "2023-03-22T16:16:13Z",
    "body": "Correct.\n\nElsevier SP federates with 3200+ IdPs and that's not the only publisher doing that; this is a normal use case.\n\nKind regards,\nMeshna\n\n\n\nFrom: Scott Koranda ***@***.***>\nSent: Wednesday, March 22, 2023 17:04\nTo: fedidcg/proposals ***@***.***>\nCc: Koren, Meshna (ELS-AMS) ***@***.***>; Comment ***@***.***>\nSubject: Re: [fedidcg/proposals] idp-sp-storage API (Issue #4)\n\n\n*** External email: use caution ***\n\n\n\nHere are a few issues with the current FedCM and solutions this model offers.\n\nFrom what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\nIs it fair to articulate this as one of the problems we face?\n\nMost website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.\n\nCILogon is a RP that brokers access from the eduGAIN federation to a large number of scientific resources. It supports more than 4000 IdP. See https://cilogon.org/<https://nam11.safelinks.protection.outlook.com/?url=https%3A%2F%2Fcilogon.org%2F&data=05%7C01%7Cm.koren%40elsevier.com%7Cf2b1b3ed5f81435628dd08db2aef0bf5%7C9274ee3f94254109a27f9fb15c10675d%7C0%7C0%7C638150978418604233%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=XcOIWOQdq05LitgIJXm3VeNGVboaYnIKJhSBeyar2gU%3D&reserved=0>\n\nThat is only one example. Many RPs in the higher education and research space federate with thousands of IdPs. It's how the community facilitates scholarly and research collaboration.\n\n-\nReply to this email directly, view it on GitHub<https://nam11.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Ffedidcg%2Fproposals%2Fissues%2F4%23issuecomment-1479849732&data=05%7C01%7Cm.koren%40elsevier.com%7Cf2b1b3ed5f81435628dd08db2aef0bf5%7C9274ee3f94254109a27f9fb15c10675d%7C0%7C0%7C638150978418604233%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=ktO3z7Gljws1nvlYsgxVpbGXPCxHsiAJ3e7fjAhmlOU%3D&reserved=0>, or unsubscribe<https://nam11.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAFOCGTRCFP4V5M6TVW5KHP3W5MPG5ANCNFSM6AAAAAAVMVWX3Q&data=05%7C01%7Cm.koren%40elsevier.com%7Cf2b1b3ed5f81435628dd08db2aef0bf5%7C9274ee3f94254109a27f9fb15c10675d%7C0%7C0%7C638150978418604233%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=cuG9LkZGecBT5U50TUH6RtCBbDsjBeOfKQ2DVJjbZcQ%3D&reserved=0>.\nYou are receiving this because you commented.Message ID: ***@***.******@***.***>>\n\n________________________________\n\nElsevier B.V. Registered Office: Radarweg 29, 1043 NX Amsterdam, The Netherlands, Registration No. 33158992, Registered in The Netherlands.\n",
    "user": "meshna",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides technical details and issues with the current FedCM design that the sender Meshna is aware of or has studied, suggesting it's a piece of technical feedback rather than an administrative, use case, philosophical, or conclusion/resolution comment."
  },
  {
    "id": 1480855664,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/5",
    "created_at": "2023-03-23T09:25:50Z",
    "updated_at": "2023-03-23T09:25:50Z",
    "body": "proposal has been updated with more elaborate explanations of the flows and background",
    "user": "sunetzacharias",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on a technical topic, specifically highlighting improvements or clarifications made to an existing solution. The language used suggests that it is aimed at improving the documentation or implementation of the proposal, which implies a focus on technical details and accuracy."
  },
  {
    "id": 1481439229,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-23T15:50:52Z",
    "updated_at": "2023-03-23T15:53:06Z",
    "body": "> Most website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs. \r\n\r\nI'm going through a list of publishers. In the past 40 minutes i identified the following sites with more than ten IdPs.  Adding -- one normally needs to search for their institution, you may not be able to determine the precise number of IdPs but can explore search terms to determine \"more than ten\".\r\n\r\nhttps://5minuteconsult.com see https://5minuteconsult.com/SignInShibboleth.aspx, pick from five federations\r\nhttps://akjournals.com/ see https://akjournals.com/login\r\nhttps://acpjournals.org see https://www.acpjournals.org/action/ssostart?redirectUri=%2F\r\nhttps://alexanderstreet.com/ see https://search.alexanderstreet.com/wayf?destination=\r\nhttps://anatomy.tv see https://www.anatomy.tv/login?lastpageurl=titles\r\n\r\nhttps://academic.oup.com/ see  https://oup2-ds.sams-sigma.com/?entityID=https%3A%2F%2Foup-sp.sams-sigma.com%2Fshibboleth&return=https%3A%2F%2Foup-sp.sams-sigma.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Afd4b4a0c1b2d0e230c53001b312510d6d644de32ff591de54a561602d1bd794d\r\nhttps://access.torrossa.com see https://access.torrossa.com/shibboleth-ds/index.html?entityID=https%3A%2F%2Fwww.torrossa.com%2Fshibboleth&return=https%3A%2F%2Faccess.torrossa.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Aa28767884b281870eba40e75d8f1fde661614e20f8e49c16823d93259d5e078b\r\nhttps://acta.chadwyck.co.uk see https://www.proquest.com/legacyredirect/actasanctorum\r\nhttps://advantage.marketline.com see https://advantage.marketline.com/HomePage/Index?returnUrl=Home\r\nhttps://advisor.lww.com  see https://wayfinder.openathens.net/?return=https%3A%2F%2Fconnect.openathens.net%2Fsaml%2F2%2Fauth%3Fr%3Dhttps%253A%252F%252Fconnect.openathens.net%252Foidc%252Fauth%253Fresponse_type%253Dcode%2526client_id%253Dwolterskluwer.com.oidc-app-v1.0c519265-f12d-4407-915b-7c35a86d9c18%2526scope%253Dopenid%2526redirect_uri%253Dhttps%25253A%25252F%25252Flns-sso.lww.com%25252Fopenid_connect_login%2526nonce%253D357e3387b0746%2526state%253Dafaa38974fba%2526pfidpadapterid%253DLippincottAdapter%26d%3Dwolterskluwer.com%26c%3D092c9afe-6fb4-4d4e-bf47-dadfa3d358f7%26as%3Dpublished%26aid%3D0c519265-f12d-4407-915b-7c35a86d9c18&oaDomain=wolterskluwer.com&oaAppId=0c519265-f12d-4407-915b-7c35a86d9c18&entityID=https%3A%2F%2Fadvisor.lww.com%2Foa%2Fmetadata\r\n\r\n\r\n",
    "user": "judielaine",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "The comment is primarily related to administrative matters, specifically mentioning the number of IdPs (Identity Providers) supported by a website and providing information on how to identify them. There are no indications of technical issues or use cases that would classify this as Technical Feedback, Feature Request, or Philosophical discussion. Additionally, while it mentions OAuth and OpenID Connect RPs, there is no indication that the comment is seeking feedback on these specific technologies or asking for a philosophical discussion about their implementation."
  },
  {
    "id": 1481509881,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-23T16:30:44Z",
    "updated_at": "2023-03-23T16:32:13Z",
    "body": "> > Most website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.\r\n> \r\n> I'm going through a list of publishers. In the past 40 minutes i identified the following sites with more than ten IdPs. Adding -- one normally needs to search for their institution, you may not be able to determine the precise number of IdPs but can explore search terms to determine \"more than ten\".\r\n> \r\n> https://5minuteconsult.com see https://5minuteconsult.com/SignInShibboleth.aspx, pick from five federations https://akjournals.com/ see https://akjournals.com/login https://acpjournals.org see https://www.acpjournals.org/action/ssostart?redirectUri=%2F https://alexanderstreet.com/ see https://search.alexanderstreet.com/wayf?destination= https://anatomy.tv see https://www.anatomy.tv/login?lastpageurl=titles\r\n> \r\n> https://academic.oup.com/ see https://oup2-ds.sams-sigma.com/?entityID=https%3A%2F%2Foup-sp.sams-sigma.com%2Fshibboleth&return=https%3A%2F%2Foup-sp.sams-sigma.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Afd4b4a0c1b2d0e230c53001b312510d6d644de32ff591de54a561602d1bd794d https://access.torrossa.com see https://access.torrossa.com/shibboleth-ds/index.html?entityID=https%3A%2F%2Fwww.torrossa.com%2Fshibboleth&return=https%3A%2F%2Faccess.torrossa.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Aa28767884b281870eba40e75d8f1fde661614e20f8e49c16823d93259d5e078b https://acta.chadwyck.co.uk see https://www.proquest.com/legacyredirect/actasanctorum https://advantage.marketline.com see https://advantage.marketline.com/HomePage/Index?returnUrl=Home https://advisor.lww.com see https://wayfinder.openathens.net/?return=https%3A%2F%2Fconnect.openathens.net%2Fsaml%2F2%2Fauth%3Fr%3Dhttps%253A%252F%252Fconnect.openathens.net%252Foidc%252Fauth%253Fresponse_type%253Dcode%2526client_id%253Dwolterskluwer.com.oidc-app-v1.0c519265-f12d-4407-915b-7c35a86d9c18%2526scope%253Dopenid%2526redirect_uri%253Dhttps%25253A%25252F%25252Flns-sso.lww.com%25252Fopenid_connect_login%2526nonce%253D357e3387b0746%2526state%253Dafaa38974fba%2526pfidpadapterid%253DLippincottAdapter%26d%3Dwolterskluwer.com%26c%3D092c9afe-6fb4-4d4e-bf47-dadfa3d358f7%26as%3Dpublished%26aid%3D0c519265-f12d-4407-915b-7c35a86d9c18&oaDomain=wolterskluwer.com&oaAppId=0c519265-f12d-4407-915b-7c35a86d9c18&entityID=https%3A%2F%2Fadvisor.lww.com%2Foa%2Fmetadata\r\n\r\nThe currently FeDCM API is allowing the RP developer to identify the IdP manually. This works fine with OAuth and OpenIDConnect. SAML needs some special IdP discovery process( see here https://techdocs.broadcom.com/us/en/symantec-security-software/identity-security/siteminder/12-8/configuring/partnership-federation/saml-2-0-only-configurable-features/idp-discovery-profile-saml-2-0.html). If FeDCM need to be compatible with SAML. The IdP discovery procedure of SAML needs to be considered.",
    "user": "wanpengli",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "philosophical",
    "reason": "The comment discusses the limitations and challenges in using various Identity Provider (IdP) discovery mechanisms, particularly for Single Sign-On (SSO) and Single Logout (SLO) protocols like Shibboleth. It highlights the importance of considering these complexities when designing an SAML-based system that requires compatibility with FeDCM's IdP discovery process. The comment does not provide technical feedback or ask a specific question; instead, it explores a philosophical aspect of identity management and interoperability in the context of SAML and OAuth/OpenID Connect."
  },
  {
    "id": 1482718118,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-24T12:24:30Z",
    "updated_at": "2023-03-24T12:24:30Z",
    "body": "@wanpengli  Yes! This proposal is in alignment with SAML discovery profiles.The actual specification for SAML Discovery is http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-idp-discovery.html However, with recent user experience and privacy research in the RA21 project -- https://ra21.org/ -- spun off the Seamless Access project -- https://seamlessaccess.org/ . Participants from Seamless Access helped draft this specification.",
    "user": "judielaine",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides a detailed explanation of the compatibility and alignment of the provided proposal with SAML discovery profiles, citing an external document as evidence. It offers constructive feedback on how well the proposal aligns with existing specifications, indicating that it is intended to be a technical assessment or critique rather than an evaluation for resolution purposes."
  },
  {
    "id": 1502421086,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/5",
    "created_at": "2023-04-10T22:33:17Z",
    "updated_at": "2023-04-10T22:33:17Z",
    "body": "Here is this proposal, converted to markdown: https://github.com/fedidcg/proposals/blob/Offloading-Trust-Issue-5/offloading-trust.md",
    "user": "nckroy",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "philosophical",
    "reason": "This comment seems to be more of a philosophical discussion about the nature of trust and how it should be offloaded in the context of a microservices architecture. It does not provide any concrete feedback, requests, or information that can be used to make technical decisions. Instead, it appears to be an exploratory question that invites further thought and discussion among contributors."
  },
  {
    "id": 1502435361,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-04-10T22:52:09Z",
    "updated_at": "2023-04-10T22:52:09Z",
    "body": "This is now markdown at: https://github.com/fedidcg/proposals/blob/idp-sp-storage-API-Issue-4/idp-sp-storage-api.md",
    "user": "nckroy",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment appears to provide feedback on the technical aspects of a proposal or specification document, likely in response to its content. It may also be related to an API design or implementation, as it mentions \"proposals\" and \"API\", indicating that it is addressing issues with an existing API."
  },
  {
    "id": 1601661856,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2023-06-21T20:54:50Z",
    "updated_at": "2023-06-21T20:54:50Z",
    "body": "@dickhardt I think I need to revive this as we continue to try and make things work with the planned cookie changes and ... in some cases it is simply not possible without drastic changes needed by us and our customers. If the iframe needs to be authenticated on page load, in order to for example set the CSP frame-ancestors headers to prevent click-jack attacks, then all of the other proposals are not valid. The only way to support setting the frame-ancestors is if the auth header is passed in on the frame load. ",
    "user": "LGraber",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback about a technical aspect (iframe authentication) and proposes changes that may require significant updates, indicating it is an issue that requires technical expertise to resolve."
  },
  {
    "id": 1856604755,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2023-12-14T21:13:09Z",
    "updated_at": "2023-12-14T21:13:09Z",
    "body": "@hpsin you still around and have time to chat? I dropped this as I got caught up in a lot of other things but this is bubbling back up and I think I am going to try and restart this discussion. The link you included is now dead so I cant refresh on that. I feel like the current browser support make clickjack prevention really hard and while we have some workarounds, this is another tool that could make the flows easier for certain implementations. Would love to hear what you think",
    "user": "LGraber",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides specific feedback on a technical issue (browser compatibility) and suggests an alternative solution (restart discussion). It does not provide any information about use cases, features, or administrative aspects of the project, nor does it explicitly mention its philosophical implications. Instead, it focuses on providing constructive criticism to improve the situation."
  },
  {
    "id": 1987797165,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/5",
    "created_at": "2023-08-23T10:35:25Z",
    "updated_at": "2023-08-23T10:35:25Z",
    "body": "The way I see it (and reflecting some internal team conversations with @mmocny and @tdresser), bad responsiveness can be caused by:\r\n1. long event processing. event timing already captures this. Scripts that correlate between the entries can help here as well to give you more attribution that LoAF provides. \r\n2. compositor congestion, which delays both input and paint. LoAF doesn't help there.\r\n3. General main-thread congestion. This is where LoAF is useful regardless of INP/event-timing: if your main thread is running a lot of things in a blocking way, it has a high chance to fall on one event or another, and capturing exactly which event fell on which LoAF is perhaps a bit of a red herring.\r\n\r\nSo for someone that's debugging INP, it would be best to start by understanding which kind of problem they have out of the (3), and see if correlating the exact event-timing entry with LoAF is what would help them with that.\r\n\r\n\r\n\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific technical insights and suggestions for debugging, making it a technical feedback comment aimed at improving the internal team's understanding of how to address issues in the Integrated Notation Protocol (INP). The comments mention particular features like event processing and main-thread congestion, which are relevant to INP development."
  },
  {
    "id": 1987796788,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/4",
    "created_at": "2023-09-20T07:36:55Z",
    "updated_at": "2023-09-20T07:36:55Z",
    "body": "+1\r\n\r\nIt would be great to avoid the need to use rAF polling for measuring smoothness. Evaluating smoothness with the 50ms threshold is possible but provide a less accurate signal than what we would like.\r\n\r\nEasy crossing with Event Timing entries is another interesting scenario.",
    "user": "nhelfman",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific suggestions and ideas, such as avoiding rAF polling for measuring smoothness and evaluating smoothness using the 50ms threshold. These are technical details or recommendations that suggest improvements to a system or process, which falls under the category of Technical Feedback."
  },
  {
    "id": 1987796055,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-10-03T17:41:30Z",
    "updated_at": "2023-10-03T17:41:30Z",
    "body": "Thanks for posting the issue!\r\nNote that scripts have a `sourceLocation` property, which includes the function name. Their syntax is `function@scriptSourceURL:characterIndex`.\r\n\r\nSo the way to do what you specifically asked for is:\r\n```js\r\nnew ResizeObserverEntry(function SourceOfCode([entry]: ResizeObserverEntry[]) {\r\n  // ...\r\n}).obeserve(target.current);\r\n```\r\nAnd this would appear in the entry's `sourceLocation` as `SourceOfCode@myScriptURL.com:123` or some such.\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific guidance on how to use a particular function (ResizeObserverEntry) correctly, which is an important detail for someone trying to understand and implement the code."
  },
  {
    "id": 1987796060,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-10-03T18:45:05Z",
    "updated_at": "2023-10-03T18:45:05Z",
    "body": "This makes sense. I can make this work. For my specific case I think I would want something like\r\n```ts\r\nconst cb = ([entry]: ResizeObserverEntry[]) => {\r\n  // ...\r\n}\r\nObject.defineProperty(cb, 'name', { value: 'SourceOfCode' });\r\nnew ResizeObserver(cb).obeserve(target.current);\r\n```",
    "user": "jarmit",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment is providing a specific example of how to implement a ResizeObserver in TypeScript, which falls under the category of describing a use case. It's explaining how to create and utilize an instance of ResizeObserver with a specific function (cb) and using it to observe changes to elements on the DOM."
  },
  {
    "id": 1987796065,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-10-18T15:43:24Z",
    "updated_at": "2023-10-18T15:43:24Z",
    "body": "Reopening, there are use cases where this can really be useful. CC @mmocny ",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is asking for the reopening of an issue or feature that has been previously discussed and is still open. This suggests a request to revisit and potentially fix or implement a previously proposed change."
  },
  {
    "id": 1987796069,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-10-18T20:53:43Z",
    "updated_at": "2023-10-18T20:53:43Z",
    "body": "Reading the original request, I see reference to:\r\n\r\n> function is a common function that is used multiple times within the code base\r\n\r\nBut later I only see reference to just making sure a nice name value is exposed.  Is it actually important to somehow differentiate the \"context\" from which a particular callback is invoked?  I'm not sure how often that would come up...\r\n\r\n---\r\n\r\nSecond, if you really want to control labelling, and do this in a way where the developer is explicitly provide a hint-- I wonder if just regular User Timings aren't both sufficient and more flexible?\r\n\r\nJust `performance.measure()` the time spent in specific sections of code (function boundary or whatever you want) and then use LoAF script attribution timestamps to intersect time ranges of your user timings.\r\n\r\nThat way, you can measure all the time ranges for that code, but also filter to cases where it contributed to an overall long-running script within a LoAF.\r\n\r\n---\r\n\r\nThat said, I think it may be valuable if LoAF could do more attribution splitting automatically, on finer boundaries beyond just \"tasks\".  For example, in cases where multiple continuations are registered on a shared promise.  Or where a script calls back into previously registered handlers, but in ways where there isn't a 'hop' though some web platform api (like setTimeout) etc.\r\n\r\nOne (far fetched) idea that comes to mind is perhaps any time an AsyncContext is explicitly switched, if that api ever does take off?\r\n\r\nOf course, a last option is to just rely on yield points, and use that as additional motivation for developers to just yield!",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "philosophical",
    "reason": "The reviewer is exploring the implications of LoAF's attribution system on code quality, functionality, and user experience. They discuss whether differentiating the context in which a callback is invoked is necessary and whether regular User Timings can be sufficient for measurement purposes. Additionally, they suggest that LoAF could do more to automatically split attribution across finer boundaries, but ultimately conclude with a philosophical tone that questioning the utility of certain approaches."
  },
  {
    "id": 1987796072,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-10-19T09:03:49Z",
    "updated_at": "2023-10-19T09:03:49Z",
    "body": "> Reading the original request, I see reference to:\r\n> \r\n> > function is a common function that is used multiple times within the code base\r\n> \r\n> But later I only see reference to just making sure a nice name value is exposed. Is it actually important to somehow differentiate the \"context\" from which a particular callback is invoked? I'm not sure how often that would come up...\r\n> \r\n> Second, if you really want to control labelling, and do this in a way where the developer is explicitly provide a hint-- I wonder if just regular User Timings aren't both sufficient and more flexible?\r\n\r\nIt is, but it can also add a lot of noise. The difference here is that this is \"measure but discard if it's not a LoAF\".\r\n\r\n> That said, I think it may be valuable if LoAF could do more attribution splitting automatically, on finer boundaries beyond just \"tasks\". For example, in cases where multiple continuations are registered on a shared promise. Or where a script calls back into previously registered handlers, but in ways where there isn't a 'hop' though some web platform api (like setTimeout) etc.\r\n> \r\n> One (far fetched) idea that comes to mind is perhaps any time an AsyncContext is explicitly switched, if that api ever does take off?\r\n> \r\n> Of course, a last option is to just rely on yield points, and use that as additional motivation for developers to just yield!\r\n\r\nThose are interesting ideas, I still don't see anything actionable there but let's continue the conversation.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive criticism of an existing feature (async context switching) by suggesting it could be improved or more fully implemented. It is a technical discussion point that offers suggestions for enhancement, rather than providing a general use case, feature request, administrative information, conclusion/resolution, philosophical insight, or something unknown about the codebase."
  },
  {
    "id": 1987796073,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-11-07T08:44:54Z",
    "updated_at": "2023-11-07T08:44:54Z",
    "body": "+1 to consider improving this use case.\r\n\r\nThere are several RUM providers wrapping Callback/functions that would be flagged by LoAF as Long LoAFs triggers hiding the real Script sourceLocation information...",
    "user": "gilbertococchi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is requesting a change in how RUM (Request-Only Monitoring) tools, such as LoAF (Load and Exposure Framework), handle long-running scripts or Callback functions. It suggests that these tools should be designed to avoid hiding the real source location of the script execution."
  },
  {
    "id": 1988645676,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/9",
    "created_at": "2023-11-08T19:23:06Z",
    "updated_at": "2023-11-08T19:23:06Z",
    "body": "I am realizing that this isn't a spec question, just implementation, so moving to crbug.\r\n\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1500696",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment is providing technical information about the Chromium issue, specifically referencing an existing bug report (id=1500696) as a resource for further investigation."
  },
  {
    "id": 1987795603,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/2",
    "created_at": "2023-11-10T14:17:30Z",
    "updated_at": "2023-11-10T14:17:30Z",
    "body": "Idea: Perhaps just changing LoAF to treat `EventTarget` listeners as unique entry-point would be the perfect interface for this use case?\r\n\r\nInstead of a library managing its own callback queue and then somehow scheduling those callbacks-- thats already what EventTarget and dispatchEvent does, and there is existing precedent with normal page events already splitting up script attribution on event listener calls.\r\n\r\nLoAF script \"type\" and \"name\" attribution would also be a lot more useful that way, not just solving the \"sourceLocation\" problem.\r\n\r\nAnd EventTarget dispatches listeners synchronously, which addresses the concern with just using yield/postTask.  If you explicitly want to be asynchronous, you can use explicit scheduling.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment proposes a change in how LoAF (likely refers to a programming language or framework) handles event targets and listener callbacks, suggesting that instead of managing the callback queue directly, it would focus on tracking unique entry points for these listeners."
  },
  {
    "id": 1987795607,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/2",
    "created_at": "2023-11-16T19:18:46Z",
    "updated_at": "2023-11-16T19:18:46Z",
    "body": "As we spoke in a private chat, this wouldn't work in terms of microtask checkpoints. a \"real\" entry point would call those custom entry points which would add tasks to the microtask queue, and that queue would then be filled with microtasks from different sources without a way to measure them separately. I think w3c/long-animation-frames#3 is a more doable approach.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "philosophical",
    "reason": "This comment discusses an issue with the current system design and suggests an alternative approach, which is philosophical because it challenges the underlying assumptions of how tasks are processed in microtask checkpoints. It doesn't provide technical details or request specific changes, but rather makes a conceptual argument for why a different approach might be more suitable."
  },
  {
    "id": 1988645197,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/8",
    "created_at": "2023-11-29T19:41:33Z",
    "updated_at": "2023-11-29T19:41:33Z",
    "body": "The thing about inferring blockingDuration from scripts is that you can miss the following contributors to blocking:\r\n- multiple scripts that are less than 5ms each\r\n- Time spent in things other than scripts, e.g. serializing messages for `postMessage`\r\n\r\nI see a few alternative ways about this:\r\n1. Expose \"longest work task\" instead of `blockingDuration` (they're interchangeable, and \"longest work task\" is perhaps simpler to reason about)\r\n2. Only count the last task before the LoAF as contributing to it. This is where I went originally with LoAF... It's like saying \"you didn't really have a rendering opportunity after the earlier tasks, because we don't give you very frequent ones unless there's input/animation\".\r\n3.  Forget `blockingDuration`. Perhaps it doesn't need to be deduced at all... If you have a LoAF, it means that your main thread was congested. The fact that you split it into tasks was nice but the first task that required a presentation update still had to wait before rendering because there was lots of other main-thread stuff going on.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific advice and suggestions for improving a concept, namely inferring `blockingDuration` from scripts. It explains potential pitfalls and alternative approaches that could improve the situation, and offers practical solutions to address these issues. The tone is informative and constructive, indicating that this is a technical feedback comment rather than an administrative or philosophical one."
  },
  {
    "id": 1988645205,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/8",
    "created_at": "2023-11-29T20:53:15Z",
    "updated_at": "2023-11-29T20:53:15Z",
    "body": "RE: 1 --I like that its a bit more interoperable with the Long Tasks api-- but it's also less flexible to evolve.  I could imagine adding more to blockingTime than just one task.  But maybe you general point is that exposing a \"total blocking duration\", without subtracting 50ms or including rendering time automatically, is easier to understand?\r\n\r\nRE 2: --Interesting.  That makes some sense...  On the other hand, today LoAF will already slice tasks at processingEnd whenever we know we don't need rendering (i.e. fallback to LongTask time).  And so this proposal would be similar.  Tasks which aren't immediately followed by rendering are \"just tasks\", and not really LoAFs, from the perspective of the \"blocking\" concept.  So we'd have [Task] as distinct entry, then [Task] nested within LoAF but outside \"blocking\" time, and then [Task+Rendering].  If we believe that is the right way, then maybe we just split LoAF entries, and make LoAF.duration == blockingDuration?\r\n\r\nRE 3: -- I think I am mostly in this camp right now.  I do think right now many pages will report long LoAFs which are due to render-throttling and may not be the \"fault\" of the page, but its also a true representation of UX.  So it just comes down to how the data is interpreted...",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on the proposal, suggesting ways to improve its clarity and functionality. It specifically points out potential issues with the proposal's accuracy regarding the \"blocking\" concept and long tasks in LoAFs."
  },
  {
    "id": 1988645211,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/8",
    "created_at": "2023-12-04T15:39:34Z",
    "updated_at": "2023-12-04T15:39:34Z",
    "body": "Some partners are finding `blockingDuration` useful, as they correlate to INP better than duration.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on the technical aspects of the code or system being reviewed. It describes a specific feature's usefulness and its correlation with another metric (INP). The tone is neutral and informative, suggesting that it is intended to be helpful for someone evaluating or improving the implementation."
  },
  {
    "id": 1987797173,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/5",
    "created_at": "2024-01-03T21:49:02Z",
    "updated_at": "2024-01-03T21:49:02Z",
    "body": "The main reason we're adding LoAF is to better explain INP entries.  Adding an explicit link between an INP entry and its LoAF sounds logical.",
    "user": "vegerot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback on the implementation of a new feature (LoAF) in the context of explaining Inference Numbered Properties (INP) entries, suggesting that it will enhance clarity and correctness."
  },
  {
    "id": 1988644639,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-10T15:36:20Z",
    "updated_at": "2024-01-10T15:36:20Z",
    "body": "Gathering RUM data with PageVitals, I'm trying to get familiar with the different results being sent from the LoAF API.\r\n\r\nI think `type` is a great name for `event-listener`, `classic-script`, `user-callback`, `promise-resolve`, ... so I'd rather keep that.\r\n\r\nRenaming `name` to `invoker` could be a good idea because if gives the developer a better notion of what this really means. \r\n\r\nIn the case of `type` \"classic-script\" it's a bit redundant to have the script URL both in the `name` (or `invoker`) and the `sourceLocation`. It looks like they are the same in this case - but where `sourceLocation` may also have the invoked entry function as well as the column number.\r\n",
    "user": "lasseschou",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The commenter is requesting to rename 'type' to a more descriptive name, specifically 'invoker', and suggesting a change for 'class-script' to remove the duplication of having both the script URL in the 'name' or 'invoker' fields. This change aims to improve clarity and usability."
  },
  {
    "id": 1988644650,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-10T15:58:44Z",
    "updated_at": "2024-01-10T15:58:44Z",
    "body": "> Gathering RUM data with PageVitals, I'm trying to get familiar with the different results being sent from the LoAF API.\r\n> \r\n> I think `type` is a great name for `event-listener`, `classic-script`, `user-callback`, `promise-resolve`, ... so I'd rather keep that.\r\n> \r\n> Renaming `name` to `invoker` could be a good idea because if gives the developer a better notion of what this really means.\r\n> \r\n> In the case of `type` \"classic-script\" it's a bit redundant to have the script URL both in the `name` (or `invoker`) and the `sourceLocation`. It looks like they are the same in this case - but where `sourceLocation` may also have the invoked entry function as well as the column number.\r\n\r\nThe reason to have anything at all in `name` is because in the future we might want to make these nested performance entries available via `performance.getEntriesByName()`, though this is likely a YAGNI.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment provides detailed suggestions for improving the naming conventions of various LoAF API objects, such as `type`, `name`, and others. It offers practical advice on how to improve code readability and maintainability by suggesting alternative names for existing components. This type of comment is typically used in a development or documentation context to clarify and enhance the meaning of existing code."
  },
  {
    "id": 1988644660,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T12:09:06Z",
    "updated_at": "2024-01-11T12:13:09Z",
    "body": "~~With @noamr proposal, we would no longer be able to use `performance.getEntriesByName()` to collect all LoAF. What could we use instead, `performance.getEntries().filter(x => x.constructor.name == 'PerformanceLongAnimationFrameTiming')`? (whether or not it's relevant is another question, I'm just trying to wrap my mind around it).~~\r\n\r\n~~I feel like whether we keep `name` for `event-listener`, `classic-script`, `user-callback`, `promise-resolve` goes further that LoAF. `PerformanceResourceTimings` have names with URLs. `PerformancePaintTimings` have names that are more alike to what @lasseschou calls `invoker`, I feel it's already quite inconsistent. But using `performance.getEntriesByName()` to retrieve a specific kind of LoAF makes sense so why not.~~",
    "user": "borisschapira",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides an analysis of the proposed change and suggests alternative solutions, which is characteristic of technical feedback. The author is offering suggestions for improvement based on their understanding of the code and its potential implications."
  },
  {
    "id": 1988644667,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T12:11:21Z",
    "updated_at": "2024-01-11T12:11:21Z",
    "body": "> With @noamr proposal, we would no longer be able to use `performance.getEntriesByName()` to collect all LoAF. \r\n\r\nTo clarify, this is only about the LoAF's `scripts`, which ATM are not retrieved with `getEntriesByName`.\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment proposes a change that would potentially impact the functionality of an existing feature (performance.getEntriesByName() for retrieving LoAF's scripts), suggesting it is related to improving or enhancing LoAF collection."
  },
  {
    "id": 1988644670,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T12:13:24Z",
    "updated_at": "2024-01-11T12:13:24Z",
    "body": "Oh sorry, I'll think about it again, then.",
    "user": "borisschapira",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment does not provide any specific information or details about what is being used (e.g., code, software, hardware), and instead expresses a personal attitude (\"I'll think about it again\"). It appears to be an expression of uncertainty or reluctance rather than an attempt to improve the product or its functionality."
  },
  {
    "id": 1988644680,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T12:35:18Z",
    "updated_at": "2024-01-11T12:35:18Z",
    "body": "In `PerformanceNavigationTiming`, `type` is a string representing the navigation type. `event-listener`, `classic-script`, etc. are not Script types, so for the sake of spec coherence, I feel like `type` is not necessarily adapted.\r\n\r\nIn `PerformanceServerTiming`, `name` is a string representing the name of the timing.  I feel that `event-listener`, `classic-script`, etc. are not names either, rather qualifiers.\r\n\r\nCouldn't they be `entryType` instead? `script` is quite redundant there\u2026",
    "user": "borisschapira",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment expresses a concern and suggestion for improving the naming conventions in two performance-related parts of the code (PerformanceNavigationTiming and PerformanceServerTiming). It provides suggestions to replace \"event-listener\", \"classic-script\", etc. with \"entryType\" or simply \"script\"."
  },
  {
    "id": 1988644686,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T12:38:06Z",
    "updated_at": "2024-01-11T12:39:03Z",
    "body": "> In `PerformanceNavigationTiming`, `type` is a string representing the navigation type. `event-listener`, `classic-script`, etc. are not Script types, so for the sake of spec coherence, I feel like `type` is not necessarily adapted.\r\n> \r\n> In `PerformanceServerTiming`, `name` is a string representing the name of the timing. I feel that `event-listener`, `classic-script`, etc. are not names either, rather qualifiers.\r\n> \r\n> Couldn't they be `entryType` instead? `script` is quite redundant there\u2026\r\n\r\nThat's an option. They're not exactly the type of script, I thought to rename that `invokerType`.\r\nIn most cases the `entryType` matches the IDL type (e.g. `resource` matches to `PerformanceResourceTiming`)",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides suggestions for improving code coherence and reusability by suggesting alternative names for certain variables, which are not exactly what they represent in their current context."
  },
  {
    "id": 1988644696,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T14:14:31Z",
    "updated_at": "2024-01-11T14:14:31Z",
    "body": "Am with @lasseschou, `type` feels more descriptive than `name` for `event-listener`, `script-block` etc..\r\n`invoker` is very clear, like that, though DevTools > Network panel uses `initiator`, which is also quite descriptive?",
    "user": "aarontgrogg",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment is describing how the developers' naming conventions are working and evaluating their effectiveness. It's discussing whether a certain variable name (`type`) is more descriptive than another (`name`). This type of analysis falls under \"Use Case\" as it involves examining the usability and functionality of the system, in this case, the developer tools."
  },
  {
    "id": 1988644712,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T14:15:18Z",
    "updated_at": "2024-01-11T14:15:18Z",
    "body": "I think perhaps `invokerType` rather than `type` though, e.g. the `entryType` is still `script` (maps with the IDL `PerformanceScriptTiming`)",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment provides a specific feedback on how to improve or correct an existing code snippet related to JavaScript/TypeScript development, specifically suggesting alternative variable names. This suggests that the purpose of this comment is to inform and guide someone using this code by clarifying terminology."
  },
  {
    "id": 1988644720,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T14:52:07Z",
    "updated_at": "2024-01-11T14:52:07Z",
    "body": "So, `invoker` + `invokerType` or `initiator` + `initiatorType`, then? I must say I like `initiator`.",
    "user": "borisschapira",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment is providing constructive criticism about a specific design choice in the code, highlighting that it's not ideal but suggests alternatives (\"invoker + invokerType\" or \"initiator + initiatorType\") for improvement."
  },
  {
    "id": 1987797177,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/5",
    "created_at": "2024-01-19T18:24:07Z",
    "updated_at": "2024-01-19T18:24:07Z",
    "body": "@noamr based on what you said it seems that more important than linking LoAF to INP would be to breakdown the 3 phases of INP (Input delay, Processing time and Presentation delay). Is it possible to do that with the current APIs? I know we can see that in chrome devtools but It would be good to track it in RUM",
    "user": "lebreRafael",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is requesting a way to track the 3 phases of Input-Output Performance (INP) using Real User Monitoring (RUM), suggesting that the current APIs do not provide sufficient information for this purpose. This implies that the commenter believes it would be beneficial to have more detailed metrics or visualizations to understand the performance of LoAF in different scenarios, which is an administrative concern."
  },
  {
    "id": 1987797180,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/5",
    "created_at": "2024-01-19T19:04:48Z",
    "updated_at": "2024-01-19T19:04:48Z",
    "body": "> @noamr based on what you said it seems that more important than linking LoAF to INP would be to breakdown the 3 phases of INP (Input delay, Processing time and Presentation delay). Is it possible to do that with the current APIs? I know we can see that in chrome devtools but It would be good to track it in RUM\n\nEvent timing gives you precisely that breakdown, yes.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment appears to describe a specific requirement or proposal for improving the reliability of LoAF (Load Balancer and Forwarder), specifically focusing on breaking down the 3 phases of Input Processing in INP (Input Notification Protocol) into more manageable metrics. This indicates that the commenter is proposing an improvement or feature addition to achieve better system reliability, which aligns with the Use Case classification."
  },
  {
    "id": 1987793656,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-27T18:50:29Z",
    "updated_at": "2024-01-29T11:02:20Z",
    "body": "This is critical for us, since we use firstUIEventTimestamp to calculate rum INP.Please find a solution for this\ud83d\ude4f",
    "user": "anatdagan",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment asks for an administrative fix (finding a solution) to resolve a specific issue (the \"rum INP\" is not being calculated correctly), indicating that it's related to setting up or configuring the application."
  },
  {
    "id": 1987793659,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-29T11:03:27Z",
    "updated_at": "2024-01-29T11:03:27Z",
    "body": "@anatdagan could you please explain a little more about how this impacts you? You cannot use `firstUIEventTimestamp` to calculate RUM INP, and even if you could it wouldn't necessarily reflect the correct INP since `firstUIEventTimestamp` may not be related to the INP event.",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed information about a specific technical issue with a system (RUM INP calculation) that needs to be addressed. The commenter is explicitly stating what they think might be causing the problem and offering a suggestion for how it could be resolved, which indicates a technical focus."
  },
  {
    "id": 1987793662,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-29T16:53:30Z",
    "updated_at": "2024-01-29T17:00:34Z",
    "body": "> Should we add a `firstInteractionEventTimestamp`?\r\n\r\n@tunetheweb If this were added (and the what-constitutes-an-interaction logic was consistent between loafs and inp attribution), would mapping a long animation frame to an INP attribution be as simple as `loaf.firstInteractionEventTimestamp === inpAttribution.eventTime`? Or would there be additional considerations?\r\n\r\nIt'd be helpful regardless, as I had to poke around quite a bit to find the issues with `firstUIEventTimestamp` and why it wasn't used in [Noam's linking gist](https://gist.github.com/noamr/316bd48157ab35e4f632a8c2583281b7).",
    "user": "vanderhoop",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing feedback on a technical aspect of an existing codebase, specifically suggesting whether to add a new field and how it might impact the current functionality. It's focused on improving the code by offering suggestions for improvement rather than discussing broader issues or proposing alternative solutions."
  },
  {
    "id": 1987793666,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-29T17:04:23Z",
    "updated_at": "2024-01-29T17:04:23Z",
    "body": "You could in theory have two interactions within the same frame, and the INP could be the second one so might not be the `firstInteractionEventTimestamp`. Or two interactions that start on the same timestamp.\r\n\r\nThough struggling to see how, as presumably the render delay part of INP wouldn't be until the end of the frame so the first one should be the longest... \ud83e\udd14",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "philosophical",
    "reason": "No reason provided."
  },
  {
    "id": 1987793670,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-29T21:54:48Z",
    "updated_at": "2024-01-29T21:54:48Z",
    "body": "Hi Barry,We collect LoAF RUM data, and we consider the longest LoAF of the page with firstUIEventTimestamp >0 as the INP of the page.Sent from my iPhoneOn 29 Jan 2024, at 19:04, Barry Pollard ***@***.***> wrote:\ufeff\r\nYou could in theory have two interactions within the same frame, and the INP could be the second one so might not be the firstInteractionEventTimestamp. Or two interactions that start on the same timestamp.\r\nThough struggling to see how, as presumably the render delay part of INP wouldn't be until the end of the frame so the first one should be the longest... \ud83e\udd14\r\n\r\n\u2014Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you were mentioned.Message ID: ***@***.***>",
    "user": "anatdagan",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment is asking for clarification about how to determine the \"first\" interaction event timestamp when collecting LoAF RUM data. It's essentially a usability question related to understanding the behavior of LoAF RUM."
  },
  {
    "id": 1987793677,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-30T15:51:57Z",
    "updated_at": "2024-01-30T15:51:57Z",
    "body": "As one thing to consider-- LoAF is used for more than just INP measurement.  Some folks have been using it for Smoothness and a type of \"FPS\" measure.\r\n\r\nIn those cases, `firstUIEventTimestamp` might represent the e.g. pointermove/scroll events.\r\n\r\nI cannot say if the current value is useful or not, but if the issue is INP overlap I think there is a wider discussion about how best to do EventTiming <-> LoAF attribution and we can delay this decision until we gain more experience on this type of attribution work?",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides specific technical information, such as the potential use case for LoAF beyond INP measurement (Smoothness/FPS measure), and offers suggestions for improvement by suggesting a wider discussion about attributing EventTiming to LoAF. It does not appear to be related to user experience, features, or administrative tasks, nor is it focused on philosophical debates."
  },
  {
    "id": 1997971195,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/10",
    "created_at": "2024-03-14T17:25:40Z",
    "updated_at": "2024-03-14T17:25:40Z",
    "body": "This relates to other discussions, like exposing cold-start for navigations...\r\nIt's a broad issue about adding some entropy dimension to the performance timeline, about slowness/jank that's not actionable by the author.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on how to improve performance in navigation, specifically mentioning the need for more information (entropy) in the timeline. It is a constructive suggestion for improvement and does not appear to be related to an existing discussion or request."
  },
  {
    "id": 2025930993,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-03-28T19:15:09Z",
    "updated_at": "2024-03-28T19:15:09Z",
    "body": "New Relic RUM needs some way of informing developers that hook into the LoAF API directly that our wrapper is not the cause of their long animation frames. I was going to look at maybe just overriding the `name` on the function given the wrapped function has a `name` property but this is probably going to cause more issues, especially around stack trace cleansing, even if it does work.\r\n\r\nUltimately, we need a way to direct the developer back to the offending code and I don't think having just a name is sufficient. Even if we could update the name, if the line numbers and file name still point to the RUM provider, developers will still be confused.",
    "user": "patrickhousley",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is asking for a feature that would allow developers to get more information about how their changes are being executed in New Relic RUM without having to use a wrapper. This involves providing feedback directly from the source code, which is not currently available through the provided suggestion of overriding the `name` property."
  },
  {
    "id": 2036802745,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/11",
    "created_at": "2024-04-04T10:33:10Z",
    "updated_at": "2024-04-04T10:33:10Z",
    "body": "Actually testing this I see that we do get source information for those, what we don't get is source information for e.g. `setTimeout(\"string\")`, not sure what the source information for that should be...",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment appears to be providing feedback about a specific feature or behavior of an application, which suggests it is related to testing and quality assurance, specifically evaluating how well certain types of code (e.g. `setTimeout`) are implemented."
  },
  {
    "id": 2135187530,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-28T13:13:14Z",
    "updated_at": "2024-05-28T13:13:14Z",
    "body": "The LoAF source attribution is based on the actual \"entry point\" that is registered with the browser for scheduling, and which is invoked to start this new task / loaf-script, rather than any code that might eventually be called as part of this task.\r\n\r\n- The browser doesn't know you are using React or how React Components use event listeners\r\n- You the developer know that you have a custom event listener defined inside a Component and this is attached a specific element and that this event does the \"interesting bit\" of work. However...\r\n- React happens to [do its own synthetic event dispatch](https://react.dev/reference/react-dom/components/common#react-event-object) (See [caveats](https://react.dev/reference/react-dom/components/common#react-event-object-caveats)) which has some benefits and drawbacks (such as issues like this)\r\n  - Here is one [random article that describes some of the benefits](https://medium.com/@sagnik.das2/what-is-react-synthetic-events-8d7ad766d821)\r\n  - And one [random article that describes some of the drawbacks](https://medium.com/@jessebillard/react-synthetic-events-are-funny-669a25dc103e)\r\n- In the case of LoAF attribution, because react is acting as a \"wrapper\" for your component code, LoAF can only attribute down to the React library.\r\n  - This is also common on pages that use library that wrap all native APIs, e.g. for measurement.\r\n\r\n---\r\n\r\nGenerally, when using frameworks / compilers / bundlers / wrapper libraries... and especially for complex JS-apps using Component style development, it is often the case that the literal source location value returned by LoAF attribution links to a computer generated bundle and with a minified and unreadable name and inconsistent source locations.\r\n\r\nFor that reason, it is expected that you will likely need to rely on source maps (or other lookup methods) to actually show nice developer-readable attribution.  This might require some assistance by frameworks themselves, and LoAF has not be available for very long.  (Though some analytics providers are beginning to offer some of this as a product).\r\n\r\nFor local development, I would say this attribution is expected to be more useful if you use more Vanilla JS approaches to scheduling -- and over time, perhaps JS frameworks will be able to leverage more \"vanilla\" scheduling directly, as the reasons for wrappers are largely historic and for compatibility reasons at this point (and some frameworks already are more vanilla).\r\n\r\n---\r\n\r\nFor attributing INP for a project like yours, I would probably:\r\n\r\n- Use the fact that this is calling into ReactDOM as a signal that this is a Component listener that you explicitly added, rather than some 3p library code / global listeners.\r\n- Instead of using the source location, use the `event.target` from the INP attribtion, as well as the `event.type`.\r\n- Use this information (perhaps from RUM) to find the right UI element (likely testing in lab), then just inspect the DOM (or run a perf profile) to find the long event listener.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed technical insights and observations about the LoAF source attribution mechanism, including its limitations and potential drawbacks. It also suggests alternative approaches for attributing INP locations in certain cases. The tone is informative and technical, providing specific examples and explanations to support the author's points."
  },
  {
    "id": 2135196062,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-05-28T13:17:03Z",
    "updated_at": "2024-05-28T13:17:03Z",
    "body": "Might be related to https://github.com/w3c/long-animation-frames/issues/11",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment appears to provide a specific suggestion or point of interest related to the GitHub issue trackable by w3c/long-animation-frames, which is likely about animations in HTML5. The mention of \"https://github.com/w3c/long-animation-frames/issues/11\" suggests that the commenter is referencing this particular issue."
  },
  {
    "id": 2136581470,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T06:03:26Z",
    "updated_at": "2024-05-29T06:03:26Z",
    "body": "Thanks a tonne for the detailed response @mmocny @tunetheweb over the linked issue! I have been playing around with these metrics and was trying one specific case where some unexpected and interesting metrics were logged, and was hoping to get an insight from you on the same:\r\n\r\nI am currently logging the `interactionTargetElement` node which we get from the attribution data of INP metric (added in v4), alongside this I have a PerformanceObserver which observes for type `long-animation-frame`, to get details about long tasks. The code snippet for the same:\r\n```typescript\r\n\r\n// function logging relevant details to a performance entry\r\n  const analyzePerformanceEntry = (entry) => {\r\n    const { renderStart, firstUIEventTimestamp, blockingDuration, scripts } = entry;\r\n    console.log(`\r\n      Performance Analysis:\r\n      Render Start: ${renderStart}\r\n      First UI Event Timestamp: ${firstUIEventTimestamp}\r\n      Blocking Duration: ${blockingDuration}\r\n      Scripts:\r\n    `);\r\n    scripts.forEach((script) => {\r\n      const { duration, executionStart, sourceURL, sourceFunctionName, invoker, invokerType } = script;\r\n      console.log(`\r\n        Duration: ${duration}\r\n        Execution Start: ${executionStart}\r\n        Source URL: ${sourceURL}\r\n        Source Function: ${sourceFunctionName}\r\n        Invoker: ${invoker}\r\n        Invoker Type: ${invokerType}\r\n      `);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const REPORTING_THRESHOLD_MS = 150;\r\n    \r\n// performance observer\r\n    const observer = new PerformanceObserver((list) => {\r\n      for (const entry of list.getEntries()) {\r\n        if (entry.duration > REPORTING_THRESHOLD_MS && (entry as any).firstUIEventTimestamp > 0) {\r\n          console.log(\"Long task detected:\", entry);\r\n          analyzePerformanceEntry(entry);\r\n        }\r\n      }\r\n    });\r\n\r\n    observer.observe({ type: \"long-animation-frame\", buffered: true });\r\n\r\n// callback function to be passed to the `onINP()` method\r\n    const handleINP = (metric) => {\r\n      const { attribution } = metric;\r\n      const { interactionTarget, interactionTargetElement } = attribution;\r\n\r\n      console.log('INP Attribution:');\r\n      console.log(`Interaction Type: ${interactionTarget}`);\r\n      if (interactionTargetElement) {\r\n        const reactPropsKey = Object.keys(interactionTargetElement).find(key => key.startsWith('__reactProps'));\r\n        const reactProps = reactPropsKey ? interactionTargetElement[reactPropsKey] : {};\r\n\r\n        console.log(`\r\n          Interaction Target Element:\r\n          Node Name: ${interactionTargetElement.nodeName}\r\n          Text Content: ${interactionTargetElement.textContent}\r\n          Parent Node Name: ${interactionTargetElement.parentNode?.nodeName}\r\n          Parent Text Content: ${interactionTargetElement.parentNode?.textContent}\r\n          React Props: ${reactProps ? JSON.stringify(reactProps) : 'N/A'}\r\n        `);\r\n      }\r\n    };\r\n\r\n    onINP(handleINP, { reportAllChanges: true });\r\n\r\n    return () => {\r\n      observer.disconnect();\r\n      onINP(null); // Ensure onINP callback is cleaned up\r\n    };\r\n  }, []);\r\n  \r\n// handler for click on button of 3s\r\n   const handleAddItem = () => { \r\n    const newItem = { id: items.length + 1, name: \"\", category: \"\" };\r\n    const start = Date.now();\r\n    while (Date.now() - start < 3000) {}\r\n    setItems([...items, newItem]);\r\n  };\r\n\r\n// handler for click on button of 4s\r\n  const handleAddItem4s = () => {\r\n    const newItem = { id: items.length + 1, name: \"\", category: \"\" };\r\n    const start = Date.now();\r\n    while (Date.now() - start < 4000) {}\r\n    setItems([...items, newItem]);\r\n  };\r\n``` \r\n\r\nI was then testing around with some cases to get results from these logs. The page can be found here: [https://webperf-alpha.vercel.app/dashboard/inp](https://webperf-alpha.vercel.app/dashboard/inp). On loading of this application page on localhost without any CPU Throttling and on Mobile dimensions, I tested for the input: \r\n1. Click on Add Item (4s) button\r\n2. Click on Add Item (3s) button immediately after clicking above\r\n3. Click on Add Item (4s) button again immediately after clicking above.\r\n\r\nThe output behaviour is rather interesting, and I am unable to explain them:\r\nThe first item is added after 4s, the second and third items are loaded together after 7s of the time the first item was loaded. The `interactionTargetElement` shows the 3s button for some reason. There are two doubts here: why is the 2nd and 3rd step above batched together and executed at once (combined delay of 7s?) and why is the target element pointing towards the 3s button and not the 4s button ? The `interactionTarget` docs say:\r\n```\r\n  /**\r\n   * A selector identifying the element that the user first interacted with\r\n   * as part of the frame where the INP candidate interaction occurred.\r\n   * If this value is an empty string, that generally means the element was\r\n   * removed from the DOM after the interaction.\r\n   */\r\n``` \r\n\r\nSo for instance in the case where I first select the 4s button and then immediately click the 3s button, the attribution should point out the element where the interaction started: i.e. the Add Item (4s) button, but it seems the reverse is happening. Am I missing anything here ? An insight into the same would be highly appreciated.\r\n\r\nOutput image:\r\n<img width=\"1791\" alt=\"Screenshot 2024-05-29 at 1 57 05\u202fAM\" src=\"https://github.com/w3c/long-animation-frames/assets/171024309/1cd73ce1-ef87-4e20-908d-dc1db12b45b0\">\r\n",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "philosophical",
    "reason": "The code is not primarily focused on technical implementation details, but rather exploring the behavior of an asynchronous system (PerformanceObserver) and attempting to extract insights from it. The code appears to be a complex experiment designed to test the interaction between different parts of a web application during high-load scenarios. While there are some technical aspects involved (e.g., working with PerformanceObserver and interaction targets), the primary goal is to gain insight into how these interactions work, which makes this comment a philosophical one."
  },
  {
    "id": 2136852650,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T08:35:13Z",
    "updated_at": "2024-05-29T08:35:13Z",
    "body": "I think I figured out the reason the performance metrics are reported together for the 2nd and the 3rd click: it is due to React batching the updates together, hence the metrics for the 2nd and 3rd click log together at once. I tested this logic for another case with 4 clicks, the last 3 updates are batched here again. So that is due to the latest React features, but again the doubt of which `interactionTargetElement` will be reported in such scenarios still stand, the perceived output is different from the expected one as specified in the docs. ",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides an explanation and a test case for the problem mentioned, indicating that it is related to debugging or troubleshooting React-related issues. It also suggests possible solutions to this issue, which implies that the commenter has identified a bug or a performance optimization opportunity in the current implementation."
  },
  {
    "id": 2136875096,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T08:45:41Z",
    "updated_at": "2024-05-29T08:45:41Z",
    "body": "> alongside this I have a PerformanceObserver which observes for type long-animation-frame, to get details about long tasks. \r\n\r\nv4 includes any long tasks overlapping the INP event in the INP callback to save you having to monitor that separately.\r\n\r\nBut it can be good to measure all LoAFs to also get long task outside the immediate INP event.\r\n\r\n> I think I figured out the reason the performance metrics are reported together for the 2nd and the 3rd click: it is due to React batching the updates together, hence the metrics for the 2nd and 3rd click log together at once. I tested this logic for another case with 4 clicks, the last 3 updates are batched here again. So that is due to the latest React features, but again the doubt of which interactionTargetElement will be reported in such scenarios still stand, the perceived output is different from the expected one as specified in the docs.\r\n\r\nOK that's interesting. I would guess React is trying it's best to be responsive to the first click, but then batching the rest together to save having to do multiple layouts together?\r\n\r\nGoing  back to the docs:\r\n\r\n```js\r\n   /**\r\n   * A selector identifying the element that the user first interacted with\r\n   * as part of the frame where the INP candidate interaction occurred.\r\n   * If this value is an empty string, that generally means the element was\r\n   * removed from the DOM after the interaction.\r\n   */\r\n```\r\n\r\nIt would seem, that in that example, there would be two frames\u2014the first with click 1, and the second with the remaining clicks that React has batched together.\r\n\r\nIn that case the frame with the longest one will be the \"INP frame\". All else being equal this would be the second frame (as it includes multiple clicks so will take multiple processing times to finish). And this is what you are seeing. The `interactionTarget` is set to the first interaction of the INP frame. The prior frame may well have been quite slow, but the subsequent one was slower still. Now I know you're running this with `reportAllChanges: true` but if all the Event Timings are reported together (as could often be the case in cases like this where the main thread is busy), then they will be processed together, but split into frames, so only the second one would be emitted as an INP event.\r\n \r\nSo I think the docs (and the implementation!) are right in this case. But certainly a confusing one if you're not aware how this all works!",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "administrative",
    "reason": "This comment is providing information and clarification about the functionality of React's PerformanceObserver, specifically how it handles multiple clicks on an element that triggers an INP (Interactive Paint) event. The author is attempting to understand the internal workings of the framework and identify potential areas for improvement or optimization."
  },
  {
    "id": 2136927207,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T09:11:09Z",
    "updated_at": "2024-05-29T09:11:09Z",
    "body": "> OK that's interesting. I would guess React is trying it's best to be responsive to the first click, but then batching the rest together to save having to do multiple layouts together?\r\n\r\nYep exactly! I was not sure if we would should view this as separate frames (even if so how exactly though): one for the first click and the second for all the subsequent clicks. This logics fits perfectly and makes sense, checked on the following case of immediate clicks one after the another:\r\n1. 3s button\r\n2. 3s button\r\n3. 4s button\r\n4. 4s button\r\n\r\nThe `interactionTargetElement` is indeed reported as the 3s button (starting interaction of the 2nd frame). \r\nThanks for the clarification :)\r\n\r\n",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment is discussing a specific use case related to the application, particularly how React handles the rendering of multiple buttons on the same click. The commenter is providing feedback and insights based on their experience with React and its interaction with user input, making it clear that this is an evaluation or assessment of the software's behavior rather than just technical information or suggestions for improvement."
  },
  {
    "id": 2136940006,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T09:17:31Z",
    "updated_at": "2024-05-29T09:17:31Z",
    "body": "> I was not sure if we would should view this as separate frames (even if so how exactly though)\r\n\r\nIf you look at Event Timing entries I'd expect the first to finish (starttime + duration) at time 1, and the rest all at the same time 2 (or close enough minus some rounding and limits!), since the \"starttime + duration\" is approximately the frame paint time (rather than the end of event handler processing).\r\n\r\nShould also be able to see in a performance trace.",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on how the system or code handles events and their timing, specifically mentioning issues with the assumption about frame painting times. It offers suggestions for improvement, including the ability to view event timings in the \"performance trace\" which suggests a technical support or debugging context."
  },
  {
    "id": 2136969621,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T09:32:23Z",
    "updated_at": "2024-05-29T09:32:23Z",
    "body": "Right, will see once with a performance trace as well.",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing feedback on something technical (a performance issue) and suggests a solution or further action that should be taken to resolve the problem."
  },
  {
    "id": 2137155561,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T11:11:23Z",
    "updated_at": "2024-05-31T14:40:00Z",
    "body": "OK so tried this.\r\n\r\n**Desktop**\r\n\r\nWhen I do this:\r\n- Click on Add Item (4s) button\r\n- Click on Add Item (3s) button immediately after clicking above\r\n- Click on Add Item (4s) button again immediately after clicking above.\r\n\r\nI see this:\r\n- All 3 items are rendered together\r\n- The INP target is the 4s click element\r\n\r\n<img width=\"1484\" alt=\"image\" src=\"https://github.com/w3c/long-animation-frames/assets/10931297/2c62b35b-b357-4ea3-b18e-a2dcfb1113f6\">\r\n\r\n- The trace shows they were indeed split into two tasks, but both were rendered together, hence why the first interaction was the longest one from INP point of view.\r\n\r\n<img width=\"800\" alt=\"image\" src=\"https://github.com/w3c/long-animation-frames/assets/10931297/9792891a-3643-446b-8a7d-bf9e1e55454a\">\r\n\r\n**Mobile**\r\n\r\nWhen enabling mobile emulation and repeating, it's slightly different:\r\n\r\n- Two INP events are emitted, with the second being much longer (due to being delayed by the first), and overtaking the first. This second one is therefore the ultimate INP for the page. The first INP target is the 4s button, the second is the 3s button:\r\n\r\n<img width=\"774\" alt=\"image\" src=\"https://github.com/w3c/long-animation-frames/assets/10931297/157a41cf-e96c-4244-b55e-7b09ba0399b5\">\r\n\r\nThe trace shows two distinct interactions:\r\n\r\n<img width=\"733\" alt=\"image\" src=\"https://github.com/w3c/long-animation-frames/assets/10931297/5da817fa-5c46-49c1-9e5b-d02ea89c37ba\">\r\n\r\nWeirdly the screenshot do not show two step render, but that's what I saw with my own eyes, and if you zoom in there is a paint and a commit between the two confirming a render happened then:\r\n\r\n<img width=\"249\" alt=\"image\" src=\"https://github.com/w3c/long-animation-frames/assets/10931297/0ea37fde-aa64-42b7-8128-66730005a5b6\">\r\n\r\nSo it looks like on mobile Chrome prefers the early, separate paint, but on desktop it decides to wait and do them both together. Chrome does all sorts of heuristics to decide when to render a frame, especially when it knows there are more inputs to process, and it looks like the mobile and desktop heuristics are slightly different. Maybe @mmocny can explain why?\r\n\r\n",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed explanations of how Chrome handles animation frames on both desktop and mobile platforms, indicating that there is a technical issue or misunderstanding regarding how Chrome renders animations."
  },
  {
    "id": 2142366987,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-31T14:29:55Z",
    "updated_at": "2024-05-31T14:33:19Z",
    "body": "At the start of a `BeginMainFrame` task (i.e. rendering) Chrome will *flush all UI events* which are *already queued in the event loop* at the start of BMF, but won't flush any that are added during the BMF.\r\n\r\nTherefore, if your first interaction is so long running that you have time to interact again, before BMF starts *and the browser process actually sends these events to renderer in time*, then you will effectively cluster those inputs into a single long animation frame.\r\n\r\nI don't think the scheduling policy is any different on desktop or mobile-- but what changes is that as we change input types, we change how we send events from browser to renderer.\r\n\r\nTouch is weirder than mouse input-- and DevTools touch emulation is weirdest of all.  Sometimes you have to wait for Renderer to acknowledge feedback from previous events (i.e. IPC messages that start after processingEnd), and before browser can send new IPC about future events...\r\n\r\n---\r\n\r\nIn this case these were distinct interactions, so I had expected it would work.  I tried myself locally and could repro as Barry says.  It wasn't just luck / races.\r\n\r\nI traced with Perfetto and here is what I see:\r\n\r\n1. Indeed, the second and third events are stuck in browser process waiting for the first event to finish:\r\n\r\n![Screenshot 2024-05-31 at 10 14 58](https://github.com/w3c/long-animation-frames/assets/474282/79248419-a34d-46a9-bc6f-154bd5501eee)\r\n\r\nThe 'flow' shows when the browser received the event and forwarded it to the renderer.  You should see that it is first started after the first interactions ends-- weird, I definitely interacted earlier!\r\n\r\n\r\n2. If I follow that flow to the begging I see references to `RenderWidgetHostInputEventRouter::ForwardEmulatedGestureEvent`, and I can find another flow event:\r\n\r\n![Screenshot 2024-05-31 at 10 14 47](https://github.com/w3c/long-animation-frames/assets/474282/02df15a4-aba3-43de-9304-0eb73631018c)\r\n\r\nFollowing that flow to its start, I find the original `RenderWidgetHostViewCocoa::mouseEvent`.\r\n\r\nLooks like the way Touch emulation works is:\r\n- Browser receives mouse events, sends to renderer\r\n- Renderer has to schedule the mouse events, before it can \"reject them\" and ask for touch simulation instead\r\n- Goes back to Browser and back to renderer.\r\n\r\nAll this means that we are guaranteed to have a few process IPC between the end of the first interaction event and the start of BMF task and that is a very narrow window to race and rendering will win.\r\n\r\n---\r\n\r\nNet/net, don't rely on mobile emulation for very detailed scheduling test :D\r\n\r\nAlso -- more generally -- I have been [advocating to make some scheduling changes to this scheduling policy](https://issues.chromium.org/issues/338037072), so I wouldn't rely on it too heavily.\r\n\r\nOther browsers are already different.  The mobile emulated behaviour today is likely to match the future behaviour more if I was to guess.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment describes a specific use case or scenario where Chrome's behavior of not flushing UI events during rendering results in a longer-than-expected animation frame, and it provides a solution for troubleshooting this issue. The comment is focused on describing the problem and proposing a potential fix, which makes it a use case-related discussion rather than technical feedback, feature request, administrative, or philosophical."
  },
  {
    "id": 2144283217,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-06-03T04:59:48Z",
    "updated_at": "2024-06-03T04:59:48Z",
    "body": "Got it, thanks a lot for the detailed explanation! ",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing feedback on a piece of code or documentation, specifically that it needs to be clarified. The tone is professional and polite, indicating that the commenter is seeking guidance rather than expressing dissatisfaction with something."
  },
  {
    "id": 2158910590,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T17:20:42Z",
    "updated_at": "2024-06-10T17:20:42Z",
    "body": "Requesting to review this once (@mmocny @tunetheweb @noamr), the current LoAF entries obtained from a simple PerformanceObserver observing for Long Animation Frames like:\r\n```typescript\r\n    const REPORTING_THRESHOLD_MS = 150;\r\n    const observer = new PerformanceObserver((list) => {\r\n      for (const entry of list.getEntries()) {\r\n        if (\r\n          entry.duration > REPORTING_THRESHOLD_MS &&\r\n          (entry as any).firstUIEventTimestamp > 0\r\n        ) {\r\n          console.log(\"Long task detected:\", entry)\r\n          analyzePerformanceEntry(entry);\r\n        }\r\n      }\r\n    });\r\n\r\n    observer.observe({ type: \"long-animation-frame\", buffered: true });\r\n``` \r\n\r\nTo get something more actionable, if we could get the exact function (name) delaying the main thread it would be best (case where we automating this process of finding action items. The sourceFunctionName and sourceURL are not really helpful when working with a bundled code (eg: like in ReactJS, NextJS). Is there a way to get more insights into the same apart from the above so that finding actionable items is easier ? I am aware of the method specified here: \"[https://github.com/w3c/long-animation-frames/issues/3#issuecomment-1987796069](https://github.com/w3c/long-animation-frames/issues/3#issuecomment-1987796069)\" , but something more useful in scenarios such as above would be nice. Continuation of Issue: [https://github.com/w3c/long-animation-frames/issues/3](https://github.com/w3c/long-animation-frames/issues/3)",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides a specific example and code snippet from the current LoAF (Long Animation Frames) implementation, along with suggestions for improvement or potential issues. It requests additional insight into finding actionable items in such scenarios, which is classified as technical feedback."
  },
  {
    "id": 2158916412,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T17:24:20Z",
    "updated_at": "2024-06-10T17:24:20Z",
    "body": "@jinja12 that seems directly related to #3 as you mention, rather than the issue @rackaam raised here?",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment is asking for feedback on a different topic than the one presented in the original code snippet. The author of the code is referencing a specific ticket number (#3) that mentions the request they are currently discussing, but their comment does not seem to be related to this ticket."
  },
  {
    "id": 2158952596,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T17:45:43Z",
    "updated_at": "2024-06-10T17:45:43Z",
    "body": "Yeah, I added it here since I too want to get more information regarding the entry point of the function responsible for the long task blocking (not specific to setTimeout)",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback about a specific piece of code or functionality, describing its purpose and how it was used. It does not ask a question, request information, propose an idea, provide analysis, discuss a topic, offer advice, draw conclusions, present philosophical perspectives, or pose an unknown issue."
  },
  {
    "id": 2158994498,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T18:09:21Z",
    "updated_at": "2024-06-10T18:09:21Z",
    "body": "This is more related to #11 than to #3. It's most likely `setTimeout(code_as_string, timeout)` and `xhr.onreadystatechange = handler_as_string`, both of which don't have an obvious source location. We can perhaps provide an elided version of the source code itself, or an md5 digest?",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment is providing specific suggestions for improving the code by pointing out a potential issue with timing-related functions and function calls that are not immediately obvious in their location within the code."
  },
  {
    "id": 2159006932,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T18:16:12Z",
    "updated_at": "2024-06-10T18:20:27Z",
    "body": "Right, is there an existing way to get the source location of the function calling the long task in bundled packages in cases excluding the one you mention? For example:\r\n```typescript\r\nfunction blockMainThread(duration: number) {\r\n    const start = Date.now();\r\n    while (Date.now() - start < duration) {\r\n      // Busy-wait loop to block the main thread\r\n    }\r\n}\r\n\r\n// A simple form embedded on a page, which when submitted triggers a 3s main thread block\r\nconst form = document.getElementById('testForm');\r\n\r\nform.onsubmit = (event) => {\r\n  event.preventDefault();\r\n  blockMainThread(3000); // 3-second blocking operation\r\n};\r\n```",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "administrative",
    "reason": "This comment is not providing technical feedback or suggestions for improvement, nor does it propose a new feature or request. Instead, it's an example code snippet and its usage is being discussed. It's primarily focused on explaining how to use the `blockMainThread` function in a bundled package, which is then used as an example in another part of the code."
  },
  {
    "id": 2159118326,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T19:18:04Z",
    "updated_at": "2024-06-10T19:18:04Z",
    "body": "> Right, is there an existing way to get the source location of the function calling the long task in bundled packages in cases excluding the one you mention? For example:\r\n> \r\n> ```ts\r\n> function blockMainThread(duration: number) {\r\n>     const start = Date.now();\r\n>     while (Date.now() - start < duration) {\r\n>       // Busy-wait loop to block the main thread\r\n>     }\r\n> }\r\n> \r\n> // A simple form embedded on a page, which when submitted triggers a 3s main thread block\r\n> const form = document.getElementById('testForm');\r\n> \r\n> form.onsubmit = (event) => {\r\n>   event.preventDefault();\r\n>   blockMainThread(3000); // 3-second blocking operation\r\n> };\r\n> ```\r\n\r\nIn this case `sourceLocation` would give you the location of the arrow function you passed to `onsubmit`. There is no existing low-overhead way to give you the source location of `blockMainThread`, as that would require a full stack trace which is a very heavy operation, but as per #11 you can wrap it in user timing and perhaps we can at some point provide some mechanism for conditional user-timing or special function annotation for this purpose.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on how to implement a feature (getting the source location of an arrow function) that was not mentioned in the original code. It suggests using timing to achieve this, but does not provide any technical details or implementation guidance for the feature itself."
  },
  {
    "id": 2164215990,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/14",
    "created_at": "2024-06-13T02:06:46Z",
    "updated_at": "2024-06-13T02:06:46Z",
    "body": "LoAF does fall back to reporting just \"long task\", and as you note in the demo, the first key interaction does report a LoAF.\r\n\r\nI don't think this has anything to do with paints.  For some reason the second long task isn't reported.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment appears to be discussing the functionality of LoAF (Long-Affected Features) and its ability to report tasks, specifically a \"long task\". The commenter is also referencing a demo that seems to indicate a failure with reporting on this specific type of task."
  },
  {
    "id": 2164976440,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/14",
    "created_at": "2024-06-13T08:25:09Z",
    "updated_at": "2024-06-13T10:25:28Z",
    "body": "OK sounds like a Chromium Bug so raised this: https://issues.chromium.org/issues/346918311\r\n\r\n> LoAF does fall back to reporting just \"long task\"\r\n\r\nIs this explicitly documented anywhere in the spec? Can't see it. Should it be?",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing an explicit suggestion for change and improvement, which falls under the category of technical feedback. It's a specific example that describes a potential bug or issue with the current behavior, and the commenter is offering a proposed solution to address it."
  },
  {
    "id": 2165771712,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/14",
    "created_at": "2024-06-13T14:03:24Z",
    "updated_at": "2024-06-13T14:03:24Z",
    "body": "The second paragraph of the intro in this repo:\r\n\r\n> Long animation frames (LoAF), as a revamp of longtasks, aim to assist with that: a LoAF is an indication that at a particular point in time, the browser was congested, in such a way that it took a long time from the beginning of a task until updating the rendering **(or until the point where it was clear that no render was necessary)**.\r\n\r\n(emphasis mine)\r\n\r\nThen the section that [introduces LoAF](https://github.com/w3c/long-animation-frames?tab=readme-ov-file#introducing-loaf) says:\r\n\r\n> It's the time measured between when the main thread started doing any work (see startTime [here](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model)), until it is either [ready to paint](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model:mark-paint-timing) or idle (has nothing to do).\r\n\r\nAnd of course, its well specced:\r\n\r\n* This [english-language paragraph summarizes](https://w3c.github.io/long-animation-frames/#loaf-vs-longtasks)\r\n* I think [this bit](https://w3c.github.io/long-animation-frames/#record-task-end-time) step 6 is it:\r\n\r\n> If the user agent believes that updating the rendering of document\u2019s [node navigable](https://html.spec.whatwg.org/multipage/document-sequences.html#node-navigable) would have no visible effect, then [report frame timing](https://w3c.github.io/long-animation-frames/#report-frame-timing) given document and return.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment is discussing the implementation of a use case related to Long Animation Frames (LoAF), specifically how it aims to assist with issues like long animation frames causing browser congestion. This suggests that the purpose of the code is to address a specific user experience issue, which aligns with the classification as a \"Use Case\"."
  },
  {
    "id": 2165838404,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/14",
    "created_at": "2024-06-13T14:27:04Z",
    "updated_at": "2024-06-13T14:27:04Z",
    "body": "I just did some test in Canary and found that when this symptom happens, all of LoAF measurement is not working at all-- even for tracing.\r\n\r\nSo, it's not that LoAF is choosing not to emit a performance entry, its that we are failing to observe LoAF durations.\r\n\r\nI'll have to run a custom build to see what animation frame timing monitor is observing here.  (e.g. are we still observing tasks but for some reason the attribution is getting accumulated forever without flushing?  Do we stop observing?  Is the monitor destroyed/detached?)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed information about a specific issue encountered during testing, including its reproducibility and potential causes. It also requests that the developer investigate further to resolve the problem."
  },
  {
    "id": 2195416238,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-06-27T18:25:12Z",
    "updated_at": "2024-06-27T18:25:12Z",
    "body": "I agree that this would be a lot more convenient for developers to see line/column instead of char position.  In an earlier prototype that is actually how it worked.\r\n\r\nHowever-- Noam noticed that this was a perf regression, because it requires parsing the text (in order to find all the newline characters).  This isn't something that happens typically and so it is expensive to do automatically.\r\n\r\n---\r\n\r\nI wonder if it could be possible to request this type of parsing explicitly, after the LoAF fires, only once we know there is a client that is interested?",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The commenter suggests adding an option for developers to choose whether to see line/column references instead of character positions in their output. This request aims to improve user experience by providing more relevant information."
  },
  {
    "id": 2196792582,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-06-28T12:24:07Z",
    "updated_at": "2024-06-28T12:24:07Z",
    "body": "Thanks for the reply!\r\n\r\nFor more context, I'm sending the LoAF to an observability tool for later use and I'm trying to link the sourceCharPosition to the matching development file.\r\nAgreed that natively paying that cost for every LoAF is probably not great. A way to opt-in to it would be a good alternative.\r\n\r\nI tried to replicate this in user space by using `fetch` and `only-if-cached` request in order to retrieve the source file content if it exists in the browser cache. I then compute the `sourceLine` and `sourceColumn` from the `sourceCharPosition` provided by the LoAF and it seems to work well.\r\n\r\nHowever it would be even better with the opt-in API you're suggesting.",
    "user": "Miz85",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical feedback on how to improve a solution, specifically recommending a way to handle a certain situation (linking source files to development files) and suggesting an alternative approach for handling it. The tone of the comment is neutral and informative, with no emotional language or personal opinions."
  },
  {
    "id": 2197229669,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-06-28T15:59:35Z",
    "updated_at": "2024-06-28T15:59:35Z",
    "body": "Oh that's a neat strategy to just polyfill on client.  Neat!  I might use\r\nthat!\r\n\r\nI suspect that many scripts are dynamically rendered per request, and/or\r\nminified, and require source mapping (not just to the UN minified file but\r\nalso to original source templates) and this seems best done server side,\r\nanyway.\r\n\r\nIf the script is static, then char position should be sufficient to do the\r\nline mapping on server as well.\r\n\r\nIt's neat to do on client, but I suspect there aren't many cases where it's\r\nactually better, except for local debugging use cases.\r\n\r\nNot sure though-- is there a use case where doing it on client is\r\nspecifically enabling? Ignoring just developer ergonomics?\r\n\r\nOn Fri, Jun 28, 2024, 08:24 Nazim Saouli ***@***.***> wrote:\r\n\r\n> Thanks for the reply!\r\n>\r\n> For more context, I'm sending the LoAF to an observability tool for later\r\n> use and I'm trying to link the sourceCharPosition to the matching\r\n> development file.\r\n> Agreed that natively paying that cost for every LoAF is probably not\r\n> great. A way to opt-in to it would be a good alternative.\r\n>\r\n> I tried to replicate this in user space by using fetch and only-if-cached\r\n> request in order to retrieve the source file content if it exists in the\r\n> browser cache. I then compute the sourceLine and sourceColumn from the\r\n> sourceCharPosition provided by the LoAF and it seems to work well.\r\n>\r\n> However it would be even better with the opt-in API you're suggesting.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/w3c/long-animation-frames/issues/16#issuecomment-2196792582>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AADTZKQ4FVJIVZVHCGQDXC3ZJVIX3AVCNFSM6AAAAABJ53I4OSVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCOJWG44TENJYGI>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> ***@***.***>\r\n>\r\n",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "philosophical",
    "reason": "This comment expresses the author's personal opinion about the value and utility of source character positioning for annotating long animation frames, but does not present a practical solution or technical implementation to achieve it. It also raises questions and challenges existing approaches rather than providing constructive feedback or suggestions."
  },
  {
    "id": 2198219944,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-06-29T14:51:29Z",
    "updated_at": "2024-06-29T14:51:29Z",
    "body": "yes you're absolutely right! However I'm working on an observability tool and I want to collect LoAFs for our users and link to their source code automatically.\r\n\r\nSo my constraints are:\r\n- I don't have access to the minified file on the server side\r\n- I do have access to source maps because users have a way to send them to us through an API\r\n\r\nThis is why I did that way. However it's good enough for a POC but I'm probably gonna hit CORS issues. If the opt-in API you were suggesting existed, I could let our users opt-in to that computation and accept the performance hit as a trade off to being able to monitor LoAFs.",
    "user": "Miz85",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment is requesting for an improvement or modification of existing functionality. The user wants to collect LoAFs (Line-Of-Affair) data from users and link it to their source code automatically, but they need help with handling CORS issues that may arise during this process."
  },
  {
    "id": 2208455290,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-07-04T08:54:41Z",
    "updated_at": "2024-07-04T08:54:41Z",
    "body": "@mmocny Coming back to your idea about performing the parsing only once we know there is a client that is interested. What would be a good way to advocate for that and see if it could actually get included down the line?",
    "user": "Miz85",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment describes a specific use case (advocating for an idea after knowing its potential impact) and provides a suggestion on how to proceed. It does not specifically request a feature or provide feedback, but rather explores a possibility of a client being interested in the proposed solution."
  },
  {
    "id": 2209163877,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-07-04T14:47:35Z",
    "updated_at": "2024-07-04T14:47:35Z",
    "body": "I think you just did :P\r\n\r\n@noamr for thoughts.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment appears to be providing constructive feedback on the code or approach taken, specifically mentioning that it seems like the intended action was a joke (\"I think you just did :P\"). The tone is informal and friendly, suggesting that the commenter is trying to assist in improving something."
  },
  {
    "id": 2209178668,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-07-04T14:55:42Z",
    "updated_at": "2024-07-04T14:55:42Z",
    "body": "I think this is better done in a service-worker than in the browser... Put the service worker between the document and the server that gives you the script, and tee the response stream to some processor that returns an array of line breaks. It should be trivial to create a `get_line_and_col(source_char_position, array_of_line_breaks)` function based on a similar function in chromium code.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is proposing a way to improve the current implementation by separating it from the server-side script and using a service worker for communication between the client and the server. This suggests that the intent is to enhance the user experience or provide additional functionality, rather than focusing on performance optimization or other technical aspects."
  },
  {
    "id": 2214333426,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-07-08T14:55:02Z",
    "updated_at": "2024-07-08T14:55:02Z",
    "body": "Hey @noamr, thank you so much for your reply!  Alright, sounds like a good path forward I'm going to give it a shot.",
    "user": "Miz85",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment appears to be an informal acknowledgement or expression of appreciation from the respondent to someone else (likely Noam R). It serves as a polite way to start the conversation, and its purpose is to begin the interaction."
  },
  {
    "id": 2223146756,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-11T14:52:27Z",
    "updated_at": "2024-07-11T14:52:27Z",
    "body": "Coming back to this, I think a potential way to address this is an additional attribute in {mark|measure}Options that helps filter user timing entries, with one of the options being to include those entries in the buffer only if they contribute to a LoAF (or a LoAF long-script).\r\n\r\nSo a library like NewRelic as mentioned in https://github.com/w3c/long-animation-frames/issues/3#issuecomment-2025930993 could wrap the user's function with `performance.measure(\"user-function\", {filter: \"long-animation-frame\"})` (strawman) and then it would be a much better insight than just the entry point.\r\n\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment provides a proposed solution for improving the analysis of user timing entries, specifically by introducing an additional attribute to filter out LoAF long-script entries from the buffer. It highlights the potential use of a library like NewRelic to achieve this."
  },
  {
    "id": 2225797941,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T15:10:56Z",
    "updated_at": "2024-07-12T15:13:55Z",
    "body": "> with one of the options being to include those entries in the buffer only if they contribute to a LoAF (or a LoAF long-script).\r\n\r\nIt seems to me like you would have to buffer these at first, then clean up these marks and measures afterwards.\r\n\r\nToday, there is no limit to the number of marks/measures in the buffer, so overflow is not really a problem (unless so many are issued that we get into overall memory usage worries).\r\n\r\nI think that means that: just adding marks/measures, leaving them there, then filtering manually, might be sufficient?\r\n\r\nWhat about just a `getEntriesBy*` variant that accepts both a `type` and also a time range (and optionally that this time range can be specified by passing another `entry`)?\r\n\r\nThe usage would be something like:\r\n\r\n- Create a PerformanceObserver for LoAF\r\n- From each LoAF entry observed, ask for the marks/measures that overlap its timing",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment proposes an additional way to handle LoAF (Load Average Over time) data in Performance Observers, specifically allowing filtering by type and/or time range. This is a practical improvement that would make it easier to process and analyze Load Average data."
  },
  {
    "id": 2225806222,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T15:15:24Z",
    "updated_at": "2024-07-12T15:15:24Z",
    "body": "As per your original proposal, Related questions:\r\n\r\n- It seems not so common to me to have active PerformanceObservers for marks/measures, but if someone did have one, would we want to report these LoAF-only entries?\r\n- If we did, would we delay adding these entries into the timeline until after we know if a LoAF happened (i.e. a separate buffer)?\r\n- If we did that, would we wait only until we know a LoAF is being measured, or wait for the LoAF is done measuring (i.e. LoAF always reported first)?",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is requesting an addition of PerformanceObservers for marks/measures in order to report LoAF-only entries in the timeline, while also considering the need to delay reporting these entries until after a LoAF has been measured. This suggests that the intention is to implement new functionality, rather than providing technical feedback or administrative guidance."
  },
  {
    "id": 2225813923,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T15:19:30Z",
    "updated_at": "2024-07-12T15:19:30Z",
    "body": "Also also, there have been requests to add groups/categories/labels to User Timings multiple times for multiple purposes.  I wonder if this really needs to be LoAF specific or if it could just be a generic feature like that?  Then library authors could use as they see fit and might be more creative that we are here?\r\n\r\nI guess the question I would have is: is it likely that a library like NewRelic would want to consume marks/measures that were created by a different app/library or just their own?  Would NewRelic want to share annotations that would be useful to consume by others?  (Such that a common standard us useful?)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment expresses a user's suggestion for improving the LoAF (Language Used for Analysis) format, specifically requesting groups/categories/labels to be added to User Timings. The user also asks about NewRelic's potential interest in consuming and sharing annotations with other libraries or apps."
  },
  {
    "id": 2225870026,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T15:51:54Z",
    "updated_at": "2024-07-12T15:51:54Z",
    "body": "cc @and-oli (maybe some overlap with DevTools extensibility)",
    "user": "rviscomi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment suggests an idea or proposal related to extension of the existing feature, which is characteristic of a feature request."
  },
  {
    "id": 2225953206,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T16:47:18Z",
    "updated_at": "2024-07-12T16:47:18Z",
    "body": "> > with one of the options being to include those entries in the buffer only if they contribute to a LoAF (or a LoAF long-script).\r\n> \r\n> It seems to me like you would have to buffer these at first, then clean up these marks and measures afterwards.\r\n\r\nRight\r\n\r\n> \r\n> Today, there is no limit to the number of marks/measures in the buffer, so overflow is not really a problem (unless so many are issued that we get into overall memory usage worries).\r\n> \r\n> I think that means that: just adding marks/measures, leaving them there, then filtering manually, might be sufficient?\r\n\r\nIt's suboptimal in terms of both efficiency and ergonomics. By doing this we're encouraging people to potentially add a massive amount of events to the buffer and these memory (and lookup efficiency) problems can potentially explode. It also adds a lot of noise to the performance timeline and to traces.\r\n\r\n> \r\n> What about just a `getEntriesBy*` variant that accepts both a `type` and also a time range (and optionally that this time range can be specified by passing another `entry`)?\r\n> \r\n> The usage would be something like:\r\n> \r\n> * Create a PerformanceObserver for LoAF\r\n> * From each LoAF entry observed, ask for the marks/measures that overlap its timing\r\n\r\nSee above\r\n\r\n> As per your original proposal, Related questions:\r\n> \r\n> * It seems not so common to me to have active PerformanceObservers for marks/measures, but if someone did have one, would we want to report these LoAF-only entries?\r\n\r\nI think not, perhaps attach them to the `loaf.scripts` entry?\r\n\r\n> * If we did, would we delay adding these entries into the timeline until after we know if a LoAF happened (i.e. a separate buffer)?\r\n\r\nYea definitely.\r\n\r\n> * If we did that, would we wait only until we know a LoAF is being measured, or wait for the LoAF is done measuring (i.e. LoAF always reported first)?\r\n\r\nPerhaps in the same callback, as in if you observe both types you'd get them concurrently? Otherwise in `PerformanceScriptEntry` which is perhaps more suitable.\r\n\r\n> Also also, there have been requests to add groups/categories/labels to User Timings multiple times for multiple purposes. I wonder if this really needs to be LoAF specific or if it could just be a generic feature like that? Then library authors could use as they see fit and might be more creative that we are here?\r\n\r\nI don't think this is related. One is arbitrary metadata and the other is a capturing condition.\r\n\r\n> \r\n> I guess the question I would have is: is it likely that a library like NewRelic would want to consume marks/measures that were created by a different app/library or just their own? Would NewRelic want to share annotations that would be useful to consume by others? (Such that a common standard us useful?)\r\n\r\nI feel that those are parallel question.\r\nNewRelic can use mark/measure names or new metadata we define to filter out what they care about, but that won't help with exploding the buffer with LoAF-attribution-tracing.\r\n\r\nAn additional thing I would propose for this type of mark/measure is that you can't mark/measure it before/after the fact, as in the timestamp has to be now or at least within the current script entry.\r\n\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides suggestions and reasons for improving the way marks/measures are handled in LoAF (Long-running Function) and filtering them from a buffer. The commenter suggests alternative approaches such as using `getEntriesBy*` variants with time ranges, attaching entries to `loaf.scripts`, and proposing a separate buffer for LoAF-specific data. They also raise questions about compatibility between libraries and their ability to consume marks/measures created by other applications or libraries."
  },
  {
    "id": 2225961981,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T16:53:12Z",
    "updated_at": "2024-07-12T16:53:28Z",
    "body": "All of that makes sense in isolation, it just feels needlessly coupled to LoAF data.\r\n\r\nWhat if I wanted to review these marks when they overlap with an Event Timing (but didn't trigger LoAF specifically because delays are from after-main-presentation)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment expresses a desire for the feature in question, which is related to marking events on LoAF. It also provides context about when this might be useful (\"when they overlap with an Event Timing\"). This suggests that the person wanting the feature is seeking it as a solution or utility rather than purely for technical reasons or administrative purposes."
  },
  {
    "id": 2225968333,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T16:57:34Z",
    "updated_at": "2024-07-12T16:57:34Z",
    "body": "> All of that makes sense in isolation, it just feels needlessly coupled to LoAF data.\r\n> \r\n> What if I wanted to review these marks when they overlap with an Event Timing (but didn't trigger LoAF specifically because delays are from after-main-presentation)\r\n\r\nI agree, I think the API should be attachable to any platform entry type where it makes sense, not coupled with LoAF specificially, or at least written in a way that's extendable to do that.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is suggesting a modification to the existing system (LoAF) and proposing an extension for more flexibility, which is characteristic of feature requests."
  },
  {
    "id": 2225988018,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T17:09:21Z",
    "updated_at": "2024-07-12T17:09:21Z",
    "body": "Can we evolve your proposal slightly to something like this, then?\r\n\r\n- performance.mark / measure merely supports `buffered:false`, or something like it, rather than explicitly listing the type of entry to pair with.\r\n  - This has also been independently requested.\r\n  - it seems some of the performance issues with User Timings is around the need to clone various data (like `details`) in order to persist on the timeline.  But several use cases don't need that feature and only conditionally observe.\r\n- PerformanceObserver supports `{ observeUserTimings: true }` or even `{ type: 'entry-type', observeNestedType: 'other-entry-type' }`, or something like it.\r\n  - This becomes like a temporary nested observer which is only observes the nested type when the main entry type is actively being observed.\r\n  - Perhaps instead of `list.getEntries()` you would need to `list.getNestedEntries()`\r\n\r\n(Wonder if this would be useful to e.g. measure all Event Timings and then only nested LoAF entries, and then only nested user timings of those...)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The commenter is requesting a minor change in the current implementation to make it more flexible and able to accommodate different use cases."
  },
  {
    "id": 2226238225,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T19:34:18Z",
    "updated_at": "2024-07-12T19:37:18Z",
    "body": "> Can we evolve your proposal slightly to something like this, then?\r\n> \r\n> * performance.mark / measure merely supports `buffered:false`, or something like it, rather than explicitly listing the type of entry to pair with.\r\n>   \r\n>   * This has also been independently requested.\r\n>   * it seems some of the performance issues with User Timings is around the need to clone various data (like `details`) in order to persist on the timeline.  But several use cases don't need that feature and only conditionally observe.\r\n> * PerformanceObserver supports `{ observeUserTimings: true }` or even `{ type: 'entry-type', observeNestedType: 'other-entry-type' }`, or something like it.\r\n>   \r\n>   * This becomes like a temporary nested observer which is only observes the nested type when the main entry type is actively being observed.\r\n>   * Perhaps instead of `list.getEntries()` you would need to `list.getNestedEntries()`\r\n> \r\n> (Wonder if this would be useful to e.g. measure all Event Timings and then only nested LoAF entries, and then only nested user timings of those...)\r\n\r\nRiffing on that, perhaps if we add `{ buffered: false }`, we can do the trick where if you have an observer that's registered to both LoAF (or event-timing) and user-timing, the user timing entries would be buffered to the LoAF, and the LoAF would be buffered to the event-timing entry if applicable, and the `entries` object in the callback would have some utility functions to correlate, and call it a day?\r\n\r\n```js\r\n// in your function\r\nperformance.mark(functionName, { buffered: false });\r\n\r\n// the observer\r\nconst observer = new Performance Observer(entries => {\r\n  const [loaf] = entries.getEntriesByType(\"long-animation-frame\");\r\n  const [script] = loaf.scripts;\r\n  const marks = entries.getOverlappingEntries(script, {type: \"mark\" });\r\n});\r\nobserver.observe({type: \"long-animation-frame\"});\r\nobserver.observe({type: \"mark\" });\r\n```",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific suggestions and examples for improving the code, pointing out technical issues or inefficiencies that could be improved upon."
  },
  {
    "id": 2226517588,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T23:21:07Z",
    "updated_at": "2024-07-12T23:21:07Z",
    "body": "I like that!\r\n\r\n---\r\n\r\nRegarding `{ buffered: false }` I think that might have been a bad suggestion in hindsight.\r\n\r\n1. You would still pay the performance cost of creating the entry for this use case, even if lifetime is short, and even if it's a convenient way to manage cleanup\r\n2. By not buffering at all, it motivates developers to load PO's eagerly, which we don't want to motivate\r\n3. A normal PO for just \"mark\" types I guess would see all the marks in real time.  I know I said PO's for marks aren't as common, but that might still be undesired here.\r\n\r\nI think we need to go back to the idea of this mark type being detached from the typical perf timeline, yet still allow limited buffering (Perhaps more constrained than typical user timings).",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment discusses a specific use case related to managing records or items, and provides feedback on a suggested approach that deviates from standard best practices. It also highlights potential drawbacks of the proposed solution."
  },
  {
    "id": 2228407466,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-15T12:37:51Z",
    "updated_at": "2024-07-15T12:37:51Z",
    "body": "Reciting internal conversation with @mmocny: I feel that turning this into a generic user-timing function has enough limitations to make it suboptimal:\r\n- It's hard to do efficiently without clobbering existing receivers of user-timing or creating new GCed objects\r\n- It loses information about the function we want to trace, such as its source location.\r\n\r\nSo instead, I propose to go back to the original more narrow-scoped proposal, to annotate functions for use in LoAF:\r\n```js\r\nfunction addEventListenerWithWrapper(event_type, internal_function) {\r\n   const wrapped_internal_function = performance.bind(internal_function);\r\n   addEventListener(event_type, wrapped_internal_function);\r\n}\r\n```\r\n\r\nWhere `performance.bind` will have the exact signature of `Function.prototype.bind` but would wrap the internal function in measuring monotonic timestamps (`performance.now()`), and if the result is >5ms this function would appear in LoAF as a long script.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on an existing code snippet, suggesting improvements to make it more efficient and accurate. The author specifically mentions the potential limitations of using `performance.now()` for timing purposes and recommends returning to the original proposal with annotations instead."
  },
  {
    "id": 2228457461,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-15T13:03:46Z",
    "updated_at": "2024-07-15T13:03:46Z",
    "body": "Will there be a mechanism to provide a user-defined name, or will it use `function.name`?\r\n",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is requesting a specific feature (adding the ability to define a custom username for users) that would enhance the overall functionality of the application."
  },
  {
    "id": 2228536472,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-15T13:41:22Z",
    "updated_at": "2024-07-15T13:41:22Z",
    "body": "> Will there be a mechanism to provide a user-defined name, or will it use `function.name`?\r\n\r\nI think we can do that but then we can't use additional arguments for `bind`. Perhaps that's ok",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment expresses a suggestion and implies the need for an alternative approach to handling function names in functions with bind, potentially making it less efficient or flexible."
  },
  {
    "id": 2238528101,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-19T07:15:06Z",
    "updated_at": "2024-07-19T07:15:06Z",
    "body": "Summarizing WG discussion:\r\n- There is a big ask for this, some people avoid using LoAF because of this issue.\r\n- The issue is split into two:\r\n  (1) attribution: with wrapper functions it seems like \"it's the wrapper's fault that this script is long\"\r\n  (2) diagnostics: a script entry point is not always granular enough.\r\n- In addition, people were complaining about lack of support for source-maps in LoAF and that that constraints the usefulness of source location.\r\n\r\nFor (1), we need something reliable like function wrapping, as custom marks/measures don't give source location.\r\nFor (2), something like a low-overhead mark/measure that ties to particular entries is perhaps preferable as not everything is a \"long function\".",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback and suggestions for improving LoAF, highlighting potential issues with attribution and diagnostics, and suggesting alternative solutions (e.g., custom marks/measures, low-overhead mark/measure). It offers constructive criticism to the WG discussion."
  },
  {
    "id": 2238550189,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-19T07:30:17Z",
    "updated_at": "2024-07-19T07:30:39Z",
    "body": "A shape that came to mind:\r\n\r\n```js\r\n// entryTypes can be LoAF, event, measure, script\r\nconst tracing = new PerformanceTracing({threshold, entryTypes, detail})\r\n\r\n// This adds a mark/measure that gets applied to overlapping entries\r\n// from the given list\r\ntracing.mark(label);\r\ntracing.measure(label);\r\n\r\n// This creates a bound function that reports the labeled trace,\r\n// and also appears as a `PerformanceScriptTiming` entry in LoAF\r\ntracing.bind(wrapped_function, label)\r\n\r\nPerformance{User|LongAnimationFrame|Script|Event}Timing.traces\r\n    PerformanceTraceEntry (start, duration, name, detail)\r\n```\r\n\r\nThe advantage of creating a `PerformanceTracing` object or some such in advance is that we don't incur the overhead of creating options dictionaries every time we trace.\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The code snippet demonstrates an example use case for using the `PerformanceTracing` object to track performance-related events and mark/measure the tracing process. It sets up a tracing system with specific entry types, marks and measures, and binds functions to labels, all of which are useful in understanding how different parts of a JavaScript application perform over time."
  },
  {
    "id": 2245347487,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/11",
    "created_at": "2024-07-23T14:02:22Z",
    "updated_at": "2024-07-23T14:02:22Z",
    "body": "Would be great to log id / data-attribute / something else for inline scripts. We have a lot of inline script inside our page, and loaf entries for them are useless.",
    "user": "proofyman",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The commenter is suggesting an additional feature or improvement that could enhance the functionality and usability of their system. This type of comment typically receives attention from developers or designers who can consider implementing the requested change."
  },
  {
    "id": 2271663914,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/17",
    "created_at": "2024-08-06T16:16:01Z",
    "updated_at": "2024-08-06T16:16:01Z",
    "body": "I think that the `setTimeout` is expected to be 0 here, and the `event-listener` is expected to be non-0 here (assuming you called `alert()` directly from the event listener)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific information about a code snippet or design decision that suggests a potential issue with the functionality of the application. It does not seem to be related to user experience, feature requests, administrative tasks, conclusions, philosophical discussions, or unknown reasons."
  },
  {
    "id": 2271669547,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/17",
    "created_at": "2024-08-06T16:19:09Z",
    "updated_at": "2024-08-06T16:19:09Z",
    "body": "That's right, here's the button source:\r\n\r\n```html\r\n<button onclick=\"alert('This no longer blocks INP as of Chrome 127! \ud83c\udf89')\">\r\n  Alert\r\n</button>\r\n```",
    "user": "rviscomi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical assistance or guidance regarding a specific code or feature, which falls under the category of Technical Feedback."
  },
  {
    "id": 2271694693,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/17",
    "created_at": "2024-08-06T16:32:26Z",
    "updated_at": "2024-08-06T16:32:26Z",
    "body": "Ah, I know there are some oddities with inline scripts and LoAF.  If you changed to use `addEventListener` would it be any different?",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides an observation about the current implementation of inline scripts in a specific application (likely a Rich Text Editor or similar tool) and suggests that switching to using `addEventListener` instead might improve readability. It does not ask for new functionality, propose a change to existing behavior, request additional information, provide a conclusion, offer a philosophical perspective, or request administrative action."
  },
  {
    "id": 2271705764,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/17",
    "created_at": "2024-08-06T16:38:57Z",
    "updated_at": "2024-08-06T16:38:57Z",
    "body": "Updated:\r\n\r\n```js\r\nloafAlert.addEventListener('click', () => {\r\n  alert('This no longer blocks INP as of Chrome 127! \ud83c\udf89');\r\n});\r\n```\r\n\r\nStill repros:\r\n\r\n```json\r\n{\r\n    \"name\": \"script\",\r\n    \"entryType\": \"script\",\r\n    \"startTime\": 13446.699999988079,\r\n    \"duration\": 3763,\r\n    \"navigationId\": \"e754322a-fc20-4220-80f0-dfda1ffebbde\",\r\n    \"invoker\": \"BUTTON#loafAlert.onclick\",\r\n    \"invokerType\": \"event-listener\",\r\n    \"windowAttribution\": \"self\",\r\n    \"executionStart\": 13446.699999988079,\r\n    \"forcedStyleAndLayoutDuration\": 0,\r\n    \"pauseDuration\": 0,\r\n    \"sourceURL\": \"https://inp-demo-dialog.glitch.me/\",\r\n    \"sourceFunctionName\": \"\",\r\n    \"sourceCharPosition\": 37\r\n}\r\n```",
    "user": "rviscomi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The provided code snippet includes an update to the `loafAlert` element, which is likely a JavaScript or React-related issue. This change would improve functionality by preventing the alert from blocking input events in Chrome 127 and above."
  },
  {
    "id": 2276429407,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/18",
    "created_at": "2024-08-08T18:34:47Z",
    "updated_at": "2024-08-08T18:34:47Z",
    "body": "Might want to file a crbug instead?",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The commenter is suggesting a different process for reporting and potentially resolving issues, which implies that they are proposing an alternative approach rather than merely asking if something should be done."
  },
  {
    "id": 2276433537,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/18",
    "created_at": "2024-08-08T18:37:41Z",
    "updated_at": "2024-08-08T18:37:41Z",
    "body": "Yeah true, not a spec bug",
    "user": "rviscomi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical clarification and support for an existing code or implementation. It suggests an alternative solution or way of doing things that may improve the current situation but does not describe a problem to be fixed (spec bug) nor a new feature request. It's also too brief to be considered an administrative comment (issue resolution), as it doesn't address the actual issue at hand, and its tone is more conversational than philosophical (description of a principle or concept)."
  },
  {
    "id": 2276461758,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/18",
    "created_at": "2024-08-08T18:54:57Z",
    "updated_at": "2024-08-08T18:54:57Z",
    "body": "Reopened https://issues.chromium.org/40275918",
    "user": "rviscomi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment is providing feedback on an existing issue (40275918) in the Chromium codebase, specifically reporting a problem and suggesting a solution. This is typically what technical feedback is about."
  },
  {
    "id": 2307330972,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/19",
    "created_at": "2024-08-23T15:33:09Z",
    "updated_at": "2024-08-23T15:36:14Z",
    "body": "Mostly I would expect this is a chromium bug, but I do have some spec questions that this raises:\r\n\r\nWould we expect this to be the time of the first event **dispatched** in the animation frame, or, the time of the first event **created** and then dispatched at any time in the frame.\r\n\r\n(Event dispatch can get re-ordered in limited ways, based on priority or vsync alignment or how synthetic gestures are layered.)\r\n\r\nIn [the chromium implementation](https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/animation_frame_timing_monitor.cc;l=727;drc=82dff63dbf9db05e9274e11d9128af7b9f51ceaa;bpv=1;bpt=1) we just take the platform timestamp of the first UI event dispatched, and don't use the earliest value of any UIEvent dispatched (and I guess those values are also wrong somehow).",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment is asking for clarification on how the timing of animation events in Chromium is determined, specifically which point in time it would be expected to dispatch an event. This question is a use case because it is seeking information that will likely affect how developers interact with and understand the behavior of animations in Chromium."
  },
  {
    "id": 2331894466,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/17",
    "created_at": "2024-09-05T14:45:37Z",
    "updated_at": "2024-09-05T14:45:37Z",
    "body": "The demo page won't consistently report long INP now that the Event Timing duration was fixed for alerts.  You can still make it long and get logged (via input delay) by interacting with the button while the page is blocked.\r\n\r\nAlternatively, just open DevTools console and log all LoAFs with a script for `event-listener`:\r\n\r\n```js\r\nnew PerformanceObserver(list => list.getEntries()\r\n  .flatMap(entry => entry.scripts)\r\n  .filter(s => s.invokerType == \"event-listener\")\r\n  .forEach(s => console.log(s)))\r\n.observe({ type: 'long-animation-frame' });\r\n```\r\n\r\n(It still reproduces, fwiw)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The developer wants to ensure the demo page consistently reports long INP (Input) frames even after adjusting the Event Timing duration for alerts. They suggest using DevTools console logging or a script to achieve this."
  },
  {
    "id": 2447599886,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/20",
    "created_at": "2024-10-30T15:46:06Z",
    "updated_at": "2024-10-30T15:46:06Z",
    "body": "One alternative: We expose timing details for `script` that are >5ms, but what about exposing a `totalScriptDuration` which sums the durations for also scripts which are faster, and make this duration NOT include durations for work such as GC (not sure if all GC is created equal and worth ignoring, i.e. idle time GC vs GC during hot loops).\r\n\r\nThen you could compare `totalScriptDuration` for the LoAF against the `duration` of the LoAF in order to get a general sense: how much of the time for this LoAF is accountable?\r\n\r\nThere might be many reasons beyond GC that affect LoAF durations, and where optimizing scripts wouldn't help.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment suggests a feature or an idea to expose additional information about script execution times. It proposes a way to compare the total duration of a LoAF (Load Average Fraction) with its duration in terms of time spent executing scripts, which could help identify performance bottlenecks and optimize code more effectively."
  },
  {
    "id": 2470414631,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/10",
    "created_at": "2024-11-12T12:33:21Z",
    "updated_at": "2024-11-12T12:33:21Z",
    "body": "Even if it's not actionable by developers I think it's worth exposing in someway\r\n\r\nThis is a trace from a 'clean' Chrome profile with two extensions installed \u2013 web vitals one, and other that creates marks / measures for the DevTools Extensibility API to collect \r\n\r\nhttps://trace.cafe/t/cUv2LuXFKq\r\n\r\nLooking at the Custom Tracks we can see the Long Tasks API exposes there's some activity happening even though there's no matching attribution in the corresponding LoAF\r\n\r\nEven if I can't do anything about it as a developer having a clear indication that the time was an extension or even just if there was just a bucket of time that says 'some tasks that we can't tell you about ran' would be helpful because then I know I can't debug them and move onto other things.\r\n\r\n",
    "user": "andydavies",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on the trace provided, suggesting potential issues with the attribution of time spent using an extension. The author is looking for a way to provide more context or indication that the time was attributed to an extension rather than just \"some tasks\". This type of feedback is helpful for developers who can't make changes but need clear guidance on what's happening in their codebase."
  },
  {
    "id": 2470434424,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/10",
    "created_at": "2024-11-12T12:42:35Z",
    "updated_at": "2024-11-12T12:43:08Z",
    "body": "> the Long Tasks API exposes there's some activity\r\n\r\nEven though LoAF Scripts are ~Tasks as per Long Tasks, I know there were some differences between in the details because that API had some unintended cruft.  Much of that was related to splitting Tasks into distinct scripts.  But was there also some \"leakage\" of information related to time spent in extensions?\r\n\r\n> Even if I can't do anything about it as a developer having a clear indication that the time was an extension or even just if there was just a bucket of time that says 'some tasks that we can't tell you about ran' would be helpful because then I know I can't debug them and move onto other things.\r\n\r\nI think this is interesting.  If there is a gap of unaccounted time, it could be:\r\n- scheduling tasks, but for a different iframe and so reported to a different performance timeline\r\n- scheduling work, but outside of scripts (I think animations layout?)\r\n- scheduling scripts, but \"hidden\" i.e. because extensions\r\n- literally Idle time",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment is discussing the usage and implications of the Long Tasks API, specifically how it handles \"leakage\" or unaccounted time in tasks. It's providing a practical example and analysis to support the idea that there might be some gaps in time reported by developers when they can't determine whether an extension or some other reason caused the delay."
  },
  {
    "id": 2470833340,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/10",
    "created_at": "2024-11-12T15:25:33Z",
    "updated_at": "2024-11-12T15:25:33Z",
    "body": "It sounds reasonable to me to add some opaque attribution about non-actionable things",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is suggesting adding more transparency around what actions are not taken, which implies that the commenter believes it would be beneficial or helpful for users. This aligns with the goal of feature requests, which are typically new ideas or enhancements to existing software."
  },
  {
    "id": 2478455013,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-11-15T10:01:20Z",
    "updated_at": "2024-11-15T10:01:20Z",
    "body": "Hi again! I found a way around this in the end but I do have a question on what `sourceCharacterPosition` represents.\r\nEspecially in the context of SPAs e.g. a React app it can point to a position in a minified file. When successfully unminifying it, it sometimes points to `import` statements for ex. which seems confusing.\r\n\r\nSo my question on this would be, is the sourceCharPosition pointing to beginning of a task that is executed by the browser? Meaning that in order to understand the performance issue we would need to also know the rest of the code executed in that task. ",
    "user": "Miz85",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment seeks clarification on a specific technical aspect (the purpose of `sourceCharacterPosition`) related to performance optimization in SPAs, specifically React applications."
  },
  {
    "id": 2478463656,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-11-15T10:05:46Z",
    "updated_at": "2024-11-15T10:05:46Z",
    "body": "> Hi again! I found a way around this in the end but I do have a question on what `sourceCharacterPosition` represents. Especially in the context of SPAs e.g. a React app it can point to a position in a minified file. When successfully unminifying it, it sometimes points to `import` statements for ex. which seems confusing.\r\n> \r\n> So my question on this would be, is the sourceCharPosition pointing to beginning of a task that is executed by the browser? Meaning that in order to understand the performance issue we would need to also know the rest of the code executed in that task.\r\n\r\nIt points to the \"entry point\" function, see key point in https://developer.chrome.com/docs/web-platform/long-animation-frames#better-attribution\r\n\r\nAlso see issue #3 which we're currently working on.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides specific technical information about a Chrome extension's functionality, addressing a potential performance issue with the `sourceCharacterPosition` value. It questions the purpose of this value and suggests that it is related to execution tasks in the browser, which is a relevant detail for debugging or optimizing web applications."
  }
]