[
    {
        "id": 1969205691,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/2",
        "created_at": "2024-02-28T15:16:43Z",
        "updated_at": "2024-02-28T15:16:43Z",
        "body": "Trying to take a crack at #3",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 1969284901,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/4",
        "created_at": "2024-02-28T15:53:38Z",
        "updated_at": "2024-02-28T15:53:38Z",
        "body": "One solution: add to the Credential Manager API to allow a \"if this interface Credential is present, remove this other interface Credential\". This may also be done as a non-normative recommendation of this Credential type to not be included in the Credential Chooser if FedCM is there.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 1969302782,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/4",
        "created_at": "2024-02-28T16:01:48Z",
        "updated_at": "2024-02-28T16:01:48Z",
        "body": "Another solution: infer a CrossSiteCookieAccessCredential request from a FedCM credential's request. The IDP origin should be easy to pick out and the \"auth-link\" can be taken from the equivalent field in a FedCM request that allows a not-yet logged in IDP to work.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 1978876008,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/5",
        "created_at": "2024-03-05T14:17:19Z",
        "updated_at": "2024-03-05T14:17:19Z",
        "body": "One solution would be to include a link tag, well-known resource, or uri in the request to allow a domain to show up for the redirect case. This would require a cross-origin request to the IDP before UI as shown up though. However if it is well-known we would mitigate the harms from link decoration. ",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 1978886511,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/5",
        "created_at": "2024-03-05T14:22:24Z",
        "updated_at": "2024-03-05T14:22:24Z",
        "body": "I find this overall a fundamental challenge of supporting the cold redirect case. \r\n\r\nTo show an IDP origin in UI we should have IDP opt-in. To have IDP opt-in we need to send them a request (if we haven't been to the page before). To send them a request we need user opt-in. To have user opt-in we need to show the IDP origin. This is a cycle!\r\n\r\nI believe the weakest point of the cycle is \"To send them a request we need user opt-in.\" Especially since the request is partitioned. This means that the solution space above would be the best way to break the cycle. ",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2009431261,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/4",
        "created_at": "2024-03-20T12:15:42Z",
        "updated_at": "2024-03-20T12:15:42Z",
        "body": "Another solution: make this an operating mode of FedCM, sharing the \"identity\" namespace. It will require the spec to monkey patch FedCM and will only be used when there is no `configURL` argument.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2009449517,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/7",
        "created_at": "2024-03-20T12:26:13Z",
        "updated_at": "2024-03-20T12:26:13Z",
        "body": "To make this simpler we should make the account info have an expiration option and an ability to delete the Credential.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2009456695,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/4",
        "created_at": "2024-03-20T12:30:15Z",
        "updated_at": "2024-03-20T12:30:15Z",
        "body": "A complication of that last solution is that we need to make sure the button-flow and navigation aspects of this proposal are coherent. This is not insurmountable. We want to only have one argument and have similar user journeys for each.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2021152996,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/8",
        "created_at": "2024-03-26T18:10:14Z",
        "updated_at": "2024-03-26T18:10:14Z",
        "body": "Actually, I don't think the `connected accounts set` makes sense as a trust signal for this Credential, since it can be stored and collected. This permits finer control over where storage access can be granted. \r\n\r\nThe key thing I think should be preserved here is whether or not the domain is [preventing silent access](https://w3c.github.io/webappsec-credential-management/#abstract-opdef-prevent-silent-access). If a site goes out of its way to call `navigator.credentials.preventSilentAccess()`, then we shouldn't be using things from the credential store without a dialog.\r\n\r\nWe could add that as a constraint to the proposal from Google: https://github.com/explainers-by-googlers/storage-access-for-fedcm\r\n\r\nor we could match that explainer to this syntax.\r\n\r\n@johannhof - this was really your issue - thoughts?\r\n\r\n ",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2021171607,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/7",
        "created_at": "2024-03-26T18:20:26Z",
        "updated_at": "2024-03-26T18:20:26Z",
        "body": "Since this is a credential that can be \"collected\" it should have a (CredentialUserData)[https://w3c.github.io/webappsec-credential-management/#credentialuserdata-mixin] mixin to provide this. We get it for free. \r\n\r\nDeletion and expiration are actually a little harder. Deletion is not currently supported in the WebCredAPI. Expiration can be done as a per-credential-feature though. And that could be used to do a kind of ad-hoc deletion. Let's do that for now.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2047390797,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/8",
        "created_at": "2024-04-10T12:16:11Z",
        "updated_at": "2024-04-10T12:16:11Z",
        "body": "That makes sense to me, I think. I filed the issue above to track this.",
        "user": "johannhof",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2093177438,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/14",
        "created_at": "2024-05-03T14:50:50Z",
        "updated_at": "2024-05-03T14:50:50Z",
        "body": "Does this still look good to you? @johannhof ",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2093191462,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/1",
        "created_at": "2024-05-03T14:57:41Z",
        "updated_at": "2024-05-03T14:57:41Z",
        "body": "This actually isn't a problem, and we may graduate to a PR on a WG repo",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2093192110,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/14",
        "created_at": "2024-05-03T14:58:03Z",
        "updated_at": "2024-05-03T14:58:03Z",
        "body": "This also solves #8 ",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2095746946,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/14",
        "created_at": "2024-05-06T11:00:46Z",
        "updated_at": "2024-05-06T11:00:46Z",
        "body": "This still seems good - I will have to think about the utility of the pending requests a little more but I'm okay keeping it in the explainer for now :)",
        "user": "johannhof",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2100399438,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/8",
        "created_at": "2024-05-08T11:48:49Z",
        "updated_at": "2024-05-08T11:48:49Z",
        "body": "I think this is resolved, but leaving open until we discuss in the CG.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2110326689,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/19",
        "created_at": "2024-05-14T14:01:39Z",
        "updated_at": "2024-05-14T14:01:39Z",
        "body": "I'll rename both dynamic_via_cors and origin_allowlist to be in relation to their purpose. The following paragraph would replace the start of \"Identity Provider API, Creating a Credential\" and gives their new names and reasoning.\r\n\r\n>The identity provider needs to specify at least one of two arguments when creating the credential (`effectiveOrigins` or `effectiveQueryURL`) to tell the browser which origins the credential is [effective](https://w3c.github.io/webappsec-credential-management/#credential-effective) for. A list of origins may be provided to `effectiveOrigins` if the list of relying parties may be made public and is known ahead of time. If the list of relying parties is dynamic or private, the identity provider may provide an HTTP-endpoint that will respond successfully to a CORS request from the relying party with `Sec-Fetch-Dest: web-identity` if the relying party can use the credential at that time.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2110701718,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/21",
        "created_at": "2024-05-14T16:55:09Z",
        "updated_at": "2024-05-14T16:55:09Z",
        "body": "This can't be tested yet, unfortunately. I will update the group once it can!",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2110822452,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/21",
        "created_at": "2024-05-14T18:05:49Z",
        "updated_at": "2024-05-14T18:05:49Z",
        "body": "No worries. Thanks!",
        "user": "philsmart",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2111315725,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/19",
        "created_at": "2024-05-14T23:19:58Z",
        "updated_at": "2024-05-14T23:19:58Z",
        "body": "Sounds reasonable.  Perhaps..\r\n\r\n> [...] the identity provider may provide an HTTP endpoint *with `effectiveQueryURL`*. That HTTP endpoint needs to respond successfully [...]",
        "user": "martinthomson",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2130143124,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/22",
        "created_at": "2024-05-24T18:33:35Z",
        "updated_at": "2024-05-24T18:33:35Z",
        "body": "Taking a common string to make any credential that is stored with it effective would be great!",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2140314630,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-30T17:11:30Z",
        "updated_at": "2024-05-30T17:11:30Z",
        "body": "Con: this rules out the enterprise use case of many IDPs on a single site.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2140400273,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-30T17:32:24Z",
        "updated_at": "2024-05-30T17:32:24Z",
        "body": "Con: this could be circumvented for widget mode by collecting with \"silent\" mediation and opening a popup anyway.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2140402291,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-30T17:33:02Z",
        "updated_at": "2024-05-30T17:33:02Z",
        "body": "Pro: this more closely matches FedCM's discovery pattern for button mode",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2140404574,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-30T17:33:44Z",
        "updated_at": "2024-05-30T17:33:44Z",
        "body": "Pro: This provides a more informative UI to the user in the not-yet-logged-in use case",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2140487672,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-30T17:59:56Z",
        "updated_at": "2024-05-30T18:01:35Z",
        "body": "Important questions:\r\n\r\nShould we make the navigation gated by consent or constrain the navigation?\r\nShould the prompt be before or after the login popup is shown?\r\nWhich is worse, a \"your account on auth.example.com\" prompt for not-yet-logged-in-users or introducing a hard requirement on a site-level .well-known and making us keep the requestParameters function?\r\n",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2140490998,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-30T18:00:57Z",
        "updated_at": "2024-05-30T18:00:57Z",
        "body": "Con: no annotations allowed on the login url, so we would need to add request data parameters and could not remove the `pendingRequests` call",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2140527666,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/24",
        "created_at": "2024-05-30T18:11:56Z",
        "updated_at": "2024-05-30T18:11:56Z",
        "body": "Actually, we don't even need the DNS option because this is a per-origin .well-known",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2140586575,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/24",
        "created_at": "2024-05-30T18:28:48Z",
        "updated_at": "2024-05-30T18:28:48Z",
        "body": "But more generic opt-in mechanisms would be worth having. Also, we can avoid forcing a content-type",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2140592037,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-30T18:30:13Z",
        "updated_at": "2024-05-30T18:30:13Z",
        "body": "Con: We couldn't even have pendingRequests! we would need to have the IDP store all potential credentials on login, not knowing the RP. I don't think this works, because we need to provide a token on store.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2140663440,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/23",
        "created_at": "2024-05-30T18:48:30Z",
        "updated_at": "2024-05-30T18:48:30Z",
        "body": "If we do  #27, then we can similarly rely on URL parameters in the loginURL and close this",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2142012525,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-31T12:38:07Z",
        "updated_at": "2024-05-31T12:38:07Z",
        "body": "@samuelgoto : I think there may be a critical issue here. The IDP needs to know who the RP is when minting a credential under our model. That was made to work (and opened up the timing attack) in FedCM by splitting out the token and accounts endpoints and providing minimal credential and referrer information to them. This model has a single round trip, so I don't think that a RP-blind loginURL works. Thoughts?",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2142292449,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-31T14:09:56Z",
        "updated_at": "2024-05-31T14:09:56Z",
        "body": "> The IDP needs to know who the RP is when minting a credential under our model\r\n\r\nWhat for? Wasn't it the case that the IdP could `store` a credential while logging in the user, before the `get` flow gets initiated by the RP?",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2142379715,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-31T14:33:03Z",
        "updated_at": "2024-05-31T14:33:03Z",
        "body": "I was assuming that the credential's `token` may need some RP specific information in it in some use cases, as in indie auth's use of it.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2142450762,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-31T14:59:00Z",
        "updated_at": "2024-05-31T14:59:00Z",
        "body": "Isn't the `token` something that is produced **after** a browser prompt, through the `id assertion endpoint` or through the SAA auto grant?",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2142512287,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-31T15:33:44Z",
        "updated_at": "2024-05-31T15:33:44Z",
        "body": "I have been treating the IDP page as the `id assertion endpoint` (as well as account chooser), so that you can use a credential obtained via Lightweight FedCM the same as one from regular FedCM- otherwise there can be no `token` member on the lightweight credential. \r\n\r\nAnother reason to expose the RP is that this allows the authorization flow to work in the same IDP-controlled window.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2142522501,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-05-31T15:40:07Z",
        "updated_at": "2024-05-31T15:40:07Z",
        "body": "I'm not sure I'm following you ... Indie Auth works fine with a login-url that is RP agnostic in the well known file ... And it could work equally well with a light weight credential store AND and id assertion endpoint.",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2145883230,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/28",
        "created_at": "2024-06-03T18:41:08Z",
        "updated_at": "2024-06-03T18:41:08Z",
        "body": "Thanks!",
        "user": "johannhof",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2243397149,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-07-22T16:48:54Z",
        "updated_at": "2024-07-22T16:48:54Z",
        "body": "Actually reopening as this is now an open question.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2243398212,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/30",
        "created_at": "2024-07-22T16:49:33Z",
        "updated_at": "2024-07-22T16:49:33Z",
        "body": "This is actually completely fine by CredMan definitions.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2243399117,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/22",
        "created_at": "2024-07-22T16:50:05Z",
        "updated_at": "2024-07-22T16:50:05Z",
        "body": "Covered by #31",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2271631673,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-08-06T15:58:53Z",
        "updated_at": "2024-08-06T15:58:53Z",
        "body": "As you mentioned, this is equivalent to window.open from a privacy perspective.\r\n\r\nBut my question is, window.open may eventually get some kind of bounce tracking protection (or maybe already does, in Firefox?). The use here, however, has to bypass any such protection. So opening this popup without user action seems potentially problematic, without some kind of protection?",
        "user": "cbiesinger",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2271798580,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
        "created_at": "2024-08-06T17:32:43Z",
        "updated_at": "2024-08-06T17:32:43Z",
        "body": "Bounce tracking protection is actually easy to prevent from firing here because the popup only needs to get user interaction to prevent it from clearing state.\r\n\r\nThe more general case of navigational tracking protection is the hard problem, however identifying what is and isn't navigational tracking in the first place is a hard problem that there are no general proposals for at this time. ",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2299093051,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/34",
        "created_at": "2024-08-20T15:07:06Z",
        "updated_at": "2024-08-20T15:07:06Z",
        "body": "I'll review this in a bit but also tagging @ekovac :)",
        "user": "johannhof",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2305434788,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/35",
        "created_at": "2024-08-22T18:58:25Z",
        "updated_at": "2024-08-22T18:58:25Z",
        "body": "The alternative of course is to update the demonstration page to match the explainer, but it's unclear which one is correct :)",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2305441008,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/35",
        "created_at": "2024-08-22T19:02:20Z",
        "updated_at": "2024-08-22T19:02:20Z",
        "body": "Both should be supported IMO to be consistent with other Credential types, e.g. for PasswordCredential we have [create](https://w3c.github.io/webappsec-credential-management/#dom-passwordcredential-create-slot) and [new](https://w3c.github.io/webappsec-credential-management/#dom-passwordcredential-passwordcredential-data).",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2305481472,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/35",
        "created_at": "2024-08-22T19:29:07Z",
        "updated_at": "2024-08-22T19:29:07Z",
        "body": "Closing this out; clarifying this probably doesn't need to be in the explainer.",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2306908370,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/35",
        "created_at": "2024-08-23T11:37:26Z",
        "updated_at": "2024-08-23T11:37:26Z",
        "body": ":+1:, but it is good a good catch. Something like the `webidl` is maybe a little out of scope for the explainer but would resolve this confusion. I'll think about including it.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2306910389,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/35",
        "created_at": "2024-08-23T11:38:49Z",
        "updated_at": "2024-08-23T11:38:49Z",
        "body": "@ekovac : also, FYI: [here is Firefox's webidl!](https://searchfox.org/mozilla-central/rev/a85b25946f7f8eebf466bd7ad821b82b68a9231f/dom/webidl/IdentityCredential.webidl)\r\n\r\n",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2307053359,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/36",
        "created_at": "2024-08-23T13:03:54Z",
        "updated_at": "2024-08-23T13:03:54Z",
        "body": "Closes  #32.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2315212893,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/37",
        "created_at": "2024-08-28T12:40:35Z",
        "updated_at": "2024-08-28T12:40:35Z",
        "body": "Good catch! My thought was that the UI would revert to the state as if the ui hint never existed.\r\n\r\nThat leads to you making a good point that displaying multiple accounts from the same IDP without any kind of UI hint is a challenge for the browser.\r\n\r\nCurrently Firefox naively shows all options and they look identical. I would probably want to define one to pick and display, leaving the others out of the UI. What are your thoughts on that/how to pick one? \r\n\r\n> Alternatively, does the expiration actually remove the stored credential entirely, thereby requiring the user to go through the Scenario 1 flow?\r\n\r\nNo, it should just be the hint that expires.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2318346037,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/37",
        "created_at": "2024-08-29T16:46:08Z",
        "updated_at": "2024-08-29T16:46:08Z",
        "body": "I'm actually curious what regular FedCM does in the case where there are multiple accounts with no name or picture...",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2318396924,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/37",
        "created_at": "2024-08-29T17:06:21Z",
        "updated_at": "2024-08-29T17:06:21Z",
        "body": "If required fields are missing we just fail the request, but you can maybe work around that with the magic of unicode, in which case the user would likely be confused...\r\n\r\nHowever, you'd still have the email to disambiguate.",
        "user": "cbiesinger",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2318404404,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/37",
        "created_at": "2024-08-29T17:09:39Z",
        "updated_at": "2024-08-29T17:09:39Z",
        "body": "Ah, got it- given name and picture are the only optional ones there. Thanks Christian!",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2331712582,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
        "created_at": "2024-09-05T13:39:32Z",
        "updated_at": "2024-09-05T13:39:32Z",
        "body": ">It could be some sort of encoded value such as a JSON.stringify\u2019d object containing additional information about the user that the IdP wants to provide to the RP, which may include one or both of the above two options.\r\n\r\nThis is the most useful bit in my mind, however it may be able to be communicated out of band as we already assume that would be the case. This just allows some more dynamic control from the IDP rather than it being tied to whatever is shipped in the RP. \r\n\r\nI agree that we should solve it soon though! Marked as agenda+f2f for TPAC.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2332142825,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
        "created_at": "2024-09-05T16:15:22Z",
        "updated_at": "2024-09-05T16:15:22Z",
        "body": "> I would love to hear your thoughts on this, @bvandersloot-mozilla and @samuelgoto.\r\n\r\nI think `token` is a red herring: I think this question is only occurring because you are `navigator.credentials.store()` something that isn't an [`IdentityCredential`](https://w3c-fedid.github.io/FedCM/#browser-api-identity-credential-interface) (which does indeed have a `token`) but rather an [`IdentityProviderAccount`](https://w3c-fedid.github.io/FedCM/#dictdef-identityprovideraccount) (which doesn't).\r\n\r\nThat is, I think that if you replaced `navigator.credentials.store()` with `navigator.login.setStatus()`, you'd be able to more clearly see \"the job to be done\" by what you are calling `token` here.\r\n\r\nFor example:\r\n\r\n```javascript\r\nnavigator.login.setStatus(\"logged-in\", {\r\n  accounts: [{\r\n    name: \"Sam Goto\",\r\n    photo: \"https://accounts.idp.com/photos/1234.jpg\",\r\n    email: \"goto@chromium.org\"\r\n  }]\r\n});\r\n```\r\n",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2334686942,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
        "created_at": "2024-09-06T19:28:58Z",
        "updated_at": "2024-09-06T19:28:58Z",
        "body": "> Is there a way to maintain UI hint freshness without falling back to heavyweight FedCM?\r\n\r\nI think the answer is: \"yes\" with a \"but\".\r\n\r\nThere are two solutions that I'm aware of:\r\n\r\n- The first involves Web Push. However, by the time that you involve Web Push, you have to spin up a lot of server-side infrastructure.\r\n- The second involves using expiration dates and triggering the \"Sign-in to IdP\" flows to refresh them. That's likely a lot more ergonomical for IdPs, at a small cost for users (with expired hints). \r\n\r\nJust as a data point in case it helps, we heard from IdPs that they have strict freshness requirements (e.g. in the order of hours, not days).\r\n",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2340928793,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
        "created_at": "2024-09-10T14:07:43Z",
        "updated_at": "2024-09-10T14:07:43Z",
        "body": "That's a good point, Sam! \r\n\r\nBut then when you call `navigator.credentials.get()` what is the `IdentityCredential` like that you get back? Absent a `token`?",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2341054953,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
        "created_at": "2024-09-10T14:40:38Z",
        "updated_at": "2024-09-10T14:40:38Z",
        "body": "> I think the answer is: \"yes\" with a \"but\".\r\n\r\nThat's my sense as well.\r\nI think these are two interesting choices for IdPs to have. I'm curious what infrastructure requirements are like for Web Push, as I've never deployed its use to a production environment before.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2341368775,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
        "created_at": "2024-09-10T16:06:10Z",
        "updated_at": "2024-09-10T16:06:10Z",
        "body": "From the meeting, an alternative would be to allow two new behaviors, depending on how many IDPs are present in the request.\r\n\r\n1. If there is only one, then open the login page if one is provided, as if the credential doesn't exist. \r\n2. If there is more than one, add an optional account chooser that relies upon an IDP-endpoint request to let the user pick a particular account.\r\n\r\n(1) has the downside of maybe facilitating more \"blinking\" popups or redirects.\r\n(2) devolves to an \"IDP chooser\" rapidly for short-lived UI hints.\r\n",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2341385591,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
        "created_at": "2024-09-10T16:11:26Z",
        "updated_at": "2024-09-10T16:11:26Z",
        "body": "From the meeting, we will remove the token field and have it be absent on `IdentityCredentials` from Lightweight FedCM.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2341393580,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/37",
        "created_at": "2024-09-10T16:14:13Z",
        "updated_at": "2024-09-10T16:14:13Z",
        "body": "Closing as duplicate of #40; at the very least the two discussions are closely related and further discussion of this should happen there.",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2341664345,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
        "created_at": "2024-09-10T18:09:30Z",
        "updated_at": "2024-09-10T18:09:30Z",
        "body": "Should I go through, remove the references to the token from the explainer, and send a PR? Or will you take care of that @bvandersloot-mozilla ?",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2341849979,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
        "created_at": "2024-09-10T19:26:13Z",
        "updated_at": "2024-09-10T19:26:13Z",
        "body": "I was planning to, but would be happy to review a PR for it :) Let me know which you prefer",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2344613694,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
        "created_at": "2024-09-11T20:11:05Z",
        "updated_at": "2024-09-11T20:11:05Z",
        "body": "I think option (D) is the most interesting here, but that might quickly devolve into something too complex to achieve the goals of Lightweight FedCM. Option (A) and (B) both \"feel\" fine to me.",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2349252172,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
        "created_at": "2024-09-13T15:42:32Z",
        "updated_at": "2024-09-13T15:44:12Z",
        "body": "> I think option (D) is the most interesting here, but that might quickly devolve into something too complex to achieve the goals of Lightweight FedCM. Option (A) and (B) both \"feel\" fine to me.\r\n\r\nI agree with this take. The thing that I think might make D work is that putting the token endpoint URL inside of the argument to get() is possible, since it is fetched after the UI. We may even be able to have it auto-refetch on each collection from the credential store too, which would make it very FedCM-token-like. Whether we do that or just give the same token back that was stored probably is up to the details of the OAuth profile for FedCM.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2349301693,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
        "created_at": "2024-09-13T16:08:16Z",
        "updated_at": "2024-09-13T16:26:44Z",
        "body": "Just a couple of comments that may add more clarity here:\r\n\r\n1) `token` can typically either be an `id_token`, an `code`, or a `token` in [OIDC](https://openid.net/specs/openid-connect-core-1_0.html#Authentication) (not an OIDC expert here, probably worth sanity checking), so it is not always a JWT (e.g. it can be an access token). SAML would return something entirely different. So, (C) feels a bit off.\r\n2) `token` is overly (semantically) and unnecessarily (privacy/security wise) restrictive, and there is a proposal to allow the IdP to return some \"arbitrary\" `data` [here](https://github.com/w3c-fedid/idp-registration/issues/13), so that the browser doesn't have to form an opinion on what gets sent back to RPs. I don't know if that makes it more or less like (d).\r\n\r\n> I think option (D) is the most interesting here, but that might quickly devolve into something too complex to achieve the goals of Lightweight FedCM. Option (A) and (B) both \"feel\" fine to me.\r\n\r\nYeah, I tend to agree that (D) seems to be the most \"conceptually consistent\" option: the \"output\" of the IdentityCredential is something that gets created \"by the IdP\". As you noted, In \"full FedCM\", that's something that gets returned in the `id_assertion_endpoint`. \r\n\r\nJust curious: in \"light FedCM\", would it be possible to execute a Javascript callback (maybe using service workers?) that the IdP gets to control to generate a message back to the RP? I have no idea if this would be possible, but I think this might be \"complex on browser engines\" but \"light on developers\".\r\n\r\nFor reference, Mozilla Persona had a \"callback\" that the Identity Provider would get [here](https://github.com/mozilla/id-specs/blob/prod/browserid/index.md#identity-provisioning-flow). I'm not sure how that worked, but seems worth looking.\r\n\r\n> Update: seems like it accomplished some of that by this step (ironically, using well-known files):\r\n>> The user-agent checks https://eyedee.me/.well-known/browserid and determines that eyedee.me supports BrowserID. From this configuration file it determines the provisioning and authentication URLs.\r\n>> The user-agent loads, in an invisible IFRAME, the provisioning URL https://eyedee.me/browserid/provision.html",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2350051647,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
        "created_at": "2024-09-13T19:52:22Z",
        "updated_at": "2024-09-13T19:52:22Z",
        "body": "> 1. `token` can typically either be an `id_token`, an `code`, or a `token` in [OIDC](https://openid.net/specs/openid-connect-core-1_0.html#Authentication) (not an OIDC expert here, probably worth sanity checking), so it is not always a JWT (e.g. it can be an access token). SAML would return something entirely different. So, (C) feels a bit off.\r\n\r\nAh, thanks for clarifying. And yes, C was definitely not my favorite choice, I included it for completeness :)\r\n\r\n> 2. `token` is overly (semantically) and unnecessarily (privacy/security wise) restrictive, and there is a proposal to allow the IdP to return some \"arbitrary\" `data` [here](https://github.com/w3c-fedid/idp-registration/issues/13), so that the browser doesn't have to form an opinion on what gets sent back to RPs. I don't know if that makes it more or less like (d). \r\n\r\nI think that makes it, in practice, less like (d), especially if the implication is that the IdP would call `n.c.store()` with the `data` object defined on the IdentityCredential it is passing in.\r\n\r\n> Yeah, I tend to agree that (D) seems to be the most \"conceptually consistent\" option: the \"output\" of the IdentityCredential is something that gets created \"by the IdP\". As you noted, In \"full FedCM\", that's something that gets returned in the `id_assertion_endpoint`.\r\n\r\nI think @samuelgoto you've been mentioning the possibility of folding some of the lightweight FedCM design ideas into the main FedCM specification. Is there any reason we can't just make all the fields of the `IdentityProviderAPIConfig` optional?\r\n\r\nHere's a quick explanation of how this might work for the \"user has an account with the IdP and has visited the IdP already\" case:\r\n\r\nUser visits the IdP at some point, and it stores that they have an account with the IdP, and any UI hint they also want to provide via `n.c.store()`, as per the existing Lightweight FedCM explainer.\r\n\r\nRelying party call to .get() from the IdP is done as in the full FedCM specification.\r\n\r\n```js\r\nlet cred = await navigator.credentials.get(\r\n  {identity: {providers: {configURL: \"https://idp.example/config.json\"});\r\n```\r\n\r\nUser agent fetches the `config.json` and `.well_known/webidentity` as normal without any cookies etc. The `.well_known/webidentity` validates that the `config.json` URL is sound.\r\n\r\nThe `config.json` (minimally) looks like this:\r\n\r\n```json\r\n{\r\n  \"id_assertion_endpoint\": \"/assert\",\r\n}\r\n```\r\n\r\nSince there's no `accounts_endpoint` defined, we check our stored accounts/UI hints from earlier; if we have them, great, the user agent doesn't need to make any more calls before the user selects an account, so we've preserved the new privacy property we hoped to create. If the user agent doesn't have UI hints from before, and a loginUrl was provided in the config, then we could do something with that (I'd have to think through all the mediation mode and multi-IdP considerations to know exactly what.)\r\n\r\nThe user agent displays the account selector using the UI hints stored earlier, the user selects an account, and then the assertion endpoint is called as per the existing FedCM spec. (If a `clientId` wasn't provided in the .get() call, then the IdP may choose to reject the request, but in an open-federation usecase it would not.)\r\n\r\nThe IdP doesn't even have to implement an assertion endpoint if it doesn't want to. If the only goal is to get a nicer UX than a basic Storage Access prompt, they needn't define anything at all (except maybe a loginUrl for a redirect if the user hasn't visited the IdP on this browser yet.) The `IdentityCredential` that the RP gets back in this case won't be terribly useful, as mentioned in the original post, but it's a perfectly valid point along a continuum of functionality, instead of being the only option, and that makes this seem a lot more appealing.\r\n\r\nThis adds a lot more branches to the already complicated FedCM specification, but might well address a wide continuum of usecases and make piecemeal implementation of FedCM integration feasible for IdPs. It also gives a couple knobs for implementations to adjust (some browsers may decide the inconvenience of falling back to the loginURL is acceptable in contrast to the privacy impact of the up-front accounts endpoint call when no pre-stored accounts are available.) \r\n\r\n\r\n\r\n\r\n\r\n",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2350311583,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
        "created_at": "2024-09-13T21:33:44Z",
        "updated_at": "2024-09-13T21:34:53Z",
        "body": "> I think @samuelgoto you've been mentioning the possibility of folding some of the lightweight FedCM design ideas into the main FedCM specification. Is there any reason we can't just make all the fields of the IdentityProviderAPIConfig optional?\r\n\r\nYeah, I think that matches my intuition.\r\n\r\nJust as a concrete example of another variation, here is another case:\r\n\r\n> The IdP doesn't even have to implement an assertion endpoint if it doesn't want to. \r\n\r\nThey could also choose to implement the `accounts_endpoint` (to have the accounts \"pulled\" rather than \"push\") but not the `id_assertion_endpoint`:\r\n\r\n```json\r\n{\r\n  \"accounts_endpoint\": \"/accounts\",\r\n}\r\n```\r\n\r\nThis tells the browser: pull accounts from the `accounts_endpoint`, but don't hit the `id_assertion_endpoint`: the IdP will take it from there with the [Storage Access API auto-grant](https://github.com/explainers-by-googlers/storage-access-for-fedcm).\r\n\r\n> This adds a lot more branches to the already complicated FedCM specification, but might well address a wide continuum of usecases and make piecemeal implementation of FedCM integration feasible for IdPs.\r\n\r\nYeah, I agree that this can get complex quick, but maybe we don't need to think about every single permutation until we hear from developers that they need a specific one?",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2352790581,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
        "created_at": "2024-09-16T12:32:56Z",
        "updated_at": "2024-09-16T12:32:56Z",
        "body": "I think it would also be interesting to have the token endpoint provided as an argument to the `n.c.get` call rather than via the site-level well-known. Even having a general \"config\" argument could be useful, if the IDP already opted into being used in this way via storing a credential. In fact, the argument could be on the `n.c.store`.\r\n\r\nThe accounts endpoint would be useful as well, however it would have to be fetched after an IDP-entry in the credential chooser, to prevent attacks on privacy.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2353662987,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/44",
        "created_at": "2024-09-16T18:47:05Z",
        "updated_at": "2024-09-16T18:47:05Z",
        "body": "Accounts do not expire, UI hints do. So, all accounts having their hints expire is equivalent to having accounts with no UI hints, which is different than no stored accounts. ",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2353941016,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/44",
        "created_at": "2024-09-16T20:30:22Z",
        "updated_at": "2024-09-16T20:30:22Z",
        "body": "My question is what is the difference from the user's point of view.",
        "user": "npm1",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2355750865,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
        "created_at": "2024-09-17T13:13:43Z",
        "updated_at": "2024-09-17T13:13:43Z",
        "body": "Relatedly, from #42 we are talking about adding pull requests for the token endpoint. This is akin to option 2 above.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2355850357,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
        "created_at": "2024-09-17T13:41:59Z",
        "updated_at": "2024-09-17T13:41:59Z",
        "body": "I think (1)'s downside can be resolved by requiring sticky user activation to store a credential! I lean toward that direction, and allowing stores in workers to facilitate using the Push API. There was a comment in the meeting with the push API requiring notifications, and I think that is reasonable given the infrequency of user information updates.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2356390029,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
        "created_at": "2024-09-17T16:25:44Z",
        "updated_at": "2024-09-17T16:25:44Z",
        "body": "@ekovac: does this make sense in the context of the discussion on #42?",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2356453417,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
        "created_at": "2024-09-17T17:00:24Z",
        "updated_at": "2024-09-17T17:00:24Z",
        "body": "(1) would certainly lead to the best UX and Privacy properties, I believe. It is unclear to me whether that's too big of a lift to IdPs or not, but seems like a better place to start from.",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2356779541,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
        "created_at": "2024-09-17T19:55:05Z",
        "updated_at": "2024-09-17T19:58:02Z",
        "body": "> I think it would also be interesting to have the token endpoint provided as an argument to the `n.c.get` call rather than via the site-level well-known. Even having a general \"config\" argument could be useful, if the IDP already opted into being used in this way via storing a credential. In fact, the argument could be on the `n.c.store`.\r\n\r\nI think there's value in trying to minimize the amount of divergence between FedCM and Lightweight FedCM here and leverage the existing configuration. What benefit does supplying the config URL in the `n.c.store()` call have over just relying on the existing FedCM configuration mechanism?\r\n\r\nIt's true that if we take it as a given that the user will be picking the IdP from a list before any requests (credential-less or otherwise) are issued, there's probably no harm in doing this. But it seems like supplying this at .store() time is an unnecessary difference.\r\n\r\n> The accounts endpoint would be useful as well, however it would have to be fetched after an IDP-entry in the credential chooser, to prevent attacks on privacy.\r\n\r\nAgreed, I think this fits together nicely in this model.\r\n\r\n",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2356790113,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
        "created_at": "2024-09-17T19:59:46Z",
        "updated_at": "2024-09-17T19:59:46Z",
        "body": "If the tokenURL has to be supplied by the RP, that feels like an arbitrary difference vs \"full\" FedCM. Is there any reason we don't want to just use the existing configURL mechanism?",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2358535135,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
        "created_at": "2024-09-18T13:52:23Z",
        "updated_at": "2024-09-18T13:52:23Z",
        "body": "I considered using the whole configURL mechanism. The biggest piece is that we don't need the protections offered by the `.well-known` resource's redirection, since this request is sent after the credential is chosen. Then it makes sense to me to make it as easy to use as possible, which is just another Javascript parameter. The well-known is still part of the opt-in path to FedCM, and the endpoint can stay the same.\r\n\r\nI realized while writing this that a better place to put this is in the IDP's store, which is more equivalent to the configURL. Change made.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2359454667,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
        "created_at": "2024-09-18T21:41:07Z",
        "updated_at": "2024-09-18T21:41:07Z",
        "body": "Just ran into this, and may help:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Web_Periodic_Background_Synchronization_API",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2361374025,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
        "created_at": "2024-09-19T15:41:07Z",
        "updated_at": "2024-09-19T15:41:07Z",
        "body": "> I think there's value in trying to minimize the amount of divergence between FedCM and Lightweight FedCM here and leverage the existing configuration. \r\n\r\nI agree, which is why I would use the fetch description of the Token endpoint from FedCM.\r\n\r\n> What benefit does supplying the config URL in the n.c.store() call have over just relying on the existing FedCM configuration mechanism?\r\n\r\nIf an IDP wants to provide the token, I don't want to require adopting the site-level well-known resource since it is a challenge for some deployments. This is also why the loginURL is in the `n.c.store` arguments. FedCM had to fetch IDP config from a well-known resource because it had no prior guarantee of interaction with the IDP.  We have a convenient place for it!",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2363866116,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
        "created_at": "2024-09-20T14:26:41Z",
        "updated_at": "2024-09-20T14:26:41Z",
        "body": "Is tokenUrl the same as the id_assertion_endpoint?",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2363943497,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
        "created_at": "2024-09-20T15:03:50Z",
        "updated_at": "2024-09-20T15:03:50Z",
        "body": "Exactly! Maybe it would be better to rename it to idAssertionURL?",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2364004437,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
        "created_at": "2024-09-20T15:35:36Z",
        "updated_at": "2024-09-20T15:35:36Z",
        "body": "It is a little ugly, but I think conceptually right :)",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2364588203,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
        "created_at": "2024-09-20T20:41:45Z",
        "updated_at": "2024-09-20T20:43:49Z",
        "body": "Just an idea that occurred to me after thinking about this a bit more on (C) ...\r\n\r\n> (C) On output, we could include a token field that contains an unsigned JWT with assertions corresponding to the UI hints that the IdP provided when .store() was called.\r\n\r\nSo, something that could be very interesting, but may be something that we'd want to layer on top of the other options, is to use a signed [SD-JWT](https://datatracker.ietf.org/doc/draft-ietf-oauth-selective-disclosure-jwt/) and the the [Three Party Model](https://www.w3.org/TR/vc-data-model/#ecosystem-overview) with the browser (or a wallet or a password manager) as the holder: have the `navigator.credentials.store()` store an SD-JWT and the browser to derive a selective disclosure presentation at `navigator.credentials.get()` (without ever phone-homing the IdP).\r\n\r\nThis would be clearly not retrofittable into the current system, requiring the RP to redeploy, so not a great starting point, but seems like a good long term design: something that allows us a gradual upgrade path from `pull` (heavyweight) > `push` (lighweight) > `issue` (delegated) for IdPs.\r\n\r\nIt is not clear to me whether that's a FedCM concern or a [Digital Credentials](https://github.com/wicg/digital-credentials) concern and where to draw the line between the two (maybe the former is more \"high level\" and the latter is more \"low level\"?), but just wanted to throw it out there as a possible \"long term design\" that can be built on top of lightweight.",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2372065022,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/46",
        "created_at": "2024-09-24T18:54:42Z",
        "updated_at": "2024-09-24T18:54:42Z",
        "body": "I don't think the prototype in Firefox nightly is actually up to date with the recent changes to the explainer yet.",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2372069327,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/46",
        "created_at": "2024-09-24T18:57:19Z",
        "updated_at": "2024-09-24T18:57:19Z",
        "body": "The testing websites linked here: https://github.com/fedidcg/LightweightFedCM/issues/33 should work in Firefox Nightly but don't represent the latest state of the explainer.",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2372093416,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/46",
        "created_at": "2024-09-24T19:04:06Z",
        "updated_at": "2024-09-24T19:04:06Z",
        "body": "No problems. Thanks. ",
        "user": "philsmart",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2372431046,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
        "created_at": "2024-09-24T21:35:16Z",
        "updated_at": "2024-09-24T21:35:16Z",
        "body": "> Just ran into this, and may help:\r\n> \r\n> https://developer.mozilla.org/en-US/docs/Web/API/Web_Periodic_Background_Synchronization_API\r\n\r\nThat requires installing the app as a PWA, and exposes user activity & IP address to the IDP. (We considered that in https://github.com/w3c-fedid/FedCM/blob/main/meetings/2022/FedCM_%20Options%20for%20the%20Timing%20Attack%20Problem%202022-08-31.pdf)",
        "user": "cbiesinger",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2372456151,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
        "created_at": "2024-09-24T21:54:38Z",
        "updated_at": "2024-09-24T21:54:38Z",
        "body": "I'd like that. I think it shouldn't be a problem and is explicitly a target for e.g. the Mode API.\r\n\r\nHow do you feel about the Registration API? Are these two APIs similar enough that there's a point in convergence / better integration?",
        "user": "johannhof",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2372498477,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
        "created_at": "2024-09-24T22:27:56Z",
        "updated_at": "2024-09-24T22:28:41Z",
        "body": "> How do you feel about the Registration API? Are these two APIs similar enough that there's a point in convergence / better integration?\r\n\r\nYeah, that's a good question, but I do think that this aligns well with the IdP Registration API. \r\n\r\nI think you are right in that there is something awkward about them, but this seems like a resolvable issue (i.e. where to put the parameters of the `configURL`).\r\n\r\n```javascript\r\n// No prompts, tells the browser that the user is logged in\r\nnavigator.login.setStatus(\"logged-in\");\r\n\r\n// Doesn't prompt the user, caches the user's metadata\r\nnavigator.credentials.store({\r\n  identity: {\r\n    name: \"John Doe\",\r\n    email: \"john@doe.com\"\r\n\r\n    // .. oof, is it awkward that we could store the accounts / token endpoint here or at the IdP Registration API?\r\n  }\r\n});\r\n\r\n// Prompts the user to register the origin as an IdP\r\nIdentityProvider.register({\r\n  // IdP Registration typically gets a configURL as a parameter here, but for lightweight, maybe there won't be one?\r\n  // Do I specify them here? Or in the store?\r\n  // no id_assertion_endpoint, no accounts_endpoint, etc\r\n});\r\n```",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2372515397,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
        "created_at": "2024-09-24T22:44:32Z",
        "updated_at": "2024-09-24T22:44:32Z",
        "body": "Since lightweight FedCM does not use ID assertion endpoints, continuation API (and params API) does not really work with it as I understand it.",
        "user": "cbiesinger",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2372579421,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
        "created_at": "2024-09-24T23:43:16Z",
        "updated_at": "2024-09-24T23:43:16Z",
        "body": "I've been operating under the assumption during implementation that this should work alongside Multi-IDP and the Mode API since there's no reason not to.\r\n\r\nThe registration API is interesting; it seems that the separate registration step shouldn't be necessary for a lightweight credential provider. Why would the user register an IdP they don't have an account with? Presumably if they are on a lightweight FedCM IdP page and opting to register the IdP, they've also had an account stored?\r\n\r\nI think the registration API, as I understand it, is still useful for \"full\" FedCM IdPs, but lightweight FedCM doesn't really benefit from it.\r\n\r\n",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2372597641,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
        "created_at": "2024-09-25T00:00:56Z",
        "updated_at": "2024-09-25T00:02:22Z",
        "body": "It does feel that way, now that the `token` is not provided at store-time. When there was a possibility there was something sensitive in there, we definitely needed that control. Now that that's being retrieved using something compatible with the Identity Assertion endpoint (which has the Origin in the headers etc) this shouldn't be necessary.\r\n\r\nThat is to say, +1 to this (and ditto for effectiveOrigins, probably?)\r\n\r\n",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2372964174,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
        "created_at": "2024-09-25T04:53:48Z",
        "updated_at": "2024-09-25T04:53:48Z",
        "body": "IdP registration could still work, right? Instead of just storing the accounts, the IdP registers as being available for a certain 'type', and then the RP can request IdPs of a given type.",
        "user": "npm1",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2374821405,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
        "created_at": "2024-09-25T18:06:26Z",
        "updated_at": "2024-09-25T18:06:26Z",
        "body": "> IdP registration could still work, right? Instead of just storing the accounts, the IdP registers as being available for a certain 'type', and then the RP can request IdPs of a given type.\r\n\r\nn.c.store(IdentityCredential({...}) as defined in the explainer already supports a 'type' on the IdentityCredential, so it already covers this case without needing to invoke the registration API.",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2374857399,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
        "created_at": "2024-09-25T18:24:37Z",
        "updated_at": "2024-09-25T18:24:37Z",
        "body": "That means that IdP registration is supported. That is literally what IdP registration API is.",
        "user": "npm1",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2377432850,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
        "created_at": "2024-09-26T16:31:40Z",
        "updated_at": "2024-09-26T16:31:40Z",
        "body": "IdP Registration shows a user prompt though, right? Just wanted to make sure we're on the same page there. I agree that registration feels like something that could be frequently used with LW.\r\n\r\nI'm curious if we could make Continuation API work without the endpoints since it sounds potentially useful? I would need to read up more on Continuation API :)\r\n\r\ncc @bvandersloot-mozilla ",
        "user": "johannhof",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2377512395,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
        "created_at": "2024-09-26T17:16:21Z",
        "updated_at": "2024-09-26T17:16:21Z",
        "body": "I think the concern we're trying to mitigate here is the \"reputation attack\" where an IdP might want to prevent its prompt being shown on unreputable / illegal sites to avoid the impression of endorsement.\r\n\r\nWould be interested in @bvandersloot-mozilla's thoughts.",
        "user": "johannhof",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2377515337,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
        "created_at": "2024-09-26T17:18:01Z",
        "updated_at": "2024-09-26T17:28:23Z",
        "body": "I'm going to open a separate issue specifically about whether the 'type' parameter should remain as part of the IdentityCredential passed to the n.c.store() call (in which case we will need to add a user prompt at store time) or if we should require using the registration API for that functionality, for consistency. (This came up in a discussion with @npm1)\r\n\r\nSee: https://github.com/fedidcg/LightweightFedCM/issues/49",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2377546607,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-09-26T17:32:04Z",
        "updated_at": "2024-09-26T17:32:04Z",
        "body": "If there are no objections I can put together a PR for this to update the explainer.\r\n\r\n@bvandersloot-mozilla what are your thoughts?",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2377654226,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
        "created_at": "2024-09-26T18:29:40Z",
        "updated_at": "2024-09-26T18:29:40Z",
        "body": "This starts to come back around to \"Is Lightweight FedCM for all IdPs or is Lightweight FedCM for small IdPs,\" I think.",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2383944047,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
        "created_at": "2024-09-30T19:00:36Z",
        "updated_at": "2024-09-30T19:00:36Z",
        "body": "Discussed at TPAC 2024: https://github.com/fedidcg/meetings/blob/main/2024/2024-09-24-TPAC-notes.md#lightweight",
        "user": "wseltzer",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2386577632,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
        "created_at": "2024-10-01T17:31:31Z",
        "updated_at": "2024-10-01T17:31:31Z",
        "body": "It might be possible to call the store internally from the IDP registration API, if all of the arguments are there.\r\n\r\nI think it is worth considering putting the credential store operation behind a dialog regardless!",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2386579949,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-10-01T17:32:49Z",
        "updated_at": "2024-10-01T17:32:49Z",
        "body": "I think the better solution would be to move the store to an internal call by the registration API, assuming the information we need to create a credential is available there.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2386581827,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
        "created_at": "2024-10-01T17:33:56Z",
        "updated_at": "2024-10-01T17:33:56Z",
        "body": "> I think the concern we're trying to mitigate here is the \"reputation attack\" where an IdP might want to prevent its prompt being shown on unreputable / illegal sites to avoid the impression of endorsement.\r\n\r\nPrecisely. And many IdPs, not just large ones, can't disclose their RP lists, so they require a dynamic fetch.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2386582297,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
        "created_at": "2024-10-01T17:34:12Z",
        "updated_at": "2024-10-01T17:34:12Z",
        "body": "> This starts to come back around to \"Is Lightweight FedCM for all IdPs or is Lightweight FedCM for small IdPs,\" I think.\r\n\r\nMy position is that it should work for all IdPs.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2386618906,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-10-01T17:56:01Z",
        "updated_at": "2024-10-01T17:56:01Z",
        "body": "So the .store() call would be as-is currently defined, but an IdP registration would happen under the hood?",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2386737922,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-10-01T18:56:56Z",
        "updated_at": "2024-10-01T18:56:56Z",
        "body": "I meant the other way, but I think this might be better. I'm not certain",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2389174449,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
        "created_at": "2024-10-02T17:03:01Z",
        "updated_at": "2024-10-02T17:03:01Z",
        "body": "> And many IdPs, not just large ones, can't disclose their RP lists, so they require a dynamic fetch.\r\n\r\nIf it requires a dynamic fetch, maybe it belongs into the `client_metadata_endpoint` rather than `navigator.credentials.store()`?",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2391782035,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
        "created_at": "2024-10-03T15:59:49Z",
        "updated_at": "2024-10-03T15:59:49Z",
        "body": "I think that contextual integrity issue only applies if the UX matches what exists in Chrome today. As written, surely other implementations could choose to avoid it?",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2391814564,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
        "created_at": "2024-10-03T16:14:44Z",
        "updated_at": "2024-10-03T16:14:44Z",
        "body": "Certainly- there is no normative language on showing those accounts in the UI. But the spec is certainly written with an assumption of presenting this information to the user, e.g. \"Display an account chooser displaying the options from accountsList\" really only makes sense if you use account information to show those options.\r\n\r\nI'm interested in if we agree that this is a problem and if so, what design considerations we can make to mitigate it in Lightweight FedCM, especially since the first thing that came to my mind lets us easily solve #40 ",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2391986417,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-10-03T17:47:56Z",
        "updated_at": "2024-10-03T17:47:56Z",
        "body": "> As currently written, the explainer describes a new parameter to the IdentityCredential constructor called type, which would serve the same function as the type parameter on the proposed IdentityProvider.register() method.\r\n\r\nConceptually speaking, I think that `IdentityProvider.register()` and the `navigator.credentials.store()` to be fairly orthogonal and independent concepts: the former allows users to \"register identity providers\" whereas the latter allows \"identity providers to register accounts\".\r\n\r\nAs a concrete example, I think it should be possible for an IdP to be (a) registered and, at the same time, (b) have their user logged-out without any account available. All of the other 4 combinations are also valid: unregistered but logged-in, unregistered and logged-out as well as registered and logged-in.\r\n\r\n> One issue this raises is that it means that the store() call now needs to prompt the user to prevent malicious or simply ill-behaved IdPs from drive-by registering themselves for a broad type class of RPs for the user.\r\n\r\nYeah, I think that's correct: you need to prompt the user for permission, because otherwise any website could spam the list without any user awareness, as you said, just driving by.\r\n\r\n> I think the natural choice here is to remove 'type' from the IdentityCredential itself, and if we want IdP Registration type behavior we rely on IdentityProvider.register() .\r\n> This makes the behavior more consistent with full FedCM, and eliminates the need to introduce a user prompt for n.c.store().\r\n\r\nI think that overall makes sense.\r\n\r\nJust to be concrete if I understand this correctly, but roughly speaking, here is what this would look like for an IdP:\r\n\r\n```javascript\r\n// Tells the browser that the user is logged in\r\n// TODO: should this be bundled / inferred with the next call?\r\nnavigator.login.setStatus(\"logged-in\");\r\nnavigator.credentials.store(new IdentityCredential({\r\n  name: \"John Doe\",\r\n  email: \"foobar@gmail.com\"\r\n}));\r\nIdentityProvider.register( /** to we start accepting undefined for lightweight? */ );\r\n```\r\nDid I get this more or less right?\r\n\r\n> So the .store() call would be as-is currently defined, but an IdP registration would happen under the hood?\r\n\r\nIs the suggestion here to bundle the last two (and maybe the first one too) into the semantics of the `store()`? For example:\r\n\r\n```javascript\r\n// This is semantically isomorphic syntactic sugar to the code snippet above\r\nnavigator.credentials.store(new IdentityCredential({\r\n  type: \"indie-auth\",\r\n  name: \"John Doe\",\r\n  email: \"foobar@gmail.com\"\r\n}));\r\n```\r\n\r\nDid I get this right?\r\n",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2391994190,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-10-03T17:52:15Z",
        "updated_at": "2024-10-03T17:52:15Z",
        "body": "> > One issue this raises is that it means that the store() call now needs to prompt the user to prevent malicious or simply ill-behaved IdPs from drive-by registering themselves for a broad type class of RPs for the user.\r\n> \r\n> Yeah, I think that's correct: you need to prompt the user for permission, because otherwise any website could spam the list without any user awareness, as you said, just driving by.\r\n\r\nDo you think user permission is also needed for store() if the type is moved to a separate register() call? That is, do you think storing just the logged in user data also needs permission?",
        "user": "cbiesinger",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2391994241,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-10-03T17:52:17Z",
        "updated_at": "2024-10-03T17:52:17Z",
        "body": "> Just to be concrete if I understand this correctly, but roughly speaking, here is what this would look like for an IdP:\r\n> \r\n> ```js\r\n> // Tells the browser that the user is logged in\r\n> // TODO: should this be bundled / inferred with the next call?\r\n> navigator.login.setStatus(\"logged-in\");\r\n> navigator.credentials.store(new IdentityCredential({\r\n>   name: \"John Doe\",\r\n>   email: \"foobar@gmail.com\"\r\n> }));\r\n> IdentityProvider.register( /** to we start accepting undefined for lightweight? */ );\r\n> ```\r\n> \r\n\r\nThis is what I had in mind, exactly. And yes, IdentityProvider.register() for a lightweight IdP could just take `undefined`, we've got the origin from context. I think it'd be harmless to make the login status call implied from the .store() call.\r\n\r\n",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2392001408,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
        "created_at": "2024-10-03T17:56:41Z",
        "updated_at": "2024-10-03T17:56:41Z",
        "body": "With regards to the following points that @ekovac and @bvandersloot-mozilla raised earlier:\r\n\r\n> I think that contextual integrity issue only applies if the UX matches what exists in Chrome today. As written, surely other implementations could choose to avoid it?\r\n> Certainly- there is no normative language on showing those accounts in the UI.\r\n> it is deceptive to present information from one context into another, making it appear that the contexts are already linked before the user makes their choice.\r\n\r\nWould you feel that it is `equally deceptive to present information from one context into another, making it appear that the contexts are already linked before the user makes their choice` if we had chosen different UX formulations? For example, if Chrome had chosen to implement the FedCM UX in an area that is clearly part of the browser UI rather than the content UI, would we still feel that it is being deceitful? Does requiring user activation change some of this equation?\r\n\r\nFor example, just to check, would the following UX choice be both (a) spec compliant and (b) non deceitful?\r\n\r\n<img width=\"598\" alt=\"Screenshot 2024-10-03 at 10 53 54\" src=\"https://github.com/user-attachments/assets/2e44635b-d541-45ef-8fef-6b5c33e2e22b\">\r\n\r\nWhat about the following UX that requires user activation?\r\n\r\n<img width=\"600\" alt=\"Screenshot 2024-10-03 at 10 56 05\" src=\"https://github.com/user-attachments/assets/449bfb86-d5a3-45e9-b8c1-5749f16ee17c\">\r\n\r\n",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2392005962,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-10-03T17:59:19Z",
        "updated_at": "2024-10-03T17:59:35Z",
        "body": "> This is what I had in mind, exactly. And yes, IdentityProvider.register() for a lightweight IdP could just take undefined, we've got the origin from context. I think it'd be harmless to make the login status call implied from the .store() call.\r\n\r\nAh, glad that I understood what you had in mind. I just realized that I forgot your actual original point in this thread, using the `type` from the `IdentityProvider.register()`, so here is a more complete snippet:\r\n\r\n```javascript\r\n// navigator.login.setStatus() is implied in the `store()`\r\nnavigator.credentials.store(new IdentityCredential({\r\n  name: \"John Doe\",\r\n  email: \"foobar@gmail.com\"\r\n}));\r\nIdentityProvider.register({\r\n  type: \"inde-auth\"\r\n});\r\n```\r\n\r\nDid I get this right?",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2392016611,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-10-03T18:05:11Z",
        "updated_at": "2024-10-03T18:11:06Z",
        "body": "On a related note:\r\n\r\n>  I think it'd be harmless to make the login status call implied from the .store() call.\r\n\r\nThis reminds me to re-notify you that I think that what you actually want is the reverse: drop the `navigator.credentials.store()` and extend the `navigator.login.setStatus()` instead.\r\n\r\nI think that what you actually want, is the following:\r\n\r\n```javascript\r\nnavigator.login.setStatus(\"logged-in\", {\r\n  accounts: [{\r\n    name: \"John Doe\",\r\n    email: \"foobar@gmail.com\"\r\n  }]\r\n}));\r\nIdentityProvider.register({\r\n  type: \"inde-auth\"\r\n});\r\n```\r\n\r\nFor example, what's the reverse of `navigator.credentials.store()`? Conceptually speaking, I think you want the following to be the reverse of `navigator.credentials.store()`:\r\n\r\n```javascript\r\nnavigator.login.setStatus(\"logged-out\");\r\n```\r\n\r\nI think I mentioned this a few times, and it is fine to leave this discussion for later, but as we go along and learn more about the relationship between the parts, it helps to re-test these ideas.",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2392055737,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
        "created_at": "2024-10-03T18:26:52Z",
        "updated_at": "2024-10-03T18:26:52Z",
        "body": "> For example, if Chrome had chosen to implement the FedCM UX in an area that is clearly part of the browser UI rather than the content UI, would we still feel that it is being deceitful?\r\n\r\nClear to whom? Personally, I'm partial to [Emily's interpretations around the line of death](https://emilymstark.com/2022/12/18/death-to-the-line-of-death.html), particularly her intuition \"that the line of death is simply a foreign, incomprehensible idea to many, many browser users.\"\r\n\r\n> Does requiring user activation change some of this equation?\r\n\r\nI don't think so.\r\n\r\n> For example, just to check, [...]\r\n\r\nThe URL-bar nugget is probably the subtlest one, and is much better than the one-tap-widget. But I think the reasonable question here is \"what users understand that the browser is sending them a message, not the page? and unless they click the nugget the site doesn't learn about their twitter account?\", and I don't know if many do, even with this mock. \r\n\r\n\r\n\r\n\r\n",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2392183088,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-10-03T19:34:55Z",
        "updated_at": "2024-10-03T19:34:55Z",
        "body": "> On a related note:\r\n> \r\n> > I think it'd be harmless to make the login status call implied from the .store() call.\r\n> \r\n> This reminds me to re-notify you that I think that what you actually want is the reverse: drop the `navigator.credentials.store()` and extend the `navigator.login.setStatus()` instead.\r\n> \r\n> I think that what you actually want, is the following:\r\n> \r\n> ```js\r\n> navigator.login.setStatus(\"logged-in\", {\r\n>   accounts: [{\r\n>     name: \"John Doe\",\r\n>     email: \"foobar@gmail.com\"\r\n>   }]\r\n> }));\r\n> IdentityProvider.register({\r\n>   type: \"inde-auth\"\r\n> });\r\n> ```\r\n> \r\n> For example, what's the reverse of `navigator.credentials.store()`? Conceptually speaking, I think you want the following to be the reverse of `navigator.credentials.store()`:\r\n> \r\n> ```js\r\n> navigator.login.setStatus(\"logged-out\");\r\n> ```\r\n> \r\n> I think I mentioned this a few times, and it is fine to leave this discussion for later, but as we go along and learn more about the relationship between the parts, it helps to re-test these ideas.\r\n\r\nI'm warming up to this idea, in part because it gets rid of the awkward detail of there being an \"input\" IdentityCredential and an \"output\" IdentityCredential that behave distinctly but are the same class in WebIDL. @bvandersloot-mozilla does this make sense to you as well?",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2392187860,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
        "created_at": "2024-10-03T19:37:49Z",
        "updated_at": "2024-10-03T19:37:49Z",
        "body": "Still trying to understand you, a few more clarification questions.\r\n\r\n> Clear to whom? \r\n\r\nTo the user.\r\n\r\n> But I think the reasonable question here is \"what users understand that the browser is sending them a message, not the page? and unless they click the nugget the site doesn't learn about their twitter account?\", and I don't know if many do, even with this mock.\r\n\r\nHow does this user comprehension argument stand with autocomplete? Doesn't the following UX also fit the description of \"present information from one context into another\"?\r\n\r\n<img width=\"932\" alt=\"Screenshot 2024-10-03 at 12 36 38\" src=\"https://github.com/user-attachments/assets/564dcf20-5edd-4bab-9206-9eeafe52bd35\">\r\n",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2392256533,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/51",
        "created_at": "2024-10-03T20:17:57Z",
        "updated_at": "2024-10-03T20:17:57Z",
        "body": "Agreed, this needs to be made more explicit. I believe we came to an agreement that, yes, this will use the same behavior as the assertion endpoint from FedCM. https://github.com/fedidcg/LightweightFedCM/issues/42#issuecomment-2361374025",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2392706990,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
        "created_at": "2024-10-04T03:05:54Z",
        "updated_at": "2024-10-04T03:05:54Z",
        "body": "I really understand your intuition here @bvandersloot-mozilla and I appreciate the evocation of Contextual Integrity as a concern for FedCM and similar new APIs that avoid cross-site tracking but preserve an integrated user experience on a composable web.\r\n\r\nIt's super interesting because I think these APIs (specifically FedCM and Fenced Frames w/ unpartitioned storage) walk a thin line between actually giving users a contextual choice about sharing their information and the possibility for violating contextual integrity through showing user-identifying data where a user does not expect it.  I personally believe that we can be successful in building and refining (and educating our users about) these new privacy-preserving UI patterns over time, and thus shape the norms and user expectations that make the difference here.\r\n\r\nThe autocomplete example that Sam showed is a great one in my opinion, if it didn't exist today we might argue that a user would find it concerning to see their credit card information listed on a page and that it may lead them to believe that their payment information was already shared with the site. But we (users) have been trained to understand that it is indeed the opposite: We are in control whether data is shared, and the fact that it is shown on the site where the data is needed provides us with much *better* contextual integrity than, say, a full-screen browser prompt that hides the page in order to make it as clear as possible that it's the browser communicating with the user.\r\n\r\nI think it would be incorrect to say that FedCM is fully there yet, but it has the correct underlying principles: User data is not shared until the user chooses to, and its metadata allows for very contextual presentation. I absolutely agree with you that we should continue to evaluate as user agents whether the presentation we choose is as contextual as possible, but I don't think that \"make it clear this is from the browser\" is the only criterion for such an evaluation.",
        "user": "johannhof",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2393562966,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
        "created_at": "2024-10-04T12:10:57Z",
        "updated_at": "2024-10-04T12:10:57Z",
        "body": "I definitely don't mean to imply that \"make it clear this is from the browser\" is the only criterion. But it is an important one that hasn't been discussed. And that is a really good point that when joining contexts, both are important.\r\n\r\nThe autocomplete example is a great one and I think it can help illuminate where the finer points of concern are. I think there are a few big differences, one of which Johann pointed to already:\r\n\r\n1. the credit card case already exists, and has some amount of user training around the \"click-to-fill\" semantic built in already, and is presented in the context of a form-fill action being done by the user. FedCM adds new functionality and the existing training around social login is built around the opposite semantic of \"would you like to use this info we already have?\" and with it being pushed to the user as a suggestion.\r\n2. Credit card info is my data from the real world that I share with a site, whereas my Google account info is data I constructed on one site already so having it appear elsewhere on the web is more complicated by bringing in another informational context.\r\n3. Credit card autofill's alternative leaves us with more users allowing sites to store their data. This leaves users at higher risk for credential compromise overall. If a user doesn't use a social login, we have password managers and passkeys as strong authentication alternatives. ",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2396810390,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-10-07T12:36:27Z",
        "updated_at": "2024-10-07T12:36:27Z",
        "body": ">  in part because it gets rid of the awkward detail of there being an \"input\" IdentityCredential and an \"output\" IdentityCredential that behave distinctly but are the same class in WebIDL\r\n\r\nwe could drop the create and constructor and only allow `n.c.store()` to solve that problem. \r\n\r\nIMO if it is all the same it makes more sense to have one function call that does two things and use the state management that already exists in CredMan, rather than the IDP calling two functions to accomplish one task. ",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2397289811,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
        "created_at": "2024-10-07T15:45:27Z",
        "updated_at": "2024-10-07T15:45:27Z",
        "body": "> we could drop the create and constructor and only allow n.c.store() to solve that problem.\r\n\r\nPerhaps, one way to think about this problem, is to ask ourselves: is a \"stored\" credential still \"valid\" if the user is logged out? If not, what's the operation that \"deletes\" the \"store\"?\r\n",
        "user": "samuelgoto",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2397713057,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/51",
        "created_at": "2024-10-07T19:25:36Z",
        "updated_at": "2024-10-07T19:25:36Z",
        "body": "That makes sense. I guess someone needs to figure out how to deal with the account_id the assertion endpoint sends right now.",
        "user": "cbiesinger",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2400019016,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/46",
        "created_at": "2024-10-08T14:29:56Z",
        "updated_at": "2024-10-08T14:29:56Z",
        "body": "I'll close this, I can track https://github.com/fedidcg/LightweightFedCM/issues/51 and https://github.com/fedidcg/LightweightFedCM/issues/42.",
        "user": "philsmart",
        "is_owner": false,
        "is_contributor": false,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2433200484,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/52",
        "created_at": "2024-10-23T19:01:28Z",
        "updated_at": "2024-10-23T19:02:12Z",
        "body": "> I think there is probably a more interesting direction to pursue if doing a \"a full re-work toward creating the axiomatic base of FedCM\".\r\n> \r\n> This proposal creates a sort of parallel construction in the client side for the IDP under setStatus. What if we instead think about what we can accomplish if we take the subset to the extreme. The biggest pain point is custom infrastructure and the site-level well-known. I think we can remove both of those with three changes:\r\n> \r\n> 1. Don't fetch account information before the user has consented to link identities via an IDP-targeted dialog on the RP site.\r\n\r\nMaking sure I understand you correctly; User clicks a button on the RP's site that says \"sign in with ExampleIdP\", the user gets a generic prompt of the form \"This site would like to link to your identity with ExampleIdp.com, is that OK?\" and then if the user selects \"yes\", we invoke the current FedCM logic (check login status, if status is logged-in at ExampleIdp.com, retrieve the specified config and do the /accounts endpoint lookup, then go through the standard FedCM flow with several elements being optional now? And if the IDP isn't logged in, navigate to the login_url in the config file?\r\n\r\n> 2. Remove the .well-known requirement\r\n\r\nOne wrinkle here is that there is a [proposal in-flight](https://github.com/w3c-fedid/FedCM/issues/552#issuecomment-2035673343) for moving the `login_url` to the `.well_known/identity` file, though I'm guessing we'd keep the `login_url` through the config JSON as an option.\r\n\r\n> 3. Permit the entire config contents to be given in the sign in status endpoint, if desired.\r\n\r\nAlongside the account profile information if the IdP doesn't want to have to implement /accounts? Could you outline what this looks like in practice with a small code snippet?\r\n\r\n\r\n",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2435748956,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/52",
        "created_at": "2024-10-24T16:32:54Z",
        "updated_at": "2024-10-24T16:32:54Z",
        "body": "> > I think there is probably a more interesting direction to pursue if doing a \"a full re-work toward creating the axiomatic base of FedCM\".\r\n> > This proposal creates a sort of parallel construction in the client side for the IDP under setStatus. What if we instead think about what we can accomplish if we take the subset to the extreme. The biggest pain point is custom infrastructure and the site-level well-known. I think we can remove both of those with three changes:\r\n> > \r\n> > 1. Don't fetch account information before the user has consented to link identities via an IDP-targeted dialog on the RP site.\r\n> \r\n> Making sure I understand you correctly; User clicks a button on the RP's site that says \"sign in with ExampleIdP\", the user gets a generic prompt of the form \"This site would like to link to your identity with ExampleIdp.com, is that OK?\" and then if the user selects \"yes\", we invoke the current FedCM logic (check login status, if status is logged-in at ExampleIdp.com, retrieve the specified config and do the /accounts endpoint lookup, then go through the standard FedCM flow with several elements being optional now? And if the IDP isn't logged in, navigate to the login_url in the config file?\r\n\r\nYes, with some smoothing like skipping the account chooser UI where there is only one account.\r\n> \r\n> > 2. Remove the .well-known requirement\r\n> \r\n> One wrinkle here is that there is a [proposal in-flight](https://github.com/w3c-fedid/FedCM/issues/552#issuecomment-2035673343) for moving the `login_url` to the `.well_known/identity` file, though I'm guessing we'd keep the `login_url` through the config JSON as an option.\r\n\r\nI think that proposal's motivation is obviated by removing the well-known.\r\n\r\n> > 3. Permit the entire config contents to be given in the sign in status endpoint, if desired.\r\n> \r\n> Alongside the account profile information if the IdP doesn't want to have to implement /accounts? Could you outline what this looks like in practice with a small code snippet?\r\n\r\nThis is what I meant. The nice bit here is we could drop the Lightweight FedCM specific stuff from the n.c.get.\r\n\r\n```js\r\nnavigator.login.setStatus(\"logged-in\", {\r\n\taccounts: [{\r\n\t\tid: \"1234\",\r\n\t\tname: \"John Doe\",\r\n\t\temail: \"foobar@example.com\",\r\n                picture: \"https://example.com/users/foobar.jpg\",\r\n        }],\r\n        apiConfig: { // example name and a few useful parameters.\r\n          id_assertion_endpoint: \"/foo/id\",\r\n          login_url: \"/login.html\",\r\n        },\r\n        expiration: 86_400_000 // 24 hours\r\n});\r\n```\r\n\r\nThis bullet is also the one I think could just be dropped, since the user could just put whatever they want in the config file easily.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2436289820,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/52",
        "created_at": "2024-10-24T20:34:23Z",
        "updated_at": "2024-10-24T20:34:43Z",
        "body": "> This is what I meant. The nice bit here is we could drop the Lightweight FedCM specific stuff from the n.c.get.\r\n\r\nI think we already get there with the current state of the PR.\r\n\r\n> This bullet is also the one I think could just be dropped, since the user could just put whatever they want in the config file easily.\r\n\r\nAgreed; I think it's not strictly necessary and we can add it later if there's demand for it. \r\n\r\nSo, I think the change that needs to happen to this PR is this: `.well-known/identity` is optional. If `.well-known/identity` isn't present for an IdP, the UA must present a confirmation to the user before any further requests are issued to the IdP OR any stored account information is presented. If a `.well-known/identity` is present (and contains the provided configURL) and the user has `logged-in` status with the IdP, it's UA-defined whether the UA elides that confirmation and instead just displays a list of available accounts.\r\n\r\nDoes that sound right?",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2438061520,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/52",
        "created_at": "2024-10-25T15:01:42Z",
        "updated_at": "2024-10-25T15:01:42Z",
        "body": "> > This is what I meant. The nice bit here is we could drop the Lightweight FedCM specific stuff from the n.c.get.\r\n> \r\n> I think we already get there with the current state of the PR.\r\n\r\nI was looking at the rp: field where the metadata endpoint was replaced and thought that was a new addition.\r\n\r\n> \r\n> > This bullet is also the one I think could just be dropped, since the user could just put whatever they want in the config file easily.\r\n> \r\n> Agreed; I think it's not strictly necessary and we can add it later if there's demand for it.\r\n> \r\n> So, I think the change that needs to happen to this PR is this: `.well-known/identity` is optional. If `.well-known/identity` isn't present for an IdP, the UA must present a confirmation to the user before any further requests are issued to the IdP OR any stored account information is presented. If a `.well-known/identity` is present (and contains the provided configURL) and the user has `logged-in` status with the IdP, it's UA-defined whether the UA elides that confirmation and instead just displays a list of available accounts.\r\n> \r\n> Does that sound right?\r\n\r\nYeah, that sounds right.\r\n\r\n\r\nFrom an editorial perspective, it may be worth a clarifying pass too (either in this PR or after). The original proposal was written as an independent credential type, so the current structure with this PR is a little confusing. Specifically, it would be nice to concisely enumerate the additions this makes to FedCM and the minimal list of FedCM features this relies upon to accomplish the goals set out. That would clarify the \"what\" of the proposal.",
        "user": "bvandersloot-mozilla",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    },
    {
        "id": 2448284042,
        "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/52",
        "created_at": "2024-10-30T20:17:47Z",
        "updated_at": "2024-10-30T20:17:47Z",
        "body": "I've added a bunch of sections about what supplying configuration via `setStatus` means for the privacy model and functionality, and what mitigations or changes need to happen.",
        "user": "ekovac",
        "is_owner": false,
        "is_contributor": true,
        "repository_id": "fedidcg/LightweightFedCM"
    }
]