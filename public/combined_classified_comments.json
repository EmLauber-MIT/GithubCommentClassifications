[
  {
    "id": 981893736,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-11-29T18:19:17Z",
    "updated_at": "2021-11-29T18:19:17Z",
    "body": "I was reading the updated FedCM API spec and while the introduction discusses the need to solve identity experiences that will be broken when support for 3rd party cookies is removed, many (if not most) of the use cases described are not broken by the removal of support for 3rd party cookies. Therefore, it is unclear to me if the proposed solution is a more general (as in new) way to support identity federation with the browser acting as a mediator in all identity flows, or a more specific proposal to address the flows that will be broken (e.g. single-sign-out, sign-in widget on relying party for federated sign-in). Is it possible to clarify this before acceptance as a work item for the group?",
    "user": "gffletch",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment expresses skepticism about whether the proposed solution is a more general or specific proposal to address various identity experiences that will be broken with the removal of support for 3rd party cookies, and requests clarification before accepting it as a work item."
  },
  {
    "id": 981948597,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-11-29T19:31:20Z",
    "updated_at": "2021-11-29T19:31:20Z",
    "body": "For the flows in the spec, I realized we never stated explicitly, but the cases being referenced are when the flow is done through an iframe. You can still do federated login using top level redirects, but after 3rd party cookie deprecation doing siginin within an iframe will not work as the IDP cookies will no longer be passed.\r\n\r\nWould adding the the iframe clarification clear up the issue? Or are there other specific use-cases listed in the spec which are problematic from your point of view?",
    "user": "dj2",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The commenter is requesting clarification on the behavior when using iframes, specifically to resolve a potential issue with federated login. They suggest adding an iframe-specific note to address this limitation and highlight other potentially problematic use cases in the specification that may require further consideration."
  },
  {
    "id": 981953610,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-11-29T19:38:18Z",
    "updated_at": "2021-11-29T19:38:18Z",
    "body": "> Therefore, it is unclear to me if the proposed solution is a more general (as in new) way to support identity federation with the browser acting as a mediator in all identity flows, or a more specific proposal to address the flows that will be broken (e.g. single-sign-out, sign-in widget on relying party for federated sign-in).\r\n\r\nGood question, and sorry for not making it clear enough, but it is for the latter: the more specific / narrow proposal to address the flows that will be broken by the deprecation of third party cookies (used in iframes and XHR as @dj2 suggested).",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "The comment appears to provide a clarification on the proposed solution's scope, specifically addressing concerns about the proposed solution being too broad or general. It does not offer new technical information or propose a change to existing functionality, which are characteristics of Technical Feedback or Feature Requests. The tone is also professional and polite, suggesting it may be part of an administrative process or discussion, such as a meeting or feedback session."
  },
  {
    "id": 982003592,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-11-29T20:41:41Z",
    "updated_at": "2021-11-29T20:41:41Z",
    "body": "@dj2 @samuelgoto Thank you for your responses! I do think it would be good to clarify in the doc. Possibly in section 1.1 call out that these use cases refer to these flows occurring in an iframe. That would help to constrain the over all doc to be referring to flows that occur within iframes.",
    "user": "gffletch",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "This comment is requesting a clarification or additional information in the documentation, which indicates that it is related to enhancing user experience (UX) by specifying the nature of the flow being referred to, thereby guiding readers on what to expect from those flows. The mention of \"in section 1.1\" also implies that this feature request pertains to a specific part or page within the documentation."
  },
  {
    "id": 983044629,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-11-30T21:39:42Z",
    "updated_at": "2021-11-30T21:39:42Z",
    "body": "@gffletch I've integrated a change to hopefully clarify. I've got an outstanding request to add more context of third-party cookies in there. Does the clarification added address your concerns?",
    "user": "dj2",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment is expressing a concern and asking if the clarification provided addresses it, which indicates that this is not technical feedback or administrative."
  },
  {
    "id": 988267684,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-12-07T21:14:21Z",
    "updated_at": "2021-12-07T21:14:21Z",
    "body": "This was approved on the 2021-12-03 call: https://github.com/fedidcg/meetings/blob/main/2021/2021-12-03-notes.md",
    "user": "timcappalli",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "The comment appears to be providing administrative information, specifically referencing a meeting that was approved and documented on the 2021-12-03 call, linked to a GitHub repository. It doesn't pose any technical, use case, or philosophical questions, nor does it request something specific from others."
  },
  {
    "id": 988980941,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2021-12-08T16:41:57Z",
    "updated_at": "2021-12-08T16:41:57Z",
    "body": "@dj2 I'm glad to see the document was accepted by the WG. I do think the clarifications help. They might need to be restated and readers may gloss over them, but generally it sets a much narrower context which I think will help:)\r\n\r\nMy apologies for being so tardy in my response.",
    "user": "gffletch",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "The comment provides feedback on the acceptance of a document by a Working Group (WG), specifically mentioning that the clarifications are helpful and setting a narrower context, suggesting it addresses a specific use case."
  },
  {
    "id": 1009420639,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/1",
    "created_at": "2022-01-10T22:44:55Z",
    "updated_at": "2022-01-10T22:44:55Z",
    "body": "Note: this move has been completed. https://github.com/fedidcg/FedCM. Thanks everyone who helped!",
    "user": "travisleithead",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment is providing constructive feedback on the implementation of a new feature, specifically an announcement that the codebase has been updated and a thank you for the help received from others. The tone is neutral and factual, with no requests or demands being made to anyone else."
  },
  {
    "id": 1013280245,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-14T16:38:29Z",
    "updated_at": "2022-01-14T16:38:29Z",
    "body": "@LGraber - you may be interested in the \"[Teams SSO](https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso#get-an-access-token-with-graph-permissions)\" flow that implements this pattern using postMessage (behind an SDK).  We've found that it's insufficient for proper use - the deeplinked note explains why.  This flow works ok for webapps that use cookie auth, but SPAs (that have no backend) cannot use this flow to run, because they cannot get additional tokens.  We are redesigning this flow in order to move away from it, as opposed to doubling down on it. ",
    "user": "hpsin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides a specific example of a technical issue that can be improved or resolved, which is the limitation of using postMessage for non-SPAs (Single Page Applications) when SSO authentication is required."
  },
  {
    "id": 1013292356,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-14T16:54:20Z",
    "updated_at": "2022-01-14T16:54:20Z",
    "body": "@hpsin I don't follow the limitations referenced in your link. Why would postMessage not be an alternative to the functionality that @LGraber is proposing for #22?\r\n\r\n@LGraber  would passing the access_token as a fragment in the URL for the iFrame work? (I have not tried that) -- it would have similar security properties to passing parameters from the AS to the client using a fragment.",
    "user": "dickhardt",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "The comment is discussing the limitations of the current approach and questioning whether postMessage should be used as an alternative, which implies that they are exploring how to improve or address these limitations."
  },
  {
    "id": 1013331151,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-14T17:48:49Z",
    "updated_at": "2022-01-14T17:48:49Z",
    "body": "postMessage is an alternative - the issue is that the end state of both is insufficient to run a full-fledged application that has its own identity and session.  This is a valid proposal to implement OAuth inside an embedded tag (iframe, img, etc) but it's insufficient for authentication, which is the limitation hit in the link. ",
    "user": "hpsin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment proposes an alternative solution to address the issue of insufficient end state for full-fledged application authentication, suggesting OAuth implementation within an embedded tag or iframe, with a valid justification that it's sufficient for authentication but not sufficient for running a full-fledged application."
  },
  {
    "id": 1013491844,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-14T21:39:29Z",
    "updated_at": "2022-01-14T21:39:29Z",
    "body": "@hpsin Hirsh ... if you have time, I would like to talk about it. Obviously you have some insight into more customers but there are some use cases I think that can / do work. My claim is that there is not one single magic bullet that we are going to solve but that we might need a set of mechanisms that can work well for different use cases and/or might be easier for some people to transition to. As Kris pointed out, I think we should have a recommendation on how this can work and it, ideally, should not require super heavy lifting for all of the developers.\r\n\r\nWe actually built a solution using the token in the frame. We had to do a bunch of work to protect it and essentially make them single use but it works. @dickhardt putting it the url of the frame is the security risk because request urls are logged all over the place (perhaps not in browser history). If it is in a header ... it is not logged (ideally). If what I had proposed existed, it would have significantly reduced the work we needed to do. We actually can switch to using PostMessage given how we built it without any changes to our customers but ... I would like to understand more other people's experiences. I don't think we got technical enough in the meeting today :)",
    "user": "LGraber",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "This comment expresses a suggestion for improving the current solution by proposing an alternative approach that could simplify the implementation and reduce the effort required from developers, specifically mentioning PostMessage as a potential mechanism. The commenter also asks others to share their experiences with similar solutions, indicating that it's a request for feedback or guidance rather than purely technical feedback, use case description, administrative discussion, conclusion/resolution, philosophical insight, or an unknown category."
  },
  {
    "id": 1013496654,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-14T21:48:49Z",
    "updated_at": "2022-01-14T21:48:49Z",
    "body": "@LGraber , certainly - either here or hirsin @ my employer is good. I agree in principle - there are certainly things that this solves, that we've seen solved using postMessage (but in a cleaner way that is easy to parse, rather than bespoke protocols). I'm not opposed, and agree that is solves a subclass of #22.  I would only argue that it doesn't provide \"SSO\" as described in the issue title - it provides an access token, that can sometimes (depending on IDP) be parlayed into a session on the RP2 back-end. \r\n\r\nMy intent here is not to say this is bad, only to provide additional backing to your statement that other options (alongside this one) may be necessary. ",
    "user": "hpsin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback on the proposed solution, suggesting alternative approaches and providing additional context to support its validity. It aims to improve understanding and address potential concerns or criticisms related to the proposed technique."
  },
  {
    "id": 1013563395,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-15T00:45:43Z",
    "updated_at": "2022-01-15T00:45:43Z",
    "body": "@LGraber my suggestion was putting the access token in a URL fragment. I understand the security issues of the access token in the URL that is sent to the server. The fragment is not sent to the server, and can be retrieved by the iFrame javascript using `window.location.hash`\r\n\r\nThis mechanism is common in OAuth 2 for sending the authorization response back to a client to prevent the  authorization code, ID Token, access token from being logged in the clients server. It also works well for SPA apps. The diagram in [4.2](https://datatracker.ietf.org/doc/html/rfc6749#section-4.2) shows how it works.\r\n\r\nOAuth 2 does not allow URL fragments per [3.1.2](https://datatracker.ietf.org/doc/html/rfc6749#section) so that the fragment is available for results. \r\n\r\n@hpsin for authentication, why not pass an ID token to the iFrame? If passed as a fragment, it seems to have the same security properties as a full OIDC flow using:\r\n\r\n        `response_type=id_token`\r\n        `response_mode=query`\r\n\r\n\r\n\r\n\r\n",
    "user": "dickhardt",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on an existing solution (putting access token in a URL fragment) and suggests alternative approaches (passing ID token as a fragment). It also explains the security implications of the current approach and compares it to proposed changes. The tone is constructive and aimed at improving the current implementation, making this a technical comment."
  },
  {
    "id": 1013751882,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2022-01-15T20:48:53Z",
    "updated_at": "2022-01-15T20:48:53Z",
    "body": "@dickhardt Sorry ... I see what you are saying. That is interesting. (I think) It is similar'ish to PostMessage but simpler. The resource server still needs to server up an initial, unauthenticated page, get the access_token from the fragment, and send it back to the resource server to AuthN/Z the user and determine if whatever resource is being requested should be loaded. I agree that seems simpler than postMessage (although I haven't thought through all the security questions but perhaps you have). I wonder how we think comparatively of that flow versus the flow which sends the token in the Auth header on the initial get request for the iframe src. For a lot of apps, I can see how what you are talking about would work quite well ",
    "user": "LGraber",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed information about a technical issue with the proposed solution and suggests improvements, indicating that it is focused on clarifying and refining the implementation rather than providing new ideas or requirements."
  },
  {
    "id": 1366070796,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2022-12-27T17:42:41Z",
    "updated_at": "2022-12-27T17:42:41Z",
    "body": "One thing we need to be sure everyone is aligned on is terminology. In the identity world, registration is typically another term for account creation. I think in some of these browser flows, registration could mean either account creation, or \"linking\" the IdP + account to the browser. \r\n\r\nThe rest of my comments are in the context of the identity use of registration (account creation).\r\n\r\nIn many cases, the registration (account creation flow) does not happen in the same browser or on the same device, or may not even be done by the end user (ex: work/school account created on your behalf). So for \"RP Log in\" step2, what happens if the user already has an account with the IdP, but did not create that account in this browser or device?\r\n\r\n> RP Log out\r\n\r\nLogging out of only the local site is the typical experience for consumer services that use a third party sign in provider, but this is not typical for work/school where global sign out is required. In some of the FedCM discussions, we had talked about potentially having a model where the browser call logout endpoints on behalf of the IdP.",
    "user": "timcappalli",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides an explanation and suggestion related to technical implementation, specifically around terminology usage in the identity world, and how it might impact user experience in certain scenarios. The tone is helpful and informative, with a focus on clarifying details rather than arguing or proposing new ideas."
  },
  {
    "id": 1369789212,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-03T13:47:27Z",
    "updated_at": "2023-01-03T14:13:45Z",
    "body": "> One thing we need to be sure everyone is aligned on is terminology. In the identity world, registration is typically another term for account creation. I think in some of these browser flows, registration could mean either account creation, or \"linking\" the IdP + account to the browser.\r\n\r\nAh, good to know. I've added strikethroughs and replacement text above. I was using registration as I understood it was used in FedCM- to mean linking.\r\n\r\n> In many cases, the registration (account creation flow) does not happen in the same browser or on the same device, or may not even be done by the end user (ex: work/school account created on your behalf). So for \"RP Log in\" step2, what happens if the user already has an account with the IdP, but did not create that account in this browser or device?\r\n\r\nThey go to Linking step2 and in step3 the IDP \"popup (or new tab) appears of idp.com that allows the user confirm the permissions for example.com\" would allow them to log in to the IDP before making permissions decisions.\r\n\r\n> Logging out of only the local site is the typical experience for consumer services that use a third party sign in provider, but this is not typical for work/school where global sign out is required. In some of the FedCM discussions, we had talked about potentially having a model where the browser call logout endpoints on behalf of the IdP.\r\n\r\nSome version of this is probably still possible in depending on the structure of the endpoints. We would need to add them to some in-browser store at linking-time and add an IDP logout to the Federated Login Status API that issues those requests with first-party cookies. Does that sound reasonable as a high-level description?",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed explanations and reasoning behind proposed changes, clarifies ambiguities in terminology, and offers solutions to potential problems or complexities in implementing the Federated Login protocol. It is providing technical insight and guidance rather than just stating a fact."
  },
  {
    "id": 1373142785,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-06T04:52:55Z",
    "updated_at": "2023-01-06T04:52:55Z",
    "body": "I provided a version of this feedback in a discussion with @bvandersloot-mozilla, but I thought that I'd surface my feedback on it.\r\n\r\nAn extension to the FedCM is my preferred way to approach this; though the fully-worked standalone example is helpful for understanding the ideas without encumbrance, we have an obligation to reconcile our changes with what exists.  There are also some key aspects of FedCM that are worth retaining.\r\n\r\nThere are 2 things here that are fairly critical extensions to the basic functions that FedCM provides:\r\n\r\n1. A way for a user to log in or sign up to an IdP.\r\n2. A way for the user and IdP to interact and define more precisely what the identity (or token) means.\r\n\r\nBoth address what I consider are major shortcomings of the current FedCM approach.  They both largely follow the same high-level interaction, but the latter really opens up a bunch of authorization cases.\r\n\r\nI like @timcappalli's insistence on the word \"linking\"; it (coincidentally?) highlights my main concern with this sort of interaction model.  No matter what happens here, this sort of API enables *linkability*.  That is, it allows the RP and IdP to link activity on their respective sites to the same person.  Linkability enables [cross-site tracking](https://www.w3.org/2001/tag/doc/unsanctioned-tracking/), which is undesirable in the general case and why we now insist on sites gaining explicit and deliberate permission prior to allowing it.\r\n\r\nThat brings me to my next point.  If we are to open up the API to authorization use cases (which I think is justified), there are constraints that a browser might want to apply that aren't necessarily present in existing systems.\r\n\r\nI'm going to use a bit of a bad example here to illustrate my point, but it is the best I have that illustrates the potential for there to be a gap between actuality and practice, so bear with me.  Let's say that you have a vendor of adult beverages who wants some certainty that their customer is over 21.  Now, leaving aside the many problems with this use case[^1], you might imagine the vendor being an RP to an IdP that can authorize the generation of a [verifiable credential (VC)](https://www.w3.org/TR/vc-data-model/) that says \"IdP X has verified that this person is over 21\".\r\n\r\nThere is a gap here between the user's understanding of that interaction and the reality.  A user might expect that there is a single bit of information flowing from IdP to RP: whether they are over 21 or not.  Leaving aside the fact that one bit of information can be enough to enable tracking, the sort of exchange contemplated here contains far more information than that.  Consequently, whether or not the RP and IdP act to link user identities across sites, they now have that capability.\r\n\r\nPart of building a system like this is building in controls (like choosers and permissions prompts), but we also need to think about accountability for those cases where sites gain access to these capabilities.  These controls need to be commensurate with the capabilities that are being extended to sites.\r\n\r\nThankfully, I think that the existing FedCM approach provides all we need here to hang off.  The account details that the IdP extends to the RP are bound to an identifier that the browser understands and can present to the user.  That identifier (perhaps with a friendly name and image provided by the IdP) gives us a strong handle that can be the basis of providing feedback and control over the linkage.\r\n\r\nInsisting on authorization flows being elevated to employ all the characteristics of federated login might seem like overreach.  However, the only requirement is the inclusion of a label for each authorization: the identifier.  For each authorization, the IdP can maintain a set of tuples that include the RP, the allocated identifier, the set of resources that were exchanged/authorized with the RP under that identifier, plus supplementary information (a name, a picture, access times, etc...).  The browser can maintain its own view, with stores for each RP that record the IdP, the identifier as known to the RP, the identifier as known to the IdP, any active tokens, and other information.\r\n\r\nIn the degenerate case, the allocated identifier might be the primary identifier for the user at the IdP (`user@idp.example`), but this offers a great opportunity to engage with projected identity (`<random-seeming>@auth.idp.example`).  IdPs can allocate identifiers that aren't linkable to the canonical identifier.  This identifier is then a handle on a specific IdP-RP interaction.  Projected identity is therefore optional, but it gives IdPs a more privacy-respecting option.\r\n\r\nThere's a lot more to this that needs to be worked out, like the various revocation flows, but it would help if we could get alignment on a basic model like the one suggested here.  Most of these details should become more tractable once there is a good set of handles that all actors can agree to.\r\n\r\n\r\n[^1]: It's hard to know exactly where to start on the problems with this example, so I'll just point out that online age verification has a long and chequered history.  I will, however, point out that [Privacy Pass](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-architecture) and [Private State Tokens](https://wicg.github.io/trust-token-api/) (warning: hard hat area) provide an alternative approach for passing low entropy signals between sites and so might offer a superior approach when applied to this class of problem.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "The comment provides feedback on the proposed extension of the FedCM, which is aimed at addressing shortcomings in its current approach. It requests changes to include login and identity linking functionality, as well as authorization flows that enable linkability between sites and identities. The commenter also touches upon accountability considerations and proposes a basic model for handling these interactions. However, their suggestions are not necessarily technical or feature-related but rather administrative, focusing on providing guidance and clarification."
  },
  {
    "id": 1400498598,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-23T15:04:12Z",
    "updated_at": "2023-01-23T15:04:12Z",
    "body": "Hey @bvandersloot-mozilla, this is an interesting proposal! I had a few questions which I'll try to ask at the call later today, but wanted to also post them here to allow for preparation or following up:\r\n\r\n1. Can you point to any documented breakage or developer experience issues that this would help with? I'm not saying that they don't exist, it would just help inform the discussion to know what we're trying to solve for. So, in other words, what is the API gap that we're filling with this vs. existing FedCM?\r\n\r\n2. \r\n> \"Can we manage to do front-channel logout if the RP constrains its use of Credentials.\"\r\n\r\ncan you expand on what \"constrains\" means here?\r\n\r\n3. How does your proposal interact with @martinthomson's comment above? (I had a quick chat with Martin to clarify some aspects of what he's saying here, which I think is approximately that we're still exchanging identifiers even for authentication and should embrace it)? I think it would be useful to describe how the \"authentication\" use case influences the design decisions in your proposal.\r\n\r\n4. Related to that:\r\n> \"Can we support redirect login flows with minor changes to this definition and no change in UX or DX?\"\r\n\r\nCan you expand on this question?\r\n",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "The comment is asking specific questions about the proposed API, such as documenting breakages and developer experiences, and clarifying a concept related to authentication. This suggests that the commenter wants to understand how the proposal addresses real-world issues and pain points in the FedCM ecosystem."
  },
  {
    "id": 1400536705,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-23T15:26:36Z",
    "updated_at": "2023-01-23T15:30:07Z",
    "body": "> A way for a user to log in or sign up to an IdP.\r\n\r\nIn most cases, the user is not signing up for an account at the IdP.\r\n\r\nWe should explicitly split out accounts, relationships, and credentials:\r\n- Local account, local credential\r\n- Local account, federated credential\r\n\r\nSo we end up with the following inline combinations:\r\n\r\n1. User creates a local account at the RP, using a local credential(s) [common]\r\n2. User signs in with a local account at the RP [common]\r\n3. User creates a local account, using an existing federated identity (common)\r\n4. User creates a local account, using an existing federated identity, that uses an existing federated identity (aka chaining) [common in work/school]\r\n5. User creates a local account, using a newly created federated identity [not very common for 3P consumer]\r\n6. User adds a federated identity to an existing local account [fairly common, happens out of band]",
    "user": "timcappalli",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed information and suggestions related to the technical implementation of IdP functionality, specifically regarding how to handle different types of user actions (signing up vs. logging in). It is focused on optimizing and improving the technical aspects of the system rather than providing a use case or administrative insight."
  },
  {
    "id": 1400583540,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-23T15:57:25Z",
    "updated_at": "2023-01-23T15:57:25Z",
    "body": "\r\n>     1. Can you point to any documented breakage or developer experience issues that this would help with? I'm not saying that they don't exist, it would just help inform the discussion to know what we're trying to solve for. So, in other words, what is the API gap that we're filling with this vs. existing FedCM?\r\n\r\nIt is hard to point to exactly one issue, but there are two things this helps address:\r\n\r\n1. Not-logged-in users (#67, w3c-fedid/FedCM#283, w3c-fedid/FedCM#380)\r\n2. IDPs that do not want to implement the new API endpoints (can't find an issue, but has been discussed in meetings)\r\n\r\n> \r\n> \r\n> > \"Can we manage to do front-channel logout if the RP constrains its use of Credentials.\"\r\n> \r\n> can you expand on what \"constrains\" means here?\r\n> \r\n\r\nOnly use the `token` via the Credential, rather than storing it in Local Storage and not using the API. This allows us to delete the relevant Credentials to prevent their use, effectively logging the user out.\r\n\r\n>     3. How does your proposal interact with @martinthomson's comment above? (I had a quick chat with Martin to clarify some aspects of what he's saying here, which I think is approximately that we're still exchanging identifiers even for authentication and should embrace it)? I think it would be useful to describe how the \"authentication\" use case influences the design decisions in your proposal.\r\n\r\nRE @martinthomson's comment:\r\n1. This credential type would be integrated with \"identity\" using its CredentialRequestOptions.\r\n2. The primary point of this design that is influenced by the AuthN use case is the `FederatedProviderConfig` which is pretty bare to just transmit a `blob` of data associated with a `clientId` and whatever information is needed to make the flow happen (`loginURL`, `style`).\r\n3. The best way to combine Martin's view with this proposal is to roll some of the `IdentityProviderAccount` information into this proposal's `completeFederatedLoginRequest`. In particular, a user-friendly account name and picture URL. This would give the user some way to know what account this is when managing it. Probably unifying the two flows (Server API and Federated Login Status API) would be a tactic I prefer, via changing the argument of  `completeFederatedLoginRequest` to objects representing the Server API responses.\r\n4. Additionally, we would need to augment the `IdentityProviderToken` to represent a broader set of claims representable to the user. The example Martin used here was age > 21. This gives the user the chance to understand what is being exchanged a bit better \r\n\r\n@martinthomson: feel free to correct me if I misunderstand you here.\r\n\r\n> \r\n>     4. Related to that:\r\n> \r\n> \r\n> > \"Can we support redirect login flows with minor changes to this definition and no change in UX or DX?\"\r\n> \r\n> Can you expand on this question?\r\n\r\nCurrently this proposal assumes a new tab/window is opened to log in to the IDP. This question is asking if we can manage to do this in the same tab with this approximate structure.\r\n\r\n\r\n\r\nThis is a little last minute, but I'll try to get my thoughts here before our meeting. Sorry for any places where I'm not verbose enough.\r\n",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "This comment appears to be an administrative update or clarification on the proposal, specifically addressing technical issues and clarifying design decisions, which is a common use case in software development discussions. The tone is formal and informative, with a focus on providing context and ensuring understanding of the proposed solution."
  },
  {
    "id": 1401280450,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-24T01:24:32Z",
    "updated_at": "2023-01-24T01:24:32Z",
    "body": "> Additionally, we would need to augment the IdentityProviderToken to represent a broader set of claims representable to the user. The example Martin used here was age > 21. This gives the user the chance to understand what is being exchanged a bit better\r\n\r\nI think that the >21 example was probably misconstrued.  That was a negative example, as in I wanted to highlight something that browsers shouldn't do.  I deliberately chose a bad example for that reason, but I guess it's hard to get this stuff right...\r\n\r\nMy core point was that browsers shouldn't be in the business of arbitrating at that level of granularity.  The shape of the API is such that RP and IdP join identity; that's the real effect of any token exchange, no matter what limitations might be claimed.\r\n\r\nOnce identity is joined, the sites can exchange whatever information they choose for this user, bound only by what they know about the user.  Of course, trustworthy sites will give users control over what they exchange.  But at a technical level, the browser is no longer involved.\r\n\r\nWhat I am aiming to do here is ensure that the browser has a handle (an identifier) that it can use as a handle for talking to the user about what is going on.  That identifier can be used by both sites so that all parties have a basis for building a shared understanding:\r\n\r\n* The browser can say that X is provided by the IdP and given to the RP.\r\n* The IdP can use X when talking about the set of information that is being exchanged with the RP.\r\n* The RP can use X when talking about what it has obtained from the IdP.\r\n\r\nThe information we're talking about here could be traits or authorization information.  The browser doesn't need to care.  But it's not an opaque token, it's something that is both user-visible and a key part of all subsequent interactions.  (Adding a name and picture is potentially helpful in making the handle more manageable and accessible, but secondary.)\r\n\r\nOf more serious import is whether we can do anything to ensure that the identifier can be meaningful to users.  I'm not sure that we have a solid defense here.  What stops an IdP from minting identifiers that appear to reveal nothing (over21@example.com for instance), but then using the API to covertly exchange far more than that?",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "This comment provides specific information about how identity and authorization are handled in a web application, which is the primary focus of a use case. It outlines the user's experience with tokens, such as their handle or identifier, being used to facilitate interactions between different systems. The comment identifies key aspects of the system's behavior, including its role in arbitrating at the level of granularity and how it handles sensitive information like age. This provides valuable insights into the technical implementation of a web application that handles identity and authorization."
  },
  {
    "id": 1401301689,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-24T01:58:15Z",
    "updated_at": "2023-01-24T02:04:42Z",
    "body": "@bvandersloot-mozilla just wanted to write down here what I hopefully relaid in person at the FedID CG call.\r\n\r\nFirst and foremost, I wanted to say that we all got this proposal with a good amount of excitement: it was great to see Firefox being creative about variations here and propose ways in which we could help the ecosystem!\r\n\r\nSecond, I wanted to give some validation about the problem statement: `preserve federated login scenarios without adding IDP APIs`. Decreasing operational and deployment costs for IdPs is a really important problem that we would all agree is unsatisfying about FedCM at the moment.\r\n\r\nThird, I'm sure this was intended by you, but something to be said explicitly is that FedCM lacks an \"extensibility\" story: ways in which IdPs can innovate without asking for permission. That, in addition to decreasing costs, is an area that we haven't investigated enough, and are interested in seeing proposals!\r\n\r\nFourth, I loved the way you went about it: you isolated your proposal into something self-contained and easy to review, but made it clear that it probably should live as an extension of something else rather than something on its own. I think that's a great way to make forward progress.\r\n\r\nFifth, I wanted to say that, while it is great to see exploration, we are / were struggling to understand the proposal (specially because it seems that @martinthomson and you are talking about different things when we first read).\r\n\r\nSo, here are some (clarifying-and-genuinely-non-judgemental) questions that I asked you today, along with what I think we heard from you:\r\n\r\n1. Is the permission here per IdP or per Rp/IdP pair? Ben: the latter, per Rp/IdP pair.\r\n2. What does the permission entitle? Third party cookies? Ben: nope, IdP gets loaded as a top-level frame, first party context.\r\n3. At what point does the IdP learn about the Rp? Ben: after the permission is accepted, the browser loads the IdP in a top-level frame with the information about the requestor, the Rp.\r\n\r\nAnd three questions that I think I don't think I got a clear answer from you:\r\n\r\n1. Isn't this already possible with link decoration, `postMessage()` and `window.open()` without any browser permissions? Why would an IdP choose to use this (more constrained and less performant) API if it can already do this? Ben: Good question, let me get back to you on this.\r\n2. You made a few references to the `Login Status API` but this feels similar to the `Storage Access API` when it comes to linking identities with a permission prompt. What's the relationship between this and SAA?\r\n3. Does this API unlock something special later? For example, can the IdP do front-channel logout?\r\n\r\nWhen we started FedCM ([TPAC2020](https://github.com/fedidcg/FedCM/blob/main/meetings/2020/The%20Web%20Platform%2C%20Privacy%20and%20Federation%20-%20TPAC.pdf)) we looked at three different variations. We called them: the Permissions-oriented variation, the Mediation-oriented (what we ended up with) variation and the Delegation-oriented (Personas-like) variation.\r\n\r\nWe were very deliberate about starting with mediation, but we always thought of the permission variation as complementary and co-existing, rather than in opposition of: mediation is always going to be behind, paving the cowpath,  but we need an API that allows IdP to innovate without asking for (the browsers) permission.\r\n\r\nI think this proposal has a lot of similarities to the Permissions-oriented variation: a permission prompt that allows IdPs to control the rest of the flow. Here is a mock that we used early on [1].\r\n\r\nDoes [1] seem right? Is this more or less what you had in mind from a UX / permission perspective (modulo strings, obviously), but also from a browser affordance perspective (i.e. a pop-up window, with an origin attribution, but otherwise capable of loading the expressivity power of HTML/JS/CSS).\r\n\r\nIf this is more or less what you had in mind, I think you'd find a lot of synergy here from us.\r\n\r\n[1]\r\n\r\n![Untitled](https://user-images.githubusercontent.com/693738/214195535-4def5f5c-6291-495c-a974-f258aaf415f3.gif)\r\n",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "philosophical",
    "reason": "The comment is philosophical because it discusses the nature of FedCM, its ecosystem, and the relationship between IdPs (Identity Providers), browsers, and permission prompts. It also explores the concepts of extensibility, innovation, and user experience. While the comment expresses an opinion about the proposal's design and features, it does so in a thoughtful and reflective manner that suggests a deeper consideration of the philosophical implications rather than simply providing technical feedback or administrative guidance."
  },
  {
    "id": 1408677883,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-01-30T14:01:31Z",
    "updated_at": "2023-01-30T14:01:31Z",
    "body": "As I already expressed in the meeting, I agree with @martinthomson's point here:\r\n\r\n> My core point was that browsers shouldn't be in the business of arbitrating at that level of granularity. The shape of the API is such that RP and IdP join identity; that's the real effect of any token exchange, no matter what limitations might be claimed.\r\n\r\nThinking about any kind of other semantic than sharing identity (even with the restrictions Martin describes) seems to be an interesting challenge, but from my understanding of this thread and https://github.com/fedidcg/proposals/issues/3#issuecomment-1400583540 it doesn't seem to be the primary goal/pain point that this proposal is solving. As such, I would suggest that it poses a major distraction and that we should separate out the two ideas :)\r\n\r\nAs mentioned before, I'm otherwise very interested in this proposal and the potential for building a more flexible FedCM(-like) flow for developers, as long as we manage to keep the user experience relevant and contextual.",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "The comment discusses the feasibility of addressing a specific issue (arbitration at fine granularity) in a broader proposal, but emphasizes that it may not be the primary goal or concern. It also expresses interest in the potential for building a more flexible FedCM flow while maintaining user relevance and context. This suggests that the main purpose of the comment is to provide an alternative perspective on how to address the issue, rather than being a technical feedback point."
  },
  {
    "id": 1433176263,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/3",
    "created_at": "2023-02-16T14:30:31Z",
    "updated_at": "2023-02-16T14:30:31Z",
    "body": "I think this benefits from being split into several interrelated PRs on FedCM, as suggested by commenters. I've split the core points into [fedidcg/FedCM#441](https://github.com/fedidcg/FedCM/issues/441), [fedidcg/FedCM#442](https://github.com/fedidcg/FedCM/issues/442), [fedidcg/FedCM#443](https://github.com/fedidcg/FedCM/issues/443), and a comment on [fedidcg/FedCM#429](https://github.com/fedidcg/FedCM/issues/429) that led to PR [fedidcg/FedCM#439](https://github.com/fedidcg/FedCM/pull/439). \r\n\r\nGiven those discussions/proposals on FedCM, I will close this as completed.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment provides a justification for splitting several related PRs into separate requests, suggesting that the codebase benefits from being organized in multiple parts with interrelated features. This indicates that the feature request is to improve organization and structure of the code, rather than addressing technical issues or proposing a new feature directly."
  },
  {
    "id": 1452165323,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-02T16:32:05Z",
    "updated_at": "2023-03-02T16:32:05Z",
    "body": "Hello!\r\nIt is not clear to me what the difference is between `n.c.allowed.get` and `n.c.allowed.invoke`. More specifically, what I would use get for. \r\n\r\nAlso, the sequence diagram for this shows a flow that involves some kind of embedded discovery service (and I assume is limited to an embedded type). That is not clearly reflected in the test. For example, if the SP is in an unconfigured state, a first step could be to initiate discovery before the `put` API is called?",
    "user": "philsmart",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive criticism of a specific part of the code (the difference between two functions) and offers suggestions for improvement, specifically related to testing and debugging. It does not appear to be providing information or analysis about use cases, features, or administrative aspects of the system."
  },
  {
    "id": 1452180271,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-02T16:42:36Z",
    "updated_at": "2023-03-02T16:42:36Z",
    "body": "Allowing for IdP-Initiated SSO. It might be useful to have a similar call to `n.c.allowed.isEmpty` but taking an IdP and SP combination. Just as a way for the IdP to know if it needs to call `put` again i.e. `put` is probably redudant if the IdP and SP already have a relationship in the browser. ",
    "user": "philsmart",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback about how the current implementation of Single Sign-On (SSO) works, suggesting potential improvements or optimizations to make it more efficient and useful."
  },
  {
    "id": 1452340305,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-02T18:25:48Z",
    "updated_at": "2023-03-02T18:25:48Z",
    "body": "Thinking about this after our workshop I suspect we may need some trust component in this case aswell to make the UX work reasonably well. \r\n\r\nAs it stands the IdP and SP are represented essentially by their respective ORIGIN but in order to support human-friendly naming, branding elements and - equally importantly - multiple protocol endpoints per IdP/SP it is probably necessary to authenticate the binding between ORIGIN and any additional data needed to produce good UX. \r\n\r\nThis is exactly what SAML and OIDC metadata does today but trusting the caller to provide this data opens the way for a rogue SP to provide false endpoints thereby tricking a user into a flow that leads to tracking. The solution could be to introduce some form of trust anchor (eg the federation operator) that can authenticate data associated with the SP and IdP. ",
    "user": "leifj",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment suggests a need for an additional component, such as a trust anchor or federation operator, to enhance the user experience in SAML and OIDC-based authentication, specifically addressing issues of authenticity and integrity when interacting with multiple SPs and IdPs."
  },
  {
    "id": 1452358154,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-02T18:37:29Z",
    "updated_at": "2023-03-02T18:37:29Z",
    "body": "it may be possible to support a simple version of the api which only takes ORIGIN (sp and idp) as input without introducing external trust but at the expense of the UX only being able to display the ORIGIN. In the mockups above the name of the University would be replaced by its URL.",
    "user": "leifj",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "This comment is providing a suggestion for improving or modifying the existing API, specifically focusing on whether it can be simplified without compromising user experience. It's asking for feedback and guidance rather than simply providing technical information or making an administrative decision."
  },
  {
    "id": 1454799155,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-04T16:44:10Z",
    "updated_at": "2023-03-04T16:44:10Z",
    "body": "added [judielaine](https://github.com/judielaine)'s flowchart diagram that was also agreed by the participants at the meeting",
    "user": "sunetzacharias",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment is providing technical information about an external contribution (a flowchart diagram) to a project, specifically mentioning its addition and agreement. This can be considered as feedback on the code or software implementation rather than something else."
  },
  {
    "id": 1458242701,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-07T14:11:24Z",
    "updated_at": "2023-03-07T14:11:24Z",
    "body": "Adding steps in authentication process is the opposite of seamless. It's not user-friendly; it's frustrating. There are already so many steps that users have to go through (multiple results in WAYF, IdP's MFA, questions at SP's side, popups asking for rating, updates, etc.). This was meant to be seamless access.\r\n\r\nIf we ask a user to take action then it needs to make sense to them, and in such situation the user is not making an informed choice, they're just feeding the browser so it lets them pass. It's not even a choice. 99,99% of all users will have no clue what's going on, they can't possibly know whether the SP is to be trusted or not or whether their choice was the right one (before they actually authenticate). And if they do make the wrong choice in haste, then what?\r\n\r\nThere's already an existing trust infrastructure that has been established for this purpose and we should utilize that.\r\n\r\nThis could perhaps be a fallback for when the existing trust infrastructure isn't in place, for bilateral connections. It still won't be user friendly but at least it would be needed.",
    "user": "meshna",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment expresses frustration with the current authentication process and suggests an alternative approach that is more seamless and user-friendly. However, the tone is constructive rather than critical or negative, which indicates a feature request rather than an administrative or philosophical concern. Additionally, the commenter mentions potential limitations (e.g., existing trust infrastructure) to make their suggestion more feasible, further supporting the classification as a feature request."
  },
  {
    "id": 1460261742,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-08T14:39:46Z",
    "updated_at": "2023-03-08T14:40:40Z",
    "body": "It would be very helpful if you could add an intro section that talks about both the user journey and problem statement before diving into a proposed solution. For example, \"A university student wants to access a research paper from research.org. Their university is part of a federation that provides access to research.org... blah blah\". Ideally the problem statement would highlight the issues you're facing today and the issues you think you'll be facing tomorrow (3PCD, link decoration, etc).",
    "user": "timcappalli",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment appears to be providing a specific suggestion for improvement or additional functionality, which is characteristic of technical feedback. The proposed solution is also a concrete example that illustrates the problem and its potential impact on users, such as university students who are trying to access research papers from various online platforms."
  },
  {
    "id": 1460329339,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-08T15:25:07Z",
    "updated_at": "2023-03-08T15:28:30Z",
    "body": "> Hello! It is not clear to me what the difference is between `n.c.allowed.get` and `n.c.allowed.invoke`. More specifically, what I would use get for.\r\n\r\n@philsmart The idea here is that `n.c.allowed.get` would return the list of IdP objects associated with the SP, so that a chooser UI element (a la seamlessaccess) can be presented. When an IdP is selected from that chooser, `n.c.allowed.invoke` is called, which presents a browser-generated permission modal (\"do you want to sign-in with XYZ IdP?\") and returns a Promise that resolves to either the selected IdP object (if the user clicks \"allow\"), or an Error (if the user clicks \"deny\").",
    "user": "windhamg",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment proposes adding two related features to simplify the process of managing Single Sign-On (SSO) and authorization, allowing users to choose an Identity Provider (IdP) for a seamless login experience. The proposed solution is an improvement over existing approaches that require users to invoke a permission modal when selecting an IdP, making it clear what was intended by `n.c.allowed.get`."
  },
  {
    "id": 1460707764,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-08T19:02:07Z",
    "updated_at": "2023-03-08T19:02:07Z",
    "body": "[user-flows-saml-meshna.pdf](https://github.com/fedidcg/proposals/files/10924133/user-flows-saml-meshna.pdf)\r\n\r\nAttaching a quickly put together user flow with some descriptions; if a different format is needed and/or I could upload it somewhere for easy collaboration, please let me know where.",
    "user": "meshna",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "use_case",
    "reason": "The comment appears to be requesting the user to provide a more collaborative or adaptable tool for sharing SAML flows, suggesting that the current tool (the PDF attachment) may not meet their needs. This is a request for an enhancement or upgrade to accommodate different usage scenarios, rather than feedback on technical details, administrative tasks, philosophical debates, or something unrelated to use cases in software development."
  },
  {
    "id": 1467130866,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-13T23:50:29Z",
    "updated_at": "2023-03-13T23:50:29Z",
    "body": "> [user-flows-saml-meshna.pdf](https://github.com/fedidcg/proposals/files/10924133/user-flows-saml-meshna.pdf)\r\n> \r\n> Attaching a quickly put together user flow with some descriptions; if a different format is needed and/or I could upload it somewhere for easy collaboration, please let me know where.\r\n\r\nFor clarity: This describes an old flow of how a implementor of the SeamlessAccess discovery and persistence service has its set up. It is not related to the context of the proposal #4.",
    "user": "sunetzacharias",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on a previously shared document (the SAML meshna PDF) with suggestions for improvement, indicating that it is intended to inform or assist in improving something, likely the SeamlessAccess discovery and persistence service."
  },
  {
    "id": 1467718527,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-14T09:25:23Z",
    "updated_at": "2023-03-14T09:25:23Z",
    "body": "> > [user-flows-saml-meshna.pdf](https://github.com/fedidcg/proposals/files/10924133/user-flows-saml-meshna.pdf)\r\n> > Attaching a quickly put together user flow with some descriptions; if a different format is needed and/or I could upload it somewhere for easy collaboration, please let me know where.\r\n> \r\n> For clarity: This describes an old flow of how a implementor of the SeamlessAccess discovery and persistence service has its set up. It is not related to the context of the proposal #4.\r\n\r\nYes, this was a response to timcappalli's comment above.",
    "user": "meshna",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides specific technical information about user flow diagrams used in SAML (Security Assertion Markup Language) implementation. It is intended for improvement and clarification purposes, as it does not relate to the context of the proposal #4 or contain suggestions for new ideas or discussions."
  },
  {
    "id": 1475362020,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-19T18:57:55Z",
    "updated_at": "2023-03-19T18:57:55Z",
    "body": "Updated the proposal today with information about the \"Threat model\".\r\nLast monday updated the text with various information and updated diagrams. Interested parties should read through the entire text as a lot has been attempted to be clarified.",
    "user": "sunetzacharias",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides technical updates, such as adding new information, diagrams, or clarifying existing details, which suggests that it is providing constructive criticism and suggesting improvements for the proposal."
  },
  {
    "id": 1476304600,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T14:09:46Z",
    "updated_at": "2023-03-20T14:09:46Z",
    "body": "Here are a few issues with the current FedCM and solutions this model offers. \r\n\r\n### Many IdPs may be hosted by a cloud provider at an Origin\r\n\r\nAzure and Cirrus are examples. Current model cannot distinguish between all the different IdPs at the origin. \r\n\r\nThis proposal provides a method by which more sophisticated integrations can supply the full URLs for the endpoints currently at .well-known . Note that while an identifier could be provided for the origin .well-known, the scale of some of the cloud provides may make loading that file prohibitively slow.\r\n\r\n### Many SPs may be hosted by a cloud provider \r\n\r\nOffice 365 and Liblynx (a platform for journals) are examples. Current model cannot provide the IdP sufficient information to distinguish between options. \r\n\r\nThis proposal provides a method by which more sophisticated integrations can supply the full URLs for the endpoints IdPs pre-provision as acceptable locations to return Authentication responses.\r\n\r\n### Roadmap for more trust\r\n\r\nAssuming that browsers will allow protocol exchanges to continue, the provisioning of all the metadata allows a browser to restrict front channel cross domain authentication exchanges to the same pre-specified endpoints that the protocols use. Admittedly, this will require additional user interactions when protocol endpoints change.\r\n\r\nThe endpoints provided by the SP for the IdP and or the SP itself can also be signed by a trust credentialing partner, allowing browsers to signal to endusers that the endpoints are certified by an trusted party. \r\n",
    "user": "judielaine",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "This comment is expressing concerns about the current implementation of FedCM (Federal Identity and Access Management Consortium) and suggesting improvements to make it more robust and scalable. The commenter is specifically proposing changes related to how IdPs (Identity Providers) and SPs (Service Providers) can be identified, and how these identifiers are used for authentication exchanges. This comment implies that the current solution does not meet the expected level of sophistication or trustworthiness in handling complex integration scenarios involving multiple cloud providers and different service providers."
  },
  {
    "id": 1476421125,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:15:53Z",
    "updated_at": "2023-03-20T15:16:36Z",
    "body": "> Azure and Cirrus are examples. Current model cannot distinguish between all the different IdPs at the origin.\r\n\r\nCan you give us real world examples? Can you copy/paste an Azure / Cirrus URL that represents a real world IdP? And can't some of this be solved with DNS CNAMES?",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "This comment is requesting improvements to the current model, specifically suggesting ways to distinguish between different Identity Providers (IdPs) at the origin. It's asking for new features or enhancements that would make it easier to identify and separate these IdPs, which can be achieved through better DNS-based methods such as CNAME records."
  },
  {
    "id": 1476427806,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:19:32Z",
    "updated_at": "2023-03-20T15:20:26Z",
    "body": "> Here are a few issues with the current FedCM and solutions this model offers.\r\n\r\nFrom what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\r\n\r\nIs it fair to articulate this as one of the problems we face?",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The commenter identifies a specific issue with the current FedCM design, which is that the Multi-IdP API may struggle to handle high volumes of IDs (in this case, 1K), leading to potential scalability issues. This criticism provides technical feedback on the feasibility and performance of the FedCM model, which can be used to inform further development or improvement."
  },
  {
    "id": 1476431433,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:21:38Z",
    "updated_at": "2023-03-20T15:24:03Z",
    "body": "> Here are a few issues with the current FedCM and solutions this model offers.\r\n\r\nThe other issue that I heard from Gary was along the lines of \"IdP sessions are typically short-lived (say, a few hours, e.g. at the University Of Arizona it was around 8 hours)\", which is an assumption that we don't take into consideration in the current design.",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on the existing FedCM model by addressing a specific issue (short-lived IdP sessions) and offers a different perspective, indicating that it is intended to improve or correct the model."
  },
  {
    "id": 1476435045,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:23:41Z",
    "updated_at": "2023-03-20T15:23:41Z",
    "body": "FedCM calls all IdPs to find accounts. Typical federation flow would be just to choose the IdP without making any calls to find account/session.",
    "user": "philsmart",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides specific technical details about how a function or process works, addressing a potential issue or limitation in its operation. It does not express an opinion, request something, provide a conclusion or resolution, present a philosophical point of view, or offer information that is not meant to be conveyed directly to the reader."
  },
  {
    "id": 1476455783,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:33:07Z",
    "updated_at": "2023-03-20T15:34:18Z",
    "body": "> > Here are a few issues with the current FedCM and solutions this model offers.\r\n> \r\n> From what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\r\n> \r\n> Is it fair to articulate this as one of the problems we face?\r\n\r\nMost website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.",
    "user": "wanpengli",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment is asking for an improvement or a solution to a specific problem with the current FedCM design, specifically that it cannot handle a large number of IdP options (e.g., 9 different IdPs in this case). It does not seem to be providing technical feedback, administrative information, or concluding on a philosophical aspect."
  },
  {
    "id": 1476479457,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T15:44:59Z",
    "updated_at": "2023-03-20T15:44:59Z",
    "body": "Another note I got from the demo you walked us through:\r\n\r\n> The SAML tracer breaks when we use FedCM, because the extension doesn't have visibility over the browser mediated UI.",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "feature_request",
    "reason": "The comment is requesting a change to how the SAML tracer works in relation to using FedCM (Federal Component Management) for security and identity verification purposes. It specifically mentions that the current configuration breaks when used with this technology, indicating a need for an adjustment in the implementation of the SAML tracer."
  },
  {
    "id": 1477098438,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-20T23:53:40Z",
    "updated_at": "2023-03-20T23:53:40Z",
    "body": "> > Azure and Cirrus are examples. Current model cannot distinguish between all the different IdPs at the origin.\r\n> \r\n> Can you give us real world examples? Can you copy/paste an Azure / Cirrus URL that represents a real world IdP? And can't some of this be solved with DNS CNAMES?\r\n\r\nHere are some examples:\r\n\r\n1. Multiple institutions have registered their Google IdPs in various national federations' metadata that are part of the eduGAIN aggregate metadata:\r\n    - **Institut des Arts de Diffusion (BELNET Federation)**:\r\n       ```\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02lghgox\"/>\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02lghgox\"/>\r\n       ```\r\n    - **Luxembourg School of Business (eduID Luxembourg)**:\r\n       ```\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02ws9ruj\"/>\r\n       <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02ws9ruj\"/>\r\n       ```\r\n    -  **University of Technology and Applied Sciences (OMREN)**\r\n        ```\r\n        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02afc2g7\"/>\r\n        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02afc2g7\"/>\r\n        <md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\" Location=\"https://accounts.google.com/o/saml2/idp?idpid=C02afc2g7\"/>\r\n        ```\r\n2. University of Northern Colorado has 2 separate Azure AD tenants (one for staff, the other for students) behind a Cirrus Proxy:\r\n    - **Azure AD tenant 1**:\r\n       ```\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://login.microsoftonline.com/b4dce27c-d088-4454-9965-2b59a23ea171/saml2\"/>\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://login.microsoftonline.com/b4dce27c-d088-4454-9965-2b59a23ea171/saml2\"/>\r\n        ```\r\n    - **Azure AD tenant 2**:\r\n       ```\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://login.microsoftonline.com/48e07fd6-ad72-497f-b298-b5c57de6db2d/saml2\"/>\r\n       <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://login.microsoftonline.com/48e07fd6-ad72-497f-b298-b5c57de6db2d/saml2\"/>\r\n       ```\r\n3. The Danish federation has all of their member IdPs (72 listed in the eduGAIN metadata aggregate) behind a single domain; so all of their SSO endpoints start with https://birk.wayf.dk/. \r\n\r\n\r\n",
    "user": "windhamg",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "This comment appears to be providing examples and explanations for how different institutions can handle multiple IdPs (Identity Provider) in Azure Active Directory. It also mentions that some solutions, such as DNS CNAMES, may not be sufficient to solve the problem. Additionally, it discusses real-world examples of implementing SSO across different institutions."
  },
  {
    "id": 1479849732,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-22T16:03:47Z",
    "updated_at": "2023-03-22T16:03:47Z",
    "body": "> > > Here are a few issues with the current FedCM and solutions this model offers.\r\n> > \r\n> > \r\n> > From what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\r\n> > Is it fair to articulate this as one of the problems we face?\r\n> \r\n> Most website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.\r\n\r\nCILogon is a RP that brokers access from the eduGAIN federation to a large number of scientific resources. It supports more than 4000 IdP. See https://cilogon.org/\r\n\r\nThat is only one example. Many RPs in the higher education and research space federate with thousands of IdPs. It's how the community facilitates scholarly and research collaboration.\r\n\r\n",
    "user": "skoranda",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides specific feedback about a technical issue or problem with the current FedCM design, highlighting an area for improvement regarding scalability and support for multiple Identity Provider (IdP) options. It is aimed at addressing the potential limitations of the Multi-IdP API in handling large numbers of IdPs, making it a technical issue that requires a solution."
  },
  {
    "id": 1479869761,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-22T16:16:13Z",
    "updated_at": "2023-03-22T16:16:13Z",
    "body": "Correct.\n\nElsevier SP federates with 3200+ IdPs and that's not the only publisher doing that; this is a normal use case.\n\nKind regards,\nMeshna\n\n\n\nFrom: Scott Koranda ***@***.***>\nSent: Wednesday, March 22, 2023 17:04\nTo: fedidcg/proposals ***@***.***>\nCc: Koren, Meshna (ELS-AMS) ***@***.***>; Comment ***@***.***>\nSubject: Re: [fedidcg/proposals] idp-sp-storage API (Issue #4)\n\n\n*** External email: use caution ***\n\n\n\nHere are a few issues with the current FedCM and solutions this model offers.\n\nFrom what I understand, one of the most fundamental problems with the current FedCM design at the moment is that the Multi-IdP API wouldn't be able to handle the scale of O(1K) IdPs (which is common in this space) that the user can choose from (we currently assume in the design O(< 10) IdPs).\nIs it fair to articulate this as one of the problems we face?\n\nMost website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.\n\nCILogon is a RP that brokers access from the eduGAIN federation to a large number of scientific resources. It supports more than 4000 IdP. See https://cilogon.org/<https://nam11.safelinks.protection.outlook.com/?url=https%3A%2F%2Fcilogon.org%2F&data=05%7C01%7Cm.koren%40elsevier.com%7Cf2b1b3ed5f81435628dd08db2aef0bf5%7C9274ee3f94254109a27f9fb15c10675d%7C0%7C0%7C638150978418604233%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=XcOIWOQdq05LitgIJXm3VeNGVboaYnIKJhSBeyar2gU%3D&reserved=0>\n\nThat is only one example. Many RPs in the higher education and research space federate with thousands of IdPs. It's how the community facilitates scholarly and research collaboration.\n\n-\nReply to this email directly, view it on GitHub<https://nam11.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Ffedidcg%2Fproposals%2Fissues%2F4%23issuecomment-1479849732&data=05%7C01%7Cm.koren%40elsevier.com%7Cf2b1b3ed5f81435628dd08db2aef0bf5%7C9274ee3f94254109a27f9fb15c10675d%7C0%7C0%7C638150978418604233%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=ktO3z7Gljws1nvlYsgxVpbGXPCxHsiAJ3e7fjAhmlOU%3D&reserved=0>, or unsubscribe<https://nam11.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAFOCGTRCFP4V5M6TVW5KHP3W5MPG5ANCNFSM6AAAAAAVMVWX3Q&data=05%7C01%7Cm.koren%40elsevier.com%7Cf2b1b3ed5f81435628dd08db2aef0bf5%7C9274ee3f94254109a27f9fb15c10675d%7C0%7C0%7C638150978418604233%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=cuG9LkZGecBT5U50TUH6RtCBbDsjBeOfKQ2DVJjbZcQ%3D&reserved=0>.\nYou are receiving this because you commented.Message ID: ***@***.******@***.***>>\n\n________________________________\n\nElsevier B.V. Registered Office: Radarweg 29, 1043 NX Amsterdam, The Netherlands, Registration No. 33158992, Registered in The Netherlands.\n",
    "user": "meshna",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides technical details and issues with the current FedCM design that the sender Meshna is aware of or has studied, suggesting it's a piece of technical feedback rather than an administrative, use case, philosophical, or conclusion/resolution comment."
  },
  {
    "id": 1480855664,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/5",
    "created_at": "2023-03-23T09:25:50Z",
    "updated_at": "2023-03-23T09:25:50Z",
    "body": "proposal has been updated with more elaborate explanations of the flows and background",
    "user": "sunetzacharias",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on a technical topic, specifically highlighting improvements or clarifications made to an existing solution. The language used suggests that it is aimed at improving the documentation or implementation of the proposal, which implies a focus on technical details and accuracy."
  },
  {
    "id": 1481439229,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-23T15:50:52Z",
    "updated_at": "2023-03-23T15:53:06Z",
    "body": "> Most website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs. \r\n\r\nI'm going through a list of publishers. In the past 40 minutes i identified the following sites with more than ten IdPs.  Adding -- one normally needs to search for their institution, you may not be able to determine the precise number of IdPs but can explore search terms to determine \"more than ten\".\r\n\r\nhttps://5minuteconsult.com see https://5minuteconsult.com/SignInShibboleth.aspx, pick from five federations\r\nhttps://akjournals.com/ see https://akjournals.com/login\r\nhttps://acpjournals.org see https://www.acpjournals.org/action/ssostart?redirectUri=%2F\r\nhttps://alexanderstreet.com/ see https://search.alexanderstreet.com/wayf?destination=\r\nhttps://anatomy.tv see https://www.anatomy.tv/login?lastpageurl=titles\r\n\r\nhttps://academic.oup.com/ see  https://oup2-ds.sams-sigma.com/?entityID=https%3A%2F%2Foup-sp.sams-sigma.com%2Fshibboleth&return=https%3A%2F%2Foup-sp.sams-sigma.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Afd4b4a0c1b2d0e230c53001b312510d6d644de32ff591de54a561602d1bd794d\r\nhttps://access.torrossa.com see https://access.torrossa.com/shibboleth-ds/index.html?entityID=https%3A%2F%2Fwww.torrossa.com%2Fshibboleth&return=https%3A%2F%2Faccess.torrossa.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Aa28767884b281870eba40e75d8f1fde661614e20f8e49c16823d93259d5e078b\r\nhttps://acta.chadwyck.co.uk see https://www.proquest.com/legacyredirect/actasanctorum\r\nhttps://advantage.marketline.com see https://advantage.marketline.com/HomePage/Index?returnUrl=Home\r\nhttps://advisor.lww.com  see https://wayfinder.openathens.net/?return=https%3A%2F%2Fconnect.openathens.net%2Fsaml%2F2%2Fauth%3Fr%3Dhttps%253A%252F%252Fconnect.openathens.net%252Foidc%252Fauth%253Fresponse_type%253Dcode%2526client_id%253Dwolterskluwer.com.oidc-app-v1.0c519265-f12d-4407-915b-7c35a86d9c18%2526scope%253Dopenid%2526redirect_uri%253Dhttps%25253A%25252F%25252Flns-sso.lww.com%25252Fopenid_connect_login%2526nonce%253D357e3387b0746%2526state%253Dafaa38974fba%2526pfidpadapterid%253DLippincottAdapter%26d%3Dwolterskluwer.com%26c%3D092c9afe-6fb4-4d4e-bf47-dadfa3d358f7%26as%3Dpublished%26aid%3D0c519265-f12d-4407-915b-7c35a86d9c18&oaDomain=wolterskluwer.com&oaAppId=0c519265-f12d-4407-915b-7c35a86d9c18&entityID=https%3A%2F%2Fadvisor.lww.com%2Foa%2Fmetadata\r\n\r\n\r\n",
    "user": "judielaine",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "administrative",
    "reason": "The comment is primarily related to administrative matters, specifically mentioning the number of IdPs (Identity Providers) supported by a website and providing information on how to identify them. There are no indications of technical issues or use cases that would classify this as Technical Feedback, Feature Request, or Philosophical discussion. Additionally, while it mentions OAuth and OpenID Connect RPs, there is no indication that the comment is seeking feedback on these specific technologies or asking for a philosophical discussion about their implementation."
  },
  {
    "id": 1481509881,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-23T16:30:44Z",
    "updated_at": "2023-03-23T16:32:13Z",
    "body": "> > Most website only support a few number of IdPs, I did conduct some empirical study several years ago. The 'craziest RP' supported 9 RPs then. This applied for OAuth and OpenID Connect RPs.\r\n> \r\n> I'm going through a list of publishers. In the past 40 minutes i identified the following sites with more than ten IdPs. Adding -- one normally needs to search for their institution, you may not be able to determine the precise number of IdPs but can explore search terms to determine \"more than ten\".\r\n> \r\n> https://5minuteconsult.com see https://5minuteconsult.com/SignInShibboleth.aspx, pick from five federations https://akjournals.com/ see https://akjournals.com/login https://acpjournals.org see https://www.acpjournals.org/action/ssostart?redirectUri=%2F https://alexanderstreet.com/ see https://search.alexanderstreet.com/wayf?destination= https://anatomy.tv see https://www.anatomy.tv/login?lastpageurl=titles\r\n> \r\n> https://academic.oup.com/ see https://oup2-ds.sams-sigma.com/?entityID=https%3A%2F%2Foup-sp.sams-sigma.com%2Fshibboleth&return=https%3A%2F%2Foup-sp.sams-sigma.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Afd4b4a0c1b2d0e230c53001b312510d6d644de32ff591de54a561602d1bd794d https://access.torrossa.com see https://access.torrossa.com/shibboleth-ds/index.html?entityID=https%3A%2F%2Fwww.torrossa.com%2Fshibboleth&return=https%3A%2F%2Faccess.torrossa.com%2FShibboleth.sso%2FLogin%3FSAMLDS%3D1%26target%3Dss%253Amem%253Aa28767884b281870eba40e75d8f1fde661614e20f8e49c16823d93259d5e078b https://acta.chadwyck.co.uk see https://www.proquest.com/legacyredirect/actasanctorum https://advantage.marketline.com see https://advantage.marketline.com/HomePage/Index?returnUrl=Home https://advisor.lww.com see https://wayfinder.openathens.net/?return=https%3A%2F%2Fconnect.openathens.net%2Fsaml%2F2%2Fauth%3Fr%3Dhttps%253A%252F%252Fconnect.openathens.net%252Foidc%252Fauth%253Fresponse_type%253Dcode%2526client_id%253Dwolterskluwer.com.oidc-app-v1.0c519265-f12d-4407-915b-7c35a86d9c18%2526scope%253Dopenid%2526redirect_uri%253Dhttps%25253A%25252F%25252Flns-sso.lww.com%25252Fopenid_connect_login%2526nonce%253D357e3387b0746%2526state%253Dafaa38974fba%2526pfidpadapterid%253DLippincottAdapter%26d%3Dwolterskluwer.com%26c%3D092c9afe-6fb4-4d4e-bf47-dadfa3d358f7%26as%3Dpublished%26aid%3D0c519265-f12d-4407-915b-7c35a86d9c18&oaDomain=wolterskluwer.com&oaAppId=0c519265-f12d-4407-915b-7c35a86d9c18&entityID=https%3A%2F%2Fadvisor.lww.com%2Foa%2Fmetadata\r\n\r\nThe currently FeDCM API is allowing the RP developer to identify the IdP manually. This works fine with OAuth and OpenIDConnect. SAML needs some special IdP discovery process( see here https://techdocs.broadcom.com/us/en/symantec-security-software/identity-security/siteminder/12-8/configuring/partnership-federation/saml-2-0-only-configurable-features/idp-discovery-profile-saml-2-0.html). If FeDCM need to be compatible with SAML. The IdP discovery procedure of SAML needs to be considered.",
    "user": "wanpengli",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "philosophical",
    "reason": "The comment discusses the limitations and challenges in using various Identity Provider (IdP) discovery mechanisms, particularly for Single Sign-On (SSO) and Single Logout (SLO) protocols like Shibboleth. It highlights the importance of considering these complexities when designing an SAML-based system that requires compatibility with FeDCM's IdP discovery process. The comment does not provide technical feedback or ask a specific question; instead, it explores a philosophical aspect of identity management and interoperability in the context of SAML and OAuth/OpenID Connect."
  },
  {
    "id": 1482718118,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-03-24T12:24:30Z",
    "updated_at": "2023-03-24T12:24:30Z",
    "body": "@wanpengli  Yes! This proposal is in alignment with SAML discovery profiles.The actual specification for SAML Discovery is http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-idp-discovery.html However, with recent user experience and privacy research in the RA21 project -- https://ra21.org/ -- spun off the Seamless Access project -- https://seamlessaccess.org/ . Participants from Seamless Access helped draft this specification.",
    "user": "judielaine",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides a detailed explanation of the compatibility and alignment of the provided proposal with SAML discovery profiles, citing an external document as evidence. It offers constructive feedback on how well the proposal aligns with existing specifications, indicating that it is intended to be a technical assessment or critique rather than an evaluation for resolution purposes."
  },
  {
    "id": 1502421086,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/5",
    "created_at": "2023-04-10T22:33:17Z",
    "updated_at": "2023-04-10T22:33:17Z",
    "body": "Here is this proposal, converted to markdown: https://github.com/fedidcg/proposals/blob/Offloading-Trust-Issue-5/offloading-trust.md",
    "user": "nckroy",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "philosophical",
    "reason": "This comment seems to be more of a philosophical discussion about the nature of trust and how it should be offloaded in the context of a microservices architecture. It does not provide any concrete feedback, requests, or information that can be used to make technical decisions. Instead, it appears to be an exploratory question that invites further thought and discussion among contributors."
  },
  {
    "id": 1502435361,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/4",
    "created_at": "2023-04-10T22:52:09Z",
    "updated_at": "2023-04-10T22:52:09Z",
    "body": "This is now markdown at: https://github.com/fedidcg/proposals/blob/idp-sp-storage-API-Issue-4/idp-sp-storage-api.md",
    "user": "nckroy",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment appears to provide feedback on the technical aspects of a proposal or specification document, likely in response to its content. It may also be related to an API design or implementation, as it mentions \"proposals\" and \"API\", indicating that it is addressing issues with an existing API."
  },
  {
    "id": 1601661856,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2023-06-21T20:54:50Z",
    "updated_at": "2023-06-21T20:54:50Z",
    "body": "@dickhardt I think I need to revive this as we continue to try and make things work with the planned cookie changes and ... in some cases it is simply not possible without drastic changes needed by us and our customers. If the iframe needs to be authenticated on page load, in order to for example set the CSP frame-ancestors headers to prevent click-jack attacks, then all of the other proposals are not valid. The only way to support setting the frame-ancestors is if the auth header is passed in on the frame load. ",
    "user": "LGraber",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback about a technical aspect (iframe authentication) and proposes changes that may require significant updates, indicating it is an issue that requires technical expertise to resolve."
  },
  {
    "id": 1856604755,
    "issue_url": "https://api.github.com/repos/fedidcg/proposals/issues/2",
    "created_at": "2023-12-14T21:13:09Z",
    "updated_at": "2023-12-14T21:13:09Z",
    "body": "@hpsin you still around and have time to chat? I dropped this as I got caught up in a lot of other things but this is bubbling back up and I think I am going to try and restart this discussion. The link you included is now dead so I cant refresh on that. I feel like the current browser support make clickjack prevention really hard and while we have some workarounds, this is another tool that could make the flows easier for certain implementations. Would love to hear what you think",
    "user": "LGraber",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/Proposals",
    "classification": "technical_feedback",
    "reason": "The comment provides specific feedback on a technical issue (browser compatibility) and suggests an alternative solution (restart discussion). It does not provide any information about use cases, features, or administrative aspects of the project, nor does it explicitly mention its philosophical implications. Instead, it focuses on providing constructive criticism to improve the situation."
  },
  {
    "id": 1987797165,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/5",
    "created_at": "2023-08-23T10:35:25Z",
    "updated_at": "2023-08-23T10:35:25Z",
    "body": "The way I see it (and reflecting some internal team conversations with @mmocny and @tdresser), bad responsiveness can be caused by:\r\n1. long event processing. event timing already captures this. Scripts that correlate between the entries can help here as well to give you more attribution that LoAF provides. \r\n2. compositor congestion, which delays both input and paint. LoAF doesn't help there.\r\n3. General main-thread congestion. This is where LoAF is useful regardless of INP/event-timing: if your main thread is running a lot of things in a blocking way, it has a high chance to fall on one event or another, and capturing exactly which event fell on which LoAF is perhaps a bit of a red herring.\r\n\r\nSo for someone that's debugging INP, it would be best to start by understanding which kind of problem they have out of the (3), and see if correlating the exact event-timing entry with LoAF is what would help them with that.\r\n\r\n\r\n\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific technical insights and suggestions for debugging, making it a technical feedback comment aimed at improving the internal team's understanding of how to address issues in the Integrated Notation Protocol (INP). The comments mention particular features like event processing and main-thread congestion, which are relevant to INP development."
  },
  {
    "id": 1987796788,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/4",
    "created_at": "2023-09-20T07:36:55Z",
    "updated_at": "2023-09-20T07:36:55Z",
    "body": "+1\r\n\r\nIt would be great to avoid the need to use rAF polling for measuring smoothness. Evaluating smoothness with the 50ms threshold is possible but provide a less accurate signal than what we would like.\r\n\r\nEasy crossing with Event Timing entries is another interesting scenario.",
    "user": "nhelfman",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific suggestions and ideas, such as avoiding rAF polling for measuring smoothness and evaluating smoothness using the 50ms threshold. These are technical details or recommendations that suggest improvements to a system or process, which falls under the category of Technical Feedback."
  },
  {
    "id": 1987796055,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-10-03T17:41:30Z",
    "updated_at": "2023-10-03T17:41:30Z",
    "body": "Thanks for posting the issue!\r\nNote that scripts have a `sourceLocation` property, which includes the function name. Their syntax is `function@scriptSourceURL:characterIndex`.\r\n\r\nSo the way to do what you specifically asked for is:\r\n```js\r\nnew ResizeObserverEntry(function SourceOfCode([entry]: ResizeObserverEntry[]) {\r\n  // ...\r\n}).obeserve(target.current);\r\n```\r\nAnd this would appear in the entry's `sourceLocation` as `SourceOfCode@myScriptURL.com:123` or some such.\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific guidance on how to use a particular function (ResizeObserverEntry) correctly, which is an important detail for someone trying to understand and implement the code."
  },
  {
    "id": 1987796060,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-10-03T18:45:05Z",
    "updated_at": "2023-10-03T18:45:05Z",
    "body": "This makes sense. I can make this work. For my specific case I think I would want something like\r\n```ts\r\nconst cb = ([entry]: ResizeObserverEntry[]) => {\r\n  // ...\r\n}\r\nObject.defineProperty(cb, 'name', { value: 'SourceOfCode' });\r\nnew ResizeObserver(cb).obeserve(target.current);\r\n```",
    "user": "jarmit",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment is providing a specific example of how to implement a ResizeObserver in TypeScript, which falls under the category of describing a use case. It's explaining how to create and utilize an instance of ResizeObserver with a specific function (cb) and using it to observe changes to elements on the DOM."
  },
  {
    "id": 1987796065,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-10-18T15:43:24Z",
    "updated_at": "2023-10-18T15:43:24Z",
    "body": "Reopening, there are use cases where this can really be useful. CC @mmocny ",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is asking for the reopening of an issue or feature that has been previously discussed and is still open. This suggests a request to revisit and potentially fix or implement a previously proposed change."
  },
  {
    "id": 1987796069,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-10-18T20:53:43Z",
    "updated_at": "2023-10-18T20:53:43Z",
    "body": "Reading the original request, I see reference to:\r\n\r\n> function is a common function that is used multiple times within the code base\r\n\r\nBut later I only see reference to just making sure a nice name value is exposed.  Is it actually important to somehow differentiate the \"context\" from which a particular callback is invoked?  I'm not sure how often that would come up...\r\n\r\n---\r\n\r\nSecond, if you really want to control labelling, and do this in a way where the developer is explicitly provide a hint-- I wonder if just regular User Timings aren't both sufficient and more flexible?\r\n\r\nJust `performance.measure()` the time spent in specific sections of code (function boundary or whatever you want) and then use LoAF script attribution timestamps to intersect time ranges of your user timings.\r\n\r\nThat way, you can measure all the time ranges for that code, but also filter to cases where it contributed to an overall long-running script within a LoAF.\r\n\r\n---\r\n\r\nThat said, I think it may be valuable if LoAF could do more attribution splitting automatically, on finer boundaries beyond just \"tasks\".  For example, in cases where multiple continuations are registered on a shared promise.  Or where a script calls back into previously registered handlers, but in ways where there isn't a 'hop' though some web platform api (like setTimeout) etc.\r\n\r\nOne (far fetched) idea that comes to mind is perhaps any time an AsyncContext is explicitly switched, if that api ever does take off?\r\n\r\nOf course, a last option is to just rely on yield points, and use that as additional motivation for developers to just yield!",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "philosophical",
    "reason": "The reviewer is exploring the implications of LoAF's attribution system on code quality, functionality, and user experience. They discuss whether differentiating the context in which a callback is invoked is necessary and whether regular User Timings can be sufficient for measurement purposes. Additionally, they suggest that LoAF could do more to automatically split attribution across finer boundaries, but ultimately conclude with a philosophical tone that questioning the utility of certain approaches."
  },
  {
    "id": 1987796072,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-10-19T09:03:49Z",
    "updated_at": "2023-10-19T09:03:49Z",
    "body": "> Reading the original request, I see reference to:\r\n> \r\n> > function is a common function that is used multiple times within the code base\r\n> \r\n> But later I only see reference to just making sure a nice name value is exposed. Is it actually important to somehow differentiate the \"context\" from which a particular callback is invoked? I'm not sure how often that would come up...\r\n> \r\n> Second, if you really want to control labelling, and do this in a way where the developer is explicitly provide a hint-- I wonder if just regular User Timings aren't both sufficient and more flexible?\r\n\r\nIt is, but it can also add a lot of noise. The difference here is that this is \"measure but discard if it's not a LoAF\".\r\n\r\n> That said, I think it may be valuable if LoAF could do more attribution splitting automatically, on finer boundaries beyond just \"tasks\". For example, in cases where multiple continuations are registered on a shared promise. Or where a script calls back into previously registered handlers, but in ways where there isn't a 'hop' though some web platform api (like setTimeout) etc.\r\n> \r\n> One (far fetched) idea that comes to mind is perhaps any time an AsyncContext is explicitly switched, if that api ever does take off?\r\n> \r\n> Of course, a last option is to just rely on yield points, and use that as additional motivation for developers to just yield!\r\n\r\nThose are interesting ideas, I still don't see anything actionable there but let's continue the conversation.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive criticism of an existing feature (async context switching) by suggesting it could be improved or more fully implemented. It is a technical discussion point that offers suggestions for enhancement, rather than providing a general use case, feature request, administrative information, conclusion/resolution, philosophical insight, or something unknown about the codebase."
  },
  {
    "id": 1987796073,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2023-11-07T08:44:54Z",
    "updated_at": "2023-11-07T08:44:54Z",
    "body": "+1 to consider improving this use case.\r\n\r\nThere are several RUM providers wrapping Callback/functions that would be flagged by LoAF as Long LoAFs triggers hiding the real Script sourceLocation information...",
    "user": "gilbertococchi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is requesting a change in how RUM (Request-Only Monitoring) tools, such as LoAF (Load and Exposure Framework), handle long-running scripts or Callback functions. It suggests that these tools should be designed to avoid hiding the real source location of the script execution."
  },
  {
    "id": 1988645676,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/9",
    "created_at": "2023-11-08T19:23:06Z",
    "updated_at": "2023-11-08T19:23:06Z",
    "body": "I am realizing that this isn't a spec question, just implementation, so moving to crbug.\r\n\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1500696",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment is providing technical information about the Chromium issue, specifically referencing an existing bug report (id=1500696) as a resource for further investigation."
  },
  {
    "id": 1987795603,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/2",
    "created_at": "2023-11-10T14:17:30Z",
    "updated_at": "2023-11-10T14:17:30Z",
    "body": "Idea: Perhaps just changing LoAF to treat `EventTarget` listeners as unique entry-point would be the perfect interface for this use case?\r\n\r\nInstead of a library managing its own callback queue and then somehow scheduling those callbacks-- thats already what EventTarget and dispatchEvent does, and there is existing precedent with normal page events already splitting up script attribution on event listener calls.\r\n\r\nLoAF script \"type\" and \"name\" attribution would also be a lot more useful that way, not just solving the \"sourceLocation\" problem.\r\n\r\nAnd EventTarget dispatches listeners synchronously, which addresses the concern with just using yield/postTask.  If you explicitly want to be asynchronous, you can use explicit scheduling.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment proposes a change in how LoAF (likely refers to a programming language or framework) handles event targets and listener callbacks, suggesting that instead of managing the callback queue directly, it would focus on tracking unique entry points for these listeners."
  },
  {
    "id": 1987795607,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/2",
    "created_at": "2023-11-16T19:18:46Z",
    "updated_at": "2023-11-16T19:18:46Z",
    "body": "As we spoke in a private chat, this wouldn't work in terms of microtask checkpoints. a \"real\" entry point would call those custom entry points which would add tasks to the microtask queue, and that queue would then be filled with microtasks from different sources without a way to measure them separately. I think w3c/long-animation-frames#3 is a more doable approach.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "philosophical",
    "reason": "This comment discusses an issue with the current system design and suggests an alternative approach, which is philosophical because it challenges the underlying assumptions of how tasks are processed in microtask checkpoints. It doesn't provide technical details or request specific changes, but rather makes a conceptual argument for why a different approach might be more suitable."
  },
  {
    "id": 1988645197,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/8",
    "created_at": "2023-11-29T19:41:33Z",
    "updated_at": "2023-11-29T19:41:33Z",
    "body": "The thing about inferring blockingDuration from scripts is that you can miss the following contributors to blocking:\r\n- multiple scripts that are less than 5ms each\r\n- Time spent in things other than scripts, e.g. serializing messages for `postMessage`\r\n\r\nI see a few alternative ways about this:\r\n1. Expose \"longest work task\" instead of `blockingDuration` (they're interchangeable, and \"longest work task\" is perhaps simpler to reason about)\r\n2. Only count the last task before the LoAF as contributing to it. This is where I went originally with LoAF... It's like saying \"you didn't really have a rendering opportunity after the earlier tasks, because we don't give you very frequent ones unless there's input/animation\".\r\n3.  Forget `blockingDuration`. Perhaps it doesn't need to be deduced at all... If you have a LoAF, it means that your main thread was congested. The fact that you split it into tasks was nice but the first task that required a presentation update still had to wait before rendering because there was lots of other main-thread stuff going on.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific advice and suggestions for improving a concept, namely inferring `blockingDuration` from scripts. It explains potential pitfalls and alternative approaches that could improve the situation, and offers practical solutions to address these issues. The tone is informative and constructive, indicating that this is a technical feedback comment rather than an administrative or philosophical one."
  },
  {
    "id": 1988645205,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/8",
    "created_at": "2023-11-29T20:53:15Z",
    "updated_at": "2023-11-29T20:53:15Z",
    "body": "RE: 1 --I like that its a bit more interoperable with the Long Tasks api-- but it's also less flexible to evolve.  I could imagine adding more to blockingTime than just one task.  But maybe you general point is that exposing a \"total blocking duration\", without subtracting 50ms or including rendering time automatically, is easier to understand?\r\n\r\nRE 2: --Interesting.  That makes some sense...  On the other hand, today LoAF will already slice tasks at processingEnd whenever we know we don't need rendering (i.e. fallback to LongTask time).  And so this proposal would be similar.  Tasks which aren't immediately followed by rendering are \"just tasks\", and not really LoAFs, from the perspective of the \"blocking\" concept.  So we'd have [Task] as distinct entry, then [Task] nested within LoAF but outside \"blocking\" time, and then [Task+Rendering].  If we believe that is the right way, then maybe we just split LoAF entries, and make LoAF.duration == blockingDuration?\r\n\r\nRE 3: -- I think I am mostly in this camp right now.  I do think right now many pages will report long LoAFs which are due to render-throttling and may not be the \"fault\" of the page, but its also a true representation of UX.  So it just comes down to how the data is interpreted...",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on the proposal, suggesting ways to improve its clarity and functionality. It specifically points out potential issues with the proposal's accuracy regarding the \"blocking\" concept and long tasks in LoAFs."
  },
  {
    "id": 1988645211,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/8",
    "created_at": "2023-12-04T15:39:34Z",
    "updated_at": "2023-12-04T15:39:34Z",
    "body": "Some partners are finding `blockingDuration` useful, as they correlate to INP better than duration.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on the technical aspects of the code or system being reviewed. It describes a specific feature's usefulness and its correlation with another metric (INP). The tone is neutral and informative, suggesting that it is intended to be helpful for someone evaluating or improving the implementation."
  },
  {
    "id": 1987797173,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/5",
    "created_at": "2024-01-03T21:49:02Z",
    "updated_at": "2024-01-03T21:49:02Z",
    "body": "The main reason we're adding LoAF is to better explain INP entries.  Adding an explicit link between an INP entry and its LoAF sounds logical.",
    "user": "vegerot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback on the implementation of a new feature (LoAF) in the context of explaining Inference Numbered Properties (INP) entries, suggesting that it will enhance clarity and correctness."
  },
  {
    "id": 1988644639,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-10T15:36:20Z",
    "updated_at": "2024-01-10T15:36:20Z",
    "body": "Gathering RUM data with PageVitals, I'm trying to get familiar with the different results being sent from the LoAF API.\r\n\r\nI think `type` is a great name for `event-listener`, `classic-script`, `user-callback`, `promise-resolve`, ... so I'd rather keep that.\r\n\r\nRenaming `name` to `invoker` could be a good idea because if gives the developer a better notion of what this really means. \r\n\r\nIn the case of `type` \"classic-script\" it's a bit redundant to have the script URL both in the `name` (or `invoker`) and the `sourceLocation`. It looks like they are the same in this case - but where `sourceLocation` may also have the invoked entry function as well as the column number.\r\n",
    "user": "lasseschou",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The commenter is requesting to rename 'type' to a more descriptive name, specifically 'invoker', and suggesting a change for 'class-script' to remove the duplication of having both the script URL in the 'name' or 'invoker' fields. This change aims to improve clarity and usability."
  },
  {
    "id": 1988644650,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-10T15:58:44Z",
    "updated_at": "2024-01-10T15:58:44Z",
    "body": "> Gathering RUM data with PageVitals, I'm trying to get familiar with the different results being sent from the LoAF API.\r\n> \r\n> I think `type` is a great name for `event-listener`, `classic-script`, `user-callback`, `promise-resolve`, ... so I'd rather keep that.\r\n> \r\n> Renaming `name` to `invoker` could be a good idea because if gives the developer a better notion of what this really means.\r\n> \r\n> In the case of `type` \"classic-script\" it's a bit redundant to have the script URL both in the `name` (or `invoker`) and the `sourceLocation`. It looks like they are the same in this case - but where `sourceLocation` may also have the invoked entry function as well as the column number.\r\n\r\nThe reason to have anything at all in `name` is because in the future we might want to make these nested performance entries available via `performance.getEntriesByName()`, though this is likely a YAGNI.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment provides detailed suggestions for improving the naming conventions of various LoAF API objects, such as `type`, `name`, and others. It offers practical advice on how to improve code readability and maintainability by suggesting alternative names for existing components. This type of comment is typically used in a development or documentation context to clarify and enhance the meaning of existing code."
  },
  {
    "id": 1988644660,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T12:09:06Z",
    "updated_at": "2024-01-11T12:13:09Z",
    "body": "~~With @noamr proposal, we would no longer be able to use `performance.getEntriesByName()` to collect all LoAF. What could we use instead, `performance.getEntries().filter(x => x.constructor.name == 'PerformanceLongAnimationFrameTiming')`? (whether or not it's relevant is another question, I'm just trying to wrap my mind around it).~~\r\n\r\n~~I feel like whether we keep `name` for `event-listener`, `classic-script`, `user-callback`, `promise-resolve` goes further that LoAF. `PerformanceResourceTimings` have names with URLs. `PerformancePaintTimings` have names that are more alike to what @lasseschou calls `invoker`, I feel it's already quite inconsistent. But using `performance.getEntriesByName()` to retrieve a specific kind of LoAF makes sense so why not.~~",
    "user": "borisschapira",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides an analysis of the proposed change and suggests alternative solutions, which is characteristic of technical feedback. The author is offering suggestions for improvement based on their understanding of the code and its potential implications."
  },
  {
    "id": 1988644667,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T12:11:21Z",
    "updated_at": "2024-01-11T12:11:21Z",
    "body": "> With @noamr proposal, we would no longer be able to use `performance.getEntriesByName()` to collect all LoAF. \r\n\r\nTo clarify, this is only about the LoAF's `scripts`, which ATM are not retrieved with `getEntriesByName`.\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment proposes a change that would potentially impact the functionality of an existing feature (performance.getEntriesByName() for retrieving LoAF's scripts), suggesting it is related to improving or enhancing LoAF collection."
  },
  {
    "id": 1988644670,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T12:13:24Z",
    "updated_at": "2024-01-11T12:13:24Z",
    "body": "Oh sorry, I'll think about it again, then.",
    "user": "borisschapira",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment does not provide any specific information or details about what is being used (e.g., code, software, hardware), and instead expresses a personal attitude (\"I'll think about it again\"). It appears to be an expression of uncertainty or reluctance rather than an attempt to improve the product or its functionality."
  },
  {
    "id": 1988644680,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T12:35:18Z",
    "updated_at": "2024-01-11T12:35:18Z",
    "body": "In `PerformanceNavigationTiming`, `type` is a string representing the navigation type. `event-listener`, `classic-script`, etc. are not Script types, so for the sake of spec coherence, I feel like `type` is not necessarily adapted.\r\n\r\nIn `PerformanceServerTiming`, `name` is a string representing the name of the timing.  I feel that `event-listener`, `classic-script`, etc. are not names either, rather qualifiers.\r\n\r\nCouldn't they be `entryType` instead? `script` is quite redundant there\u2026",
    "user": "borisschapira",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment expresses a concern and suggestion for improving the naming conventions in two performance-related parts of the code (PerformanceNavigationTiming and PerformanceServerTiming). It provides suggestions to replace \"event-listener\", \"classic-script\", etc. with \"entryType\" or simply \"script\"."
  },
  {
    "id": 1988644686,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T12:38:06Z",
    "updated_at": "2024-01-11T12:39:03Z",
    "body": "> In `PerformanceNavigationTiming`, `type` is a string representing the navigation type. `event-listener`, `classic-script`, etc. are not Script types, so for the sake of spec coherence, I feel like `type` is not necessarily adapted.\r\n> \r\n> In `PerformanceServerTiming`, `name` is a string representing the name of the timing. I feel that `event-listener`, `classic-script`, etc. are not names either, rather qualifiers.\r\n> \r\n> Couldn't they be `entryType` instead? `script` is quite redundant there\u2026\r\n\r\nThat's an option. They're not exactly the type of script, I thought to rename that `invokerType`.\r\nIn most cases the `entryType` matches the IDL type (e.g. `resource` matches to `PerformanceResourceTiming`)",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides suggestions for improving code coherence and reusability by suggesting alternative names for certain variables, which are not exactly what they represent in their current context."
  },
  {
    "id": 1988644696,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T14:14:31Z",
    "updated_at": "2024-01-11T14:14:31Z",
    "body": "Am with @lasseschou, `type` feels more descriptive than `name` for `event-listener`, `script-block` etc..\r\n`invoker` is very clear, like that, though DevTools > Network panel uses `initiator`, which is also quite descriptive?",
    "user": "aarontgrogg",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment is describing how the developers' naming conventions are working and evaluating their effectiveness. It's discussing whether a certain variable name (`type`) is more descriptive than another (`name`). This type of analysis falls under \"Use Case\" as it involves examining the usability and functionality of the system, in this case, the developer tools."
  },
  {
    "id": 1988644712,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T14:15:18Z",
    "updated_at": "2024-01-11T14:15:18Z",
    "body": "I think perhaps `invokerType` rather than `type` though, e.g. the `entryType` is still `script` (maps with the IDL `PerformanceScriptTiming`)",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment provides a specific feedback on how to improve or correct an existing code snippet related to JavaScript/TypeScript development, specifically suggesting alternative variable names. This suggests that the purpose of this comment is to inform and guide someone using this code by clarifying terminology."
  },
  {
    "id": 1988644720,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/7",
    "created_at": "2024-01-11T14:52:07Z",
    "updated_at": "2024-01-11T14:52:07Z",
    "body": "So, `invoker` + `invokerType` or `initiator` + `initiatorType`, then? I must say I like `initiator`.",
    "user": "borisschapira",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment is providing constructive criticism about a specific design choice in the code, highlighting that it's not ideal but suggests alternatives (\"invoker + invokerType\" or \"initiator + initiatorType\") for improvement."
  },
  {
    "id": 1987797177,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/5",
    "created_at": "2024-01-19T18:24:07Z",
    "updated_at": "2024-01-19T18:24:07Z",
    "body": "@noamr based on what you said it seems that more important than linking LoAF to INP would be to breakdown the 3 phases of INP (Input delay, Processing time and Presentation delay). Is it possible to do that with the current APIs? I know we can see that in chrome devtools but It would be good to track it in RUM",
    "user": "lebreRafael",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is requesting a way to track the 3 phases of Input-Output Performance (INP) using Real User Monitoring (RUM), suggesting that the current APIs do not provide sufficient information for this purpose. This implies that the commenter believes it would be beneficial to have more detailed metrics or visualizations to understand the performance of LoAF in different scenarios, which is an administrative concern."
  },
  {
    "id": 1987797180,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/5",
    "created_at": "2024-01-19T19:04:48Z",
    "updated_at": "2024-01-19T19:04:48Z",
    "body": "> @noamr based on what you said it seems that more important than linking LoAF to INP would be to breakdown the 3 phases of INP (Input delay, Processing time and Presentation delay). Is it possible to do that with the current APIs? I know we can see that in chrome devtools but It would be good to track it in RUM\n\nEvent timing gives you precisely that breakdown, yes.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment appears to describe a specific requirement or proposal for improving the reliability of LoAF (Load Balancer and Forwarder), specifically focusing on breaking down the 3 phases of Input Processing in INP (Input Notification Protocol) into more manageable metrics. This indicates that the commenter is proposing an improvement or feature addition to achieve better system reliability, which aligns with the Use Case classification."
  },
  {
    "id": 1987793656,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-27T18:50:29Z",
    "updated_at": "2024-01-29T11:02:20Z",
    "body": "This is critical for us, since we use firstUIEventTimestamp to calculate rum INP.Please find a solution for this\ud83d\ude4f",
    "user": "anatdagan",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment asks for an administrative fix (finding a solution) to resolve a specific issue (the \"rum INP\" is not being calculated correctly), indicating that it's related to setting up or configuring the application."
  },
  {
    "id": 1987793659,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-29T11:03:27Z",
    "updated_at": "2024-01-29T11:03:27Z",
    "body": "@anatdagan could you please explain a little more about how this impacts you? You cannot use `firstUIEventTimestamp` to calculate RUM INP, and even if you could it wouldn't necessarily reflect the correct INP since `firstUIEventTimestamp` may not be related to the INP event.",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed information about a specific technical issue with a system (RUM INP calculation) that needs to be addressed. The commenter is explicitly stating what they think might be causing the problem and offering a suggestion for how it could be resolved, which indicates a technical focus."
  },
  {
    "id": 1987793662,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-29T16:53:30Z",
    "updated_at": "2024-01-29T17:00:34Z",
    "body": "> Should we add a `firstInteractionEventTimestamp`?\r\n\r\n@tunetheweb If this were added (and the what-constitutes-an-interaction logic was consistent between loafs and inp attribution), would mapping a long animation frame to an INP attribution be as simple as `loaf.firstInteractionEventTimestamp === inpAttribution.eventTime`? Or would there be additional considerations?\r\n\r\nIt'd be helpful regardless, as I had to poke around quite a bit to find the issues with `firstUIEventTimestamp` and why it wasn't used in [Noam's linking gist](https://gist.github.com/noamr/316bd48157ab35e4f632a8c2583281b7).",
    "user": "vanderhoop",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing feedback on a technical aspect of an existing codebase, specifically suggesting whether to add a new field and how it might impact the current functionality. It's focused on improving the code by offering suggestions for improvement rather than discussing broader issues or proposing alternative solutions."
  },
  {
    "id": 1987793666,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-29T17:04:23Z",
    "updated_at": "2024-01-29T17:04:23Z",
    "body": "You could in theory have two interactions within the same frame, and the INP could be the second one so might not be the `firstInteractionEventTimestamp`. Or two interactions that start on the same timestamp.\r\n\r\nThough struggling to see how, as presumably the render delay part of INP wouldn't be until the end of the frame so the first one should be the longest... \ud83e\udd14",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "philosophical",
    "reason": "No reason provided."
  },
  {
    "id": 1987793670,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-29T21:54:48Z",
    "updated_at": "2024-01-29T21:54:48Z",
    "body": "Hi Barry,We collect LoAF RUM data, and we consider the longest LoAF of the page with firstUIEventTimestamp >0 as the INP of the page.Sent from my iPhoneOn 29 Jan 2024, at 19:04, Barry Pollard ***@***.***> wrote:\ufeff\r\nYou could in theory have two interactions within the same frame, and the INP could be the second one so might not be the firstInteractionEventTimestamp. Or two interactions that start on the same timestamp.\r\nThough struggling to see how, as presumably the render delay part of INP wouldn't be until the end of the frame so the first one should be the longest... \ud83e\udd14\r\n\r\n\u2014Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you were mentioned.Message ID: ***@***.***>",
    "user": "anatdagan",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment is asking for clarification about how to determine the \"first\" interaction event timestamp when collecting LoAF RUM data. It's essentially a usability question related to understanding the behavior of LoAF RUM."
  },
  {
    "id": 1987793677,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/1",
    "created_at": "2024-01-30T15:51:57Z",
    "updated_at": "2024-01-30T15:51:57Z",
    "body": "As one thing to consider-- LoAF is used for more than just INP measurement.  Some folks have been using it for Smoothness and a type of \"FPS\" measure.\r\n\r\nIn those cases, `firstUIEventTimestamp` might represent the e.g. pointermove/scroll events.\r\n\r\nI cannot say if the current value is useful or not, but if the issue is INP overlap I think there is a wider discussion about how best to do EventTiming <-> LoAF attribution and we can delay this decision until we gain more experience on this type of attribution work?",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides specific technical information, such as the potential use case for LoAF beyond INP measurement (Smoothness/FPS measure), and offers suggestions for improvement by suggesting a wider discussion about attributing EventTiming to LoAF. It does not appear to be related to user experience, features, or administrative tasks, nor is it focused on philosophical debates."
  },
  {
    "id": 1997971195,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/10",
    "created_at": "2024-03-14T17:25:40Z",
    "updated_at": "2024-03-14T17:25:40Z",
    "body": "This relates to other discussions, like exposing cold-start for navigations...\r\nIt's a broad issue about adding some entropy dimension to the performance timeline, about slowness/jank that's not actionable by the author.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on how to improve performance in navigation, specifically mentioning the need for more information (entropy) in the timeline. It is a constructive suggestion for improvement and does not appear to be related to an existing discussion or request."
  },
  {
    "id": 2025930993,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-03-28T19:15:09Z",
    "updated_at": "2024-03-28T19:15:09Z",
    "body": "New Relic RUM needs some way of informing developers that hook into the LoAF API directly that our wrapper is not the cause of their long animation frames. I was going to look at maybe just overriding the `name` on the function given the wrapped function has a `name` property but this is probably going to cause more issues, especially around stack trace cleansing, even if it does work.\r\n\r\nUltimately, we need a way to direct the developer back to the offending code and I don't think having just a name is sufficient. Even if we could update the name, if the line numbers and file name still point to the RUM provider, developers will still be confused.",
    "user": "patrickhousley",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is asking for a feature that would allow developers to get more information about how their changes are being executed in New Relic RUM without having to use a wrapper. This involves providing feedback directly from the source code, which is not currently available through the provided suggestion of overriding the `name` property."
  },
  {
    "id": 2036802745,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/11",
    "created_at": "2024-04-04T10:33:10Z",
    "updated_at": "2024-04-04T10:33:10Z",
    "body": "Actually testing this I see that we do get source information for those, what we don't get is source information for e.g. `setTimeout(\"string\")`, not sure what the source information for that should be...",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment appears to be providing feedback about a specific feature or behavior of an application, which suggests it is related to testing and quality assurance, specifically evaluating how well certain types of code (e.g. `setTimeout`) are implemented."
  },
  {
    "id": 2135187530,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-28T13:13:14Z",
    "updated_at": "2024-05-28T13:13:14Z",
    "body": "The LoAF source attribution is based on the actual \"entry point\" that is registered with the browser for scheduling, and which is invoked to start this new task / loaf-script, rather than any code that might eventually be called as part of this task.\r\n\r\n- The browser doesn't know you are using React or how React Components use event listeners\r\n- You the developer know that you have a custom event listener defined inside a Component and this is attached a specific element and that this event does the \"interesting bit\" of work. However...\r\n- React happens to [do its own synthetic event dispatch](https://react.dev/reference/react-dom/components/common#react-event-object) (See [caveats](https://react.dev/reference/react-dom/components/common#react-event-object-caveats)) which has some benefits and drawbacks (such as issues like this)\r\n  - Here is one [random article that describes some of the benefits](https://medium.com/@sagnik.das2/what-is-react-synthetic-events-8d7ad766d821)\r\n  - And one [random article that describes some of the drawbacks](https://medium.com/@jessebillard/react-synthetic-events-are-funny-669a25dc103e)\r\n- In the case of LoAF attribution, because react is acting as a \"wrapper\" for your component code, LoAF can only attribute down to the React library.\r\n  - This is also common on pages that use library that wrap all native APIs, e.g. for measurement.\r\n\r\n---\r\n\r\nGenerally, when using frameworks / compilers / bundlers / wrapper libraries... and especially for complex JS-apps using Component style development, it is often the case that the literal source location value returned by LoAF attribution links to a computer generated bundle and with a minified and unreadable name and inconsistent source locations.\r\n\r\nFor that reason, it is expected that you will likely need to rely on source maps (or other lookup methods) to actually show nice developer-readable attribution.  This might require some assistance by frameworks themselves, and LoAF has not be available for very long.  (Though some analytics providers are beginning to offer some of this as a product).\r\n\r\nFor local development, I would say this attribution is expected to be more useful if you use more Vanilla JS approaches to scheduling -- and over time, perhaps JS frameworks will be able to leverage more \"vanilla\" scheduling directly, as the reasons for wrappers are largely historic and for compatibility reasons at this point (and some frameworks already are more vanilla).\r\n\r\n---\r\n\r\nFor attributing INP for a project like yours, I would probably:\r\n\r\n- Use the fact that this is calling into ReactDOM as a signal that this is a Component listener that you explicitly added, rather than some 3p library code / global listeners.\r\n- Instead of using the source location, use the `event.target` from the INP attribtion, as well as the `event.type`.\r\n- Use this information (perhaps from RUM) to find the right UI element (likely testing in lab), then just inspect the DOM (or run a perf profile) to find the long event listener.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed technical insights and observations about the LoAF source attribution mechanism, including its limitations and potential drawbacks. It also suggests alternative approaches for attributing INP locations in certain cases. The tone is informative and technical, providing specific examples and explanations to support the author's points."
  },
  {
    "id": 2135196062,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-05-28T13:17:03Z",
    "updated_at": "2024-05-28T13:17:03Z",
    "body": "Might be related to https://github.com/w3c/long-animation-frames/issues/11",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment appears to provide a specific suggestion or point of interest related to the GitHub issue trackable by w3c/long-animation-frames, which is likely about animations in HTML5. The mention of \"https://github.com/w3c/long-animation-frames/issues/11\" suggests that the commenter is referencing this particular issue."
  },
  {
    "id": 2136581470,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T06:03:26Z",
    "updated_at": "2024-05-29T06:03:26Z",
    "body": "Thanks a tonne for the detailed response @mmocny @tunetheweb over the linked issue! I have been playing around with these metrics and was trying one specific case where some unexpected and interesting metrics were logged, and was hoping to get an insight from you on the same:\r\n\r\nI am currently logging the `interactionTargetElement` node which we get from the attribution data of INP metric (added in v4), alongside this I have a PerformanceObserver which observes for type `long-animation-frame`, to get details about long tasks. The code snippet for the same:\r\n```typescript\r\n\r\n// function logging relevant details to a performance entry\r\n  const analyzePerformanceEntry = (entry) => {\r\n    const { renderStart, firstUIEventTimestamp, blockingDuration, scripts } = entry;\r\n    console.log(`\r\n      Performance Analysis:\r\n      Render Start: ${renderStart}\r\n      First UI Event Timestamp: ${firstUIEventTimestamp}\r\n      Blocking Duration: ${blockingDuration}\r\n      Scripts:\r\n    `);\r\n    scripts.forEach((script) => {\r\n      const { duration, executionStart, sourceURL, sourceFunctionName, invoker, invokerType } = script;\r\n      console.log(`\r\n        Duration: ${duration}\r\n        Execution Start: ${executionStart}\r\n        Source URL: ${sourceURL}\r\n        Source Function: ${sourceFunctionName}\r\n        Invoker: ${invoker}\r\n        Invoker Type: ${invokerType}\r\n      `);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const REPORTING_THRESHOLD_MS = 150;\r\n    \r\n// performance observer\r\n    const observer = new PerformanceObserver((list) => {\r\n      for (const entry of list.getEntries()) {\r\n        if (entry.duration > REPORTING_THRESHOLD_MS && (entry as any).firstUIEventTimestamp > 0) {\r\n          console.log(\"Long task detected:\", entry);\r\n          analyzePerformanceEntry(entry);\r\n        }\r\n      }\r\n    });\r\n\r\n    observer.observe({ type: \"long-animation-frame\", buffered: true });\r\n\r\n// callback function to be passed to the `onINP()` method\r\n    const handleINP = (metric) => {\r\n      const { attribution } = metric;\r\n      const { interactionTarget, interactionTargetElement } = attribution;\r\n\r\n      console.log('INP Attribution:');\r\n      console.log(`Interaction Type: ${interactionTarget}`);\r\n      if (interactionTargetElement) {\r\n        const reactPropsKey = Object.keys(interactionTargetElement).find(key => key.startsWith('__reactProps'));\r\n        const reactProps = reactPropsKey ? interactionTargetElement[reactPropsKey] : {};\r\n\r\n        console.log(`\r\n          Interaction Target Element:\r\n          Node Name: ${interactionTargetElement.nodeName}\r\n          Text Content: ${interactionTargetElement.textContent}\r\n          Parent Node Name: ${interactionTargetElement.parentNode?.nodeName}\r\n          Parent Text Content: ${interactionTargetElement.parentNode?.textContent}\r\n          React Props: ${reactProps ? JSON.stringify(reactProps) : 'N/A'}\r\n        `);\r\n      }\r\n    };\r\n\r\n    onINP(handleINP, { reportAllChanges: true });\r\n\r\n    return () => {\r\n      observer.disconnect();\r\n      onINP(null); // Ensure onINP callback is cleaned up\r\n    };\r\n  }, []);\r\n  \r\n// handler for click on button of 3s\r\n   const handleAddItem = () => { \r\n    const newItem = { id: items.length + 1, name: \"\", category: \"\" };\r\n    const start = Date.now();\r\n    while (Date.now() - start < 3000) {}\r\n    setItems([...items, newItem]);\r\n  };\r\n\r\n// handler for click on button of 4s\r\n  const handleAddItem4s = () => {\r\n    const newItem = { id: items.length + 1, name: \"\", category: \"\" };\r\n    const start = Date.now();\r\n    while (Date.now() - start < 4000) {}\r\n    setItems([...items, newItem]);\r\n  };\r\n``` \r\n\r\nI was then testing around with some cases to get results from these logs. The page can be found here: [https://webperf-alpha.vercel.app/dashboard/inp](https://webperf-alpha.vercel.app/dashboard/inp). On loading of this application page on localhost without any CPU Throttling and on Mobile dimensions, I tested for the input: \r\n1. Click on Add Item (4s) button\r\n2. Click on Add Item (3s) button immediately after clicking above\r\n3. Click on Add Item (4s) button again immediately after clicking above.\r\n\r\nThe output behaviour is rather interesting, and I am unable to explain them:\r\nThe first item is added after 4s, the second and third items are loaded together after 7s of the time the first item was loaded. The `interactionTargetElement` shows the 3s button for some reason. There are two doubts here: why is the 2nd and 3rd step above batched together and executed at once (combined delay of 7s?) and why is the target element pointing towards the 3s button and not the 4s button ? The `interactionTarget` docs say:\r\n```\r\n  /**\r\n   * A selector identifying the element that the user first interacted with\r\n   * as part of the frame where the INP candidate interaction occurred.\r\n   * If this value is an empty string, that generally means the element was\r\n   * removed from the DOM after the interaction.\r\n   */\r\n``` \r\n\r\nSo for instance in the case where I first select the 4s button and then immediately click the 3s button, the attribution should point out the element where the interaction started: i.e. the Add Item (4s) button, but it seems the reverse is happening. Am I missing anything here ? An insight into the same would be highly appreciated.\r\n\r\nOutput image:\r\n<img width=\"1791\" alt=\"Screenshot 2024-05-29 at 1 57 05\u202fAM\" src=\"https://github.com/w3c/long-animation-frames/assets/171024309/1cd73ce1-ef87-4e20-908d-dc1db12b45b0\">\r\n",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "philosophical",
    "reason": "The code is not primarily focused on technical implementation details, but rather exploring the behavior of an asynchronous system (PerformanceObserver) and attempting to extract insights from it. The code appears to be a complex experiment designed to test the interaction between different parts of a web application during high-load scenarios. While there are some technical aspects involved (e.g., working with PerformanceObserver and interaction targets), the primary goal is to gain insight into how these interactions work, which makes this comment a philosophical one."
  },
  {
    "id": 2136852650,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T08:35:13Z",
    "updated_at": "2024-05-29T08:35:13Z",
    "body": "I think I figured out the reason the performance metrics are reported together for the 2nd and the 3rd click: it is due to React batching the updates together, hence the metrics for the 2nd and 3rd click log together at once. I tested this logic for another case with 4 clicks, the last 3 updates are batched here again. So that is due to the latest React features, but again the doubt of which `interactionTargetElement` will be reported in such scenarios still stand, the perceived output is different from the expected one as specified in the docs. ",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides an explanation and a test case for the problem mentioned, indicating that it is related to debugging or troubleshooting React-related issues. It also suggests possible solutions to this issue, which implies that the commenter has identified a bug or a performance optimization opportunity in the current implementation."
  },
  {
    "id": 2136875096,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T08:45:41Z",
    "updated_at": "2024-05-29T08:45:41Z",
    "body": "> alongside this I have a PerformanceObserver which observes for type long-animation-frame, to get details about long tasks. \r\n\r\nv4 includes any long tasks overlapping the INP event in the INP callback to save you having to monitor that separately.\r\n\r\nBut it can be good to measure all LoAFs to also get long task outside the immediate INP event.\r\n\r\n> I think I figured out the reason the performance metrics are reported together for the 2nd and the 3rd click: it is due to React batching the updates together, hence the metrics for the 2nd and 3rd click log together at once. I tested this logic for another case with 4 clicks, the last 3 updates are batched here again. So that is due to the latest React features, but again the doubt of which interactionTargetElement will be reported in such scenarios still stand, the perceived output is different from the expected one as specified in the docs.\r\n\r\nOK that's interesting. I would guess React is trying it's best to be responsive to the first click, but then batching the rest together to save having to do multiple layouts together?\r\n\r\nGoing  back to the docs:\r\n\r\n```js\r\n   /**\r\n   * A selector identifying the element that the user first interacted with\r\n   * as part of the frame where the INP candidate interaction occurred.\r\n   * If this value is an empty string, that generally means the element was\r\n   * removed from the DOM after the interaction.\r\n   */\r\n```\r\n\r\nIt would seem, that in that example, there would be two frames\u2014the first with click 1, and the second with the remaining clicks that React has batched together.\r\n\r\nIn that case the frame with the longest one will be the \"INP frame\". All else being equal this would be the second frame (as it includes multiple clicks so will take multiple processing times to finish). And this is what you are seeing. The `interactionTarget` is set to the first interaction of the INP frame. The prior frame may well have been quite slow, but the subsequent one was slower still. Now I know you're running this with `reportAllChanges: true` but if all the Event Timings are reported together (as could often be the case in cases like this where the main thread is busy), then they will be processed together, but split into frames, so only the second one would be emitted as an INP event.\r\n \r\nSo I think the docs (and the implementation!) are right in this case. But certainly a confusing one if you're not aware how this all works!",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "administrative",
    "reason": "This comment is providing information and clarification about the functionality of React's PerformanceObserver, specifically how it handles multiple clicks on an element that triggers an INP (Interactive Paint) event. The author is attempting to understand the internal workings of the framework and identify potential areas for improvement or optimization."
  },
  {
    "id": 2136927207,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T09:11:09Z",
    "updated_at": "2024-05-29T09:11:09Z",
    "body": "> OK that's interesting. I would guess React is trying it's best to be responsive to the first click, but then batching the rest together to save having to do multiple layouts together?\r\n\r\nYep exactly! I was not sure if we would should view this as separate frames (even if so how exactly though): one for the first click and the second for all the subsequent clicks. This logics fits perfectly and makes sense, checked on the following case of immediate clicks one after the another:\r\n1. 3s button\r\n2. 3s button\r\n3. 4s button\r\n4. 4s button\r\n\r\nThe `interactionTargetElement` is indeed reported as the 3s button (starting interaction of the 2nd frame). \r\nThanks for the clarification :)\r\n\r\n",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment is discussing a specific use case related to the application, particularly how React handles the rendering of multiple buttons on the same click. The commenter is providing feedback and insights based on their experience with React and its interaction with user input, making it clear that this is an evaluation or assessment of the software's behavior rather than just technical information or suggestions for improvement."
  },
  {
    "id": 2136940006,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T09:17:31Z",
    "updated_at": "2024-05-29T09:17:31Z",
    "body": "> I was not sure if we would should view this as separate frames (even if so how exactly though)\r\n\r\nIf you look at Event Timing entries I'd expect the first to finish (starttime + duration) at time 1, and the rest all at the same time 2 (or close enough minus some rounding and limits!), since the \"starttime + duration\" is approximately the frame paint time (rather than the end of event handler processing).\r\n\r\nShould also be able to see in a performance trace.",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on how the system or code handles events and their timing, specifically mentioning issues with the assumption about frame painting times. It offers suggestions for improvement, including the ability to view event timings in the \"performance trace\" which suggests a technical support or debugging context."
  },
  {
    "id": 2136969621,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T09:32:23Z",
    "updated_at": "2024-05-29T09:32:23Z",
    "body": "Right, will see once with a performance trace as well.",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing feedback on something technical (a performance issue) and suggests a solution or further action that should be taken to resolve the problem."
  },
  {
    "id": 2137155561,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-29T11:11:23Z",
    "updated_at": "2024-05-31T14:40:00Z",
    "body": "OK so tried this.\r\n\r\n**Desktop**\r\n\r\nWhen I do this:\r\n- Click on Add Item (4s) button\r\n- Click on Add Item (3s) button immediately after clicking above\r\n- Click on Add Item (4s) button again immediately after clicking above.\r\n\r\nI see this:\r\n- All 3 items are rendered together\r\n- The INP target is the 4s click element\r\n\r\n<img width=\"1484\" alt=\"image\" src=\"https://github.com/w3c/long-animation-frames/assets/10931297/2c62b35b-b357-4ea3-b18e-a2dcfb1113f6\">\r\n\r\n- The trace shows they were indeed split into two tasks, but both were rendered together, hence why the first interaction was the longest one from INP point of view.\r\n\r\n<img width=\"800\" alt=\"image\" src=\"https://github.com/w3c/long-animation-frames/assets/10931297/9792891a-3643-446b-8a7d-bf9e1e55454a\">\r\n\r\n**Mobile**\r\n\r\nWhen enabling mobile emulation and repeating, it's slightly different:\r\n\r\n- Two INP events are emitted, with the second being much longer (due to being delayed by the first), and overtaking the first. This second one is therefore the ultimate INP for the page. The first INP target is the 4s button, the second is the 3s button:\r\n\r\n<img width=\"774\" alt=\"image\" src=\"https://github.com/w3c/long-animation-frames/assets/10931297/157a41cf-e96c-4244-b55e-7b09ba0399b5\">\r\n\r\nThe trace shows two distinct interactions:\r\n\r\n<img width=\"733\" alt=\"image\" src=\"https://github.com/w3c/long-animation-frames/assets/10931297/5da817fa-5c46-49c1-9e5b-d02ea89c37ba\">\r\n\r\nWeirdly the screenshot do not show two step render, but that's what I saw with my own eyes, and if you zoom in there is a paint and a commit between the two confirming a render happened then:\r\n\r\n<img width=\"249\" alt=\"image\" src=\"https://github.com/w3c/long-animation-frames/assets/10931297/0ea37fde-aa64-42b7-8128-66730005a5b6\">\r\n\r\nSo it looks like on mobile Chrome prefers the early, separate paint, but on desktop it decides to wait and do them both together. Chrome does all sorts of heuristics to decide when to render a frame, especially when it knows there are more inputs to process, and it looks like the mobile and desktop heuristics are slightly different. Maybe @mmocny can explain why?\r\n\r\n",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed explanations of how Chrome handles animation frames on both desktop and mobile platforms, indicating that there is a technical issue or misunderstanding regarding how Chrome renders animations."
  },
  {
    "id": 2142366987,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-05-31T14:29:55Z",
    "updated_at": "2024-05-31T14:33:19Z",
    "body": "At the start of a `BeginMainFrame` task (i.e. rendering) Chrome will *flush all UI events* which are *already queued in the event loop* at the start of BMF, but won't flush any that are added during the BMF.\r\n\r\nTherefore, if your first interaction is so long running that you have time to interact again, before BMF starts *and the browser process actually sends these events to renderer in time*, then you will effectively cluster those inputs into a single long animation frame.\r\n\r\nI don't think the scheduling policy is any different on desktop or mobile-- but what changes is that as we change input types, we change how we send events from browser to renderer.\r\n\r\nTouch is weirder than mouse input-- and DevTools touch emulation is weirdest of all.  Sometimes you have to wait for Renderer to acknowledge feedback from previous events (i.e. IPC messages that start after processingEnd), and before browser can send new IPC about future events...\r\n\r\n---\r\n\r\nIn this case these were distinct interactions, so I had expected it would work.  I tried myself locally and could repro as Barry says.  It wasn't just luck / races.\r\n\r\nI traced with Perfetto and here is what I see:\r\n\r\n1. Indeed, the second and third events are stuck in browser process waiting for the first event to finish:\r\n\r\n![Screenshot 2024-05-31 at 10 14 58](https://github.com/w3c/long-animation-frames/assets/474282/79248419-a34d-46a9-bc6f-154bd5501eee)\r\n\r\nThe 'flow' shows when the browser received the event and forwarded it to the renderer.  You should see that it is first started after the first interactions ends-- weird, I definitely interacted earlier!\r\n\r\n\r\n2. If I follow that flow to the begging I see references to `RenderWidgetHostInputEventRouter::ForwardEmulatedGestureEvent`, and I can find another flow event:\r\n\r\n![Screenshot 2024-05-31 at 10 14 47](https://github.com/w3c/long-animation-frames/assets/474282/02df15a4-aba3-43de-9304-0eb73631018c)\r\n\r\nFollowing that flow to its start, I find the original `RenderWidgetHostViewCocoa::mouseEvent`.\r\n\r\nLooks like the way Touch emulation works is:\r\n- Browser receives mouse events, sends to renderer\r\n- Renderer has to schedule the mouse events, before it can \"reject them\" and ask for touch simulation instead\r\n- Goes back to Browser and back to renderer.\r\n\r\nAll this means that we are guaranteed to have a few process IPC between the end of the first interaction event and the start of BMF task and that is a very narrow window to race and rendering will win.\r\n\r\n---\r\n\r\nNet/net, don't rely on mobile emulation for very detailed scheduling test :D\r\n\r\nAlso -- more generally -- I have been [advocating to make some scheduling changes to this scheduling policy](https://issues.chromium.org/issues/338037072), so I wouldn't rely on it too heavily.\r\n\r\nOther browsers are already different.  The mobile emulated behaviour today is likely to match the future behaviour more if I was to guess.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment describes a specific use case or scenario where Chrome's behavior of not flushing UI events during rendering results in a longer-than-expected animation frame, and it provides a solution for troubleshooting this issue. The comment is focused on describing the problem and proposing a potential fix, which makes it a use case-related discussion rather than technical feedback, feature request, administrative, or philosophical."
  },
  {
    "id": 2144283217,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/13",
    "created_at": "2024-06-03T04:59:48Z",
    "updated_at": "2024-06-03T04:59:48Z",
    "body": "Got it, thanks a lot for the detailed explanation! ",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing feedback on a piece of code or documentation, specifically that it needs to be clarified. The tone is professional and polite, indicating that the commenter is seeking guidance rather than expressing dissatisfaction with something."
  },
  {
    "id": 2158910590,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T17:20:42Z",
    "updated_at": "2024-06-10T17:20:42Z",
    "body": "Requesting to review this once (@mmocny @tunetheweb @noamr), the current LoAF entries obtained from a simple PerformanceObserver observing for Long Animation Frames like:\r\n```typescript\r\n    const REPORTING_THRESHOLD_MS = 150;\r\n    const observer = new PerformanceObserver((list) => {\r\n      for (const entry of list.getEntries()) {\r\n        if (\r\n          entry.duration > REPORTING_THRESHOLD_MS &&\r\n          (entry as any).firstUIEventTimestamp > 0\r\n        ) {\r\n          console.log(\"Long task detected:\", entry)\r\n          analyzePerformanceEntry(entry);\r\n        }\r\n      }\r\n    });\r\n\r\n    observer.observe({ type: \"long-animation-frame\", buffered: true });\r\n``` \r\n\r\nTo get something more actionable, if we could get the exact function (name) delaying the main thread it would be best (case where we automating this process of finding action items. The sourceFunctionName and sourceURL are not really helpful when working with a bundled code (eg: like in ReactJS, NextJS). Is there a way to get more insights into the same apart from the above so that finding actionable items is easier ? I am aware of the method specified here: \"[https://github.com/w3c/long-animation-frames/issues/3#issuecomment-1987796069](https://github.com/w3c/long-animation-frames/issues/3#issuecomment-1987796069)\" , but something more useful in scenarios such as above would be nice. Continuation of Issue: [https://github.com/w3c/long-animation-frames/issues/3](https://github.com/w3c/long-animation-frames/issues/3)",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides a specific example and code snippet from the current LoAF (Long Animation Frames) implementation, along with suggestions for improvement or potential issues. It requests additional insight into finding actionable items in such scenarios, which is classified as technical feedback."
  },
  {
    "id": 2158916412,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T17:24:20Z",
    "updated_at": "2024-06-10T17:24:20Z",
    "body": "@jinja12 that seems directly related to #3 as you mention, rather than the issue @rackaam raised here?",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment is asking for feedback on a different topic than the one presented in the original code snippet. The author of the code is referencing a specific ticket number (#3) that mentions the request they are currently discussing, but their comment does not seem to be related to this ticket."
  },
  {
    "id": 2158952596,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T17:45:43Z",
    "updated_at": "2024-06-10T17:45:43Z",
    "body": "Yeah, I added it here since I too want to get more information regarding the entry point of the function responsible for the long task blocking (not specific to setTimeout)",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback about a specific piece of code or functionality, describing its purpose and how it was used. It does not ask a question, request information, propose an idea, provide analysis, discuss a topic, offer advice, draw conclusions, present philosophical perspectives, or pose an unknown issue."
  },
  {
    "id": 2158994498,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T18:09:21Z",
    "updated_at": "2024-06-10T18:09:21Z",
    "body": "This is more related to #11 than to #3. It's most likely `setTimeout(code_as_string, timeout)` and `xhr.onreadystatechange = handler_as_string`, both of which don't have an obvious source location. We can perhaps provide an elided version of the source code itself, or an md5 digest?",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment is providing specific suggestions for improving the code by pointing out a potential issue with timing-related functions and function calls that are not immediately obvious in their location within the code."
  },
  {
    "id": 2159006932,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T18:16:12Z",
    "updated_at": "2024-06-10T18:20:27Z",
    "body": "Right, is there an existing way to get the source location of the function calling the long task in bundled packages in cases excluding the one you mention? For example:\r\n```typescript\r\nfunction blockMainThread(duration: number) {\r\n    const start = Date.now();\r\n    while (Date.now() - start < duration) {\r\n      // Busy-wait loop to block the main thread\r\n    }\r\n}\r\n\r\n// A simple form embedded on a page, which when submitted triggers a 3s main thread block\r\nconst form = document.getElementById('testForm');\r\n\r\nform.onsubmit = (event) => {\r\n  event.preventDefault();\r\n  blockMainThread(3000); // 3-second blocking operation\r\n};\r\n```",
    "user": "jinja12",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "administrative",
    "reason": "This comment is not providing technical feedback or suggestions for improvement, nor does it propose a new feature or request. Instead, it's an example code snippet and its usage is being discussed. It's primarily focused on explaining how to use the `blockMainThread` function in a bundled package, which is then used as an example in another part of the code."
  },
  {
    "id": 2159118326,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/12",
    "created_at": "2024-06-10T19:18:04Z",
    "updated_at": "2024-06-10T19:18:04Z",
    "body": "> Right, is there an existing way to get the source location of the function calling the long task in bundled packages in cases excluding the one you mention? For example:\r\n> \r\n> ```ts\r\n> function blockMainThread(duration: number) {\r\n>     const start = Date.now();\r\n>     while (Date.now() - start < duration) {\r\n>       // Busy-wait loop to block the main thread\r\n>     }\r\n> }\r\n> \r\n> // A simple form embedded on a page, which when submitted triggers a 3s main thread block\r\n> const form = document.getElementById('testForm');\r\n> \r\n> form.onsubmit = (event) => {\r\n>   event.preventDefault();\r\n>   blockMainThread(3000); // 3-second blocking operation\r\n> };\r\n> ```\r\n\r\nIn this case `sourceLocation` would give you the location of the arrow function you passed to `onsubmit`. There is no existing low-overhead way to give you the source location of `blockMainThread`, as that would require a full stack trace which is a very heavy operation, but as per #11 you can wrap it in user timing and perhaps we can at some point provide some mechanism for conditional user-timing or special function annotation for this purpose.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on how to implement a feature (getting the source location of an arrow function) that was not mentioned in the original code. It suggests using timing to achieve this, but does not provide any technical details or implementation guidance for the feature itself."
  },
  {
    "id": 2164215990,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/14",
    "created_at": "2024-06-13T02:06:46Z",
    "updated_at": "2024-06-13T02:06:46Z",
    "body": "LoAF does fall back to reporting just \"long task\", and as you note in the demo, the first key interaction does report a LoAF.\r\n\r\nI don't think this has anything to do with paints.  For some reason the second long task isn't reported.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "This comment appears to be discussing the functionality of LoAF (Long-Affected Features) and its ability to report tasks, specifically a \"long task\". The commenter is also referencing a demo that seems to indicate a failure with reporting on this specific type of task."
  },
  {
    "id": 2164976440,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/14",
    "created_at": "2024-06-13T08:25:09Z",
    "updated_at": "2024-06-13T10:25:28Z",
    "body": "OK sounds like a Chromium Bug so raised this: https://issues.chromium.org/issues/346918311\r\n\r\n> LoAF does fall back to reporting just \"long task\"\r\n\r\nIs this explicitly documented anywhere in the spec? Can't see it. Should it be?",
    "user": "tunetheweb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing an explicit suggestion for change and improvement, which falls under the category of technical feedback. It's a specific example that describes a potential bug or issue with the current behavior, and the commenter is offering a proposed solution to address it."
  },
  {
    "id": 2165771712,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/14",
    "created_at": "2024-06-13T14:03:24Z",
    "updated_at": "2024-06-13T14:03:24Z",
    "body": "The second paragraph of the intro in this repo:\r\n\r\n> Long animation frames (LoAF), as a revamp of longtasks, aim to assist with that: a LoAF is an indication that at a particular point in time, the browser was congested, in such a way that it took a long time from the beginning of a task until updating the rendering **(or until the point where it was clear that no render was necessary)**.\r\n\r\n(emphasis mine)\r\n\r\nThen the section that [introduces LoAF](https://github.com/w3c/long-animation-frames?tab=readme-ov-file#introducing-loaf) says:\r\n\r\n> It's the time measured between when the main thread started doing any work (see startTime [here](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model)), until it is either [ready to paint](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model:mark-paint-timing) or idle (has nothing to do).\r\n\r\nAnd of course, its well specced:\r\n\r\n* This [english-language paragraph summarizes](https://w3c.github.io/long-animation-frames/#loaf-vs-longtasks)\r\n* I think [this bit](https://w3c.github.io/long-animation-frames/#record-task-end-time) step 6 is it:\r\n\r\n> If the user agent believes that updating the rendering of document\u2019s [node navigable](https://html.spec.whatwg.org/multipage/document-sequences.html#node-navigable) would have no visible effect, then [report frame timing](https://w3c.github.io/long-animation-frames/#report-frame-timing) given document and return.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment is discussing the implementation of a use case related to Long Animation Frames (LoAF), specifically how it aims to assist with issues like long animation frames causing browser congestion. This suggests that the purpose of the code is to address a specific user experience issue, which aligns with the classification as a \"Use Case\"."
  },
  {
    "id": 2165838404,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/14",
    "created_at": "2024-06-13T14:27:04Z",
    "updated_at": "2024-06-13T14:27:04Z",
    "body": "I just did some test in Canary and found that when this symptom happens, all of LoAF measurement is not working at all-- even for tracing.\r\n\r\nSo, it's not that LoAF is choosing not to emit a performance entry, its that we are failing to observe LoAF durations.\r\n\r\nI'll have to run a custom build to see what animation frame timing monitor is observing here.  (e.g. are we still observing tasks but for some reason the attribution is getting accumulated forever without flushing?  Do we stop observing?  Is the monitor destroyed/detached?)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed information about a specific issue encountered during testing, including its reproducibility and potential causes. It also requests that the developer investigate further to resolve the problem."
  },
  {
    "id": 2195416238,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-06-27T18:25:12Z",
    "updated_at": "2024-06-27T18:25:12Z",
    "body": "I agree that this would be a lot more convenient for developers to see line/column instead of char position.  In an earlier prototype that is actually how it worked.\r\n\r\nHowever-- Noam noticed that this was a perf regression, because it requires parsing the text (in order to find all the newline characters).  This isn't something that happens typically and so it is expensive to do automatically.\r\n\r\n---\r\n\r\nI wonder if it could be possible to request this type of parsing explicitly, after the LoAF fires, only once we know there is a client that is interested?",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The commenter suggests adding an option for developers to choose whether to see line/column references instead of character positions in their output. This request aims to improve user experience by providing more relevant information."
  },
  {
    "id": 2196792582,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-06-28T12:24:07Z",
    "updated_at": "2024-06-28T12:24:07Z",
    "body": "Thanks for the reply!\r\n\r\nFor more context, I'm sending the LoAF to an observability tool for later use and I'm trying to link the sourceCharPosition to the matching development file.\r\nAgreed that natively paying that cost for every LoAF is probably not great. A way to opt-in to it would be a good alternative.\r\n\r\nI tried to replicate this in user space by using `fetch` and `only-if-cached` request in order to retrieve the source file content if it exists in the browser cache. I then compute the `sourceLine` and `sourceColumn` from the `sourceCharPosition` provided by the LoAF and it seems to work well.\r\n\r\nHowever it would be even better with the opt-in API you're suggesting.",
    "user": "Miz85",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical feedback on how to improve a solution, specifically recommending a way to handle a certain situation (linking source files to development files) and suggesting an alternative approach for handling it. The tone of the comment is neutral and informative, with no emotional language or personal opinions."
  },
  {
    "id": 2197229669,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-06-28T15:59:35Z",
    "updated_at": "2024-06-28T15:59:35Z",
    "body": "Oh that's a neat strategy to just polyfill on client.  Neat!  I might use\r\nthat!\r\n\r\nI suspect that many scripts are dynamically rendered per request, and/or\r\nminified, and require source mapping (not just to the UN minified file but\r\nalso to original source templates) and this seems best done server side,\r\nanyway.\r\n\r\nIf the script is static, then char position should be sufficient to do the\r\nline mapping on server as well.\r\n\r\nIt's neat to do on client, but I suspect there aren't many cases where it's\r\nactually better, except for local debugging use cases.\r\n\r\nNot sure though-- is there a use case where doing it on client is\r\nspecifically enabling? Ignoring just developer ergonomics?\r\n\r\nOn Fri, Jun 28, 2024, 08:24 Nazim Saouli ***@***.***> wrote:\r\n\r\n> Thanks for the reply!\r\n>\r\n> For more context, I'm sending the LoAF to an observability tool for later\r\n> use and I'm trying to link the sourceCharPosition to the matching\r\n> development file.\r\n> Agreed that natively paying that cost for every LoAF is probably not\r\n> great. A way to opt-in to it would be a good alternative.\r\n>\r\n> I tried to replicate this in user space by using fetch and only-if-cached\r\n> request in order to retrieve the source file content if it exists in the\r\n> browser cache. I then compute the sourceLine and sourceColumn from the\r\n> sourceCharPosition provided by the LoAF and it seems to work well.\r\n>\r\n> However it would be even better with the opt-in API you're suggesting.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/w3c/long-animation-frames/issues/16#issuecomment-2196792582>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AADTZKQ4FVJIVZVHCGQDXC3ZJVIX3AVCNFSM6AAAAABJ53I4OSVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCOJWG44TENJYGI>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> ***@***.***>\r\n>\r\n",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "philosophical",
    "reason": "This comment expresses the author's personal opinion about the value and utility of source character positioning for annotating long animation frames, but does not present a practical solution or technical implementation to achieve it. It also raises questions and challenges existing approaches rather than providing constructive feedback or suggestions."
  },
  {
    "id": 2198219944,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-06-29T14:51:29Z",
    "updated_at": "2024-06-29T14:51:29Z",
    "body": "yes you're absolutely right! However I'm working on an observability tool and I want to collect LoAFs for our users and link to their source code automatically.\r\n\r\nSo my constraints are:\r\n- I don't have access to the minified file on the server side\r\n- I do have access to source maps because users have a way to send them to us through an API\r\n\r\nThis is why I did that way. However it's good enough for a POC but I'm probably gonna hit CORS issues. If the opt-in API you were suggesting existed, I could let our users opt-in to that computation and accept the performance hit as a trade off to being able to monitor LoAFs.",
    "user": "Miz85",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment is requesting for an improvement or modification of existing functionality. The user wants to collect LoAFs (Line-Of-Affair) data from users and link it to their source code automatically, but they need help with handling CORS issues that may arise during this process."
  },
  {
    "id": 2208455290,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-07-04T08:54:41Z",
    "updated_at": "2024-07-04T08:54:41Z",
    "body": "@mmocny Coming back to your idea about performing the parsing only once we know there is a client that is interested. What would be a good way to advocate for that and see if it could actually get included down the line?",
    "user": "Miz85",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment describes a specific use case (advocating for an idea after knowing its potential impact) and provides a suggestion on how to proceed. It does not specifically request a feature or provide feedback, but rather explores a possibility of a client being interested in the proposed solution."
  },
  {
    "id": 2209163877,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-07-04T14:47:35Z",
    "updated_at": "2024-07-04T14:47:35Z",
    "body": "I think you just did :P\r\n\r\n@noamr for thoughts.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment appears to be providing constructive feedback on the code or approach taken, specifically mentioning that it seems like the intended action was a joke (\"I think you just did :P\"). The tone is informal and friendly, suggesting that the commenter is trying to assist in improving something."
  },
  {
    "id": 2209178668,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-07-04T14:55:42Z",
    "updated_at": "2024-07-04T14:55:42Z",
    "body": "I think this is better done in a service-worker than in the browser... Put the service worker between the document and the server that gives you the script, and tee the response stream to some processor that returns an array of line breaks. It should be trivial to create a `get_line_and_col(source_char_position, array_of_line_breaks)` function based on a similar function in chromium code.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is proposing a way to improve the current implementation by separating it from the server-side script and using a service worker for communication between the client and the server. This suggests that the intent is to enhance the user experience or provide additional functionality, rather than focusing on performance optimization or other technical aspects."
  },
  {
    "id": 2214333426,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-07-08T14:55:02Z",
    "updated_at": "2024-07-08T14:55:02Z",
    "body": "Hey @noamr, thank you so much for your reply!  Alright, sounds like a good path forward I'm going to give it a shot.",
    "user": "Miz85",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment appears to be an informal acknowledgement or expression of appreciation from the respondent to someone else (likely Noam R). It serves as a polite way to start the conversation, and its purpose is to begin the interaction."
  },
  {
    "id": 2223146756,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-11T14:52:27Z",
    "updated_at": "2024-07-11T14:52:27Z",
    "body": "Coming back to this, I think a potential way to address this is an additional attribute in {mark|measure}Options that helps filter user timing entries, with one of the options being to include those entries in the buffer only if they contribute to a LoAF (or a LoAF long-script).\r\n\r\nSo a library like NewRelic as mentioned in https://github.com/w3c/long-animation-frames/issues/3#issuecomment-2025930993 could wrap the user's function with `performance.measure(\"user-function\", {filter: \"long-animation-frame\"})` (strawman) and then it would be a much better insight than just the entry point.\r\n\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment provides a proposed solution for improving the analysis of user timing entries, specifically by introducing an additional attribute to filter out LoAF long-script entries from the buffer. It highlights the potential use of a library like NewRelic to achieve this."
  },
  {
    "id": 2225797941,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T15:10:56Z",
    "updated_at": "2024-07-12T15:13:55Z",
    "body": "> with one of the options being to include those entries in the buffer only if they contribute to a LoAF (or a LoAF long-script).\r\n\r\nIt seems to me like you would have to buffer these at first, then clean up these marks and measures afterwards.\r\n\r\nToday, there is no limit to the number of marks/measures in the buffer, so overflow is not really a problem (unless so many are issued that we get into overall memory usage worries).\r\n\r\nI think that means that: just adding marks/measures, leaving them there, then filtering manually, might be sufficient?\r\n\r\nWhat about just a `getEntriesBy*` variant that accepts both a `type` and also a time range (and optionally that this time range can be specified by passing another `entry`)?\r\n\r\nThe usage would be something like:\r\n\r\n- Create a PerformanceObserver for LoAF\r\n- From each LoAF entry observed, ask for the marks/measures that overlap its timing",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment proposes an additional way to handle LoAF (Load Average Over time) data in Performance Observers, specifically allowing filtering by type and/or time range. This is a practical improvement that would make it easier to process and analyze Load Average data."
  },
  {
    "id": 2225806222,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T15:15:24Z",
    "updated_at": "2024-07-12T15:15:24Z",
    "body": "As per your original proposal, Related questions:\r\n\r\n- It seems not so common to me to have active PerformanceObservers for marks/measures, but if someone did have one, would we want to report these LoAF-only entries?\r\n- If we did, would we delay adding these entries into the timeline until after we know if a LoAF happened (i.e. a separate buffer)?\r\n- If we did that, would we wait only until we know a LoAF is being measured, or wait for the LoAF is done measuring (i.e. LoAF always reported first)?",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is requesting an addition of PerformanceObservers for marks/measures in order to report LoAF-only entries in the timeline, while also considering the need to delay reporting these entries until after a LoAF has been measured. This suggests that the intention is to implement new functionality, rather than providing technical feedback or administrative guidance."
  },
  {
    "id": 2225813923,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T15:19:30Z",
    "updated_at": "2024-07-12T15:19:30Z",
    "body": "Also also, there have been requests to add groups/categories/labels to User Timings multiple times for multiple purposes.  I wonder if this really needs to be LoAF specific or if it could just be a generic feature like that?  Then library authors could use as they see fit and might be more creative that we are here?\r\n\r\nI guess the question I would have is: is it likely that a library like NewRelic would want to consume marks/measures that were created by a different app/library or just their own?  Would NewRelic want to share annotations that would be useful to consume by others?  (Such that a common standard us useful?)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment expresses a user's suggestion for improving the LoAF (Language Used for Analysis) format, specifically requesting groups/categories/labels to be added to User Timings. The user also asks about NewRelic's potential interest in consuming and sharing annotations with other libraries or apps."
  },
  {
    "id": 2225870026,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T15:51:54Z",
    "updated_at": "2024-07-12T15:51:54Z",
    "body": "cc @and-oli (maybe some overlap with DevTools extensibility)",
    "user": "rviscomi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment suggests an idea or proposal related to extension of the existing feature, which is characteristic of a feature request."
  },
  {
    "id": 2225953206,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T16:47:18Z",
    "updated_at": "2024-07-12T16:47:18Z",
    "body": "> > with one of the options being to include those entries in the buffer only if they contribute to a LoAF (or a LoAF long-script).\r\n> \r\n> It seems to me like you would have to buffer these at first, then clean up these marks and measures afterwards.\r\n\r\nRight\r\n\r\n> \r\n> Today, there is no limit to the number of marks/measures in the buffer, so overflow is not really a problem (unless so many are issued that we get into overall memory usage worries).\r\n> \r\n> I think that means that: just adding marks/measures, leaving them there, then filtering manually, might be sufficient?\r\n\r\nIt's suboptimal in terms of both efficiency and ergonomics. By doing this we're encouraging people to potentially add a massive amount of events to the buffer and these memory (and lookup efficiency) problems can potentially explode. It also adds a lot of noise to the performance timeline and to traces.\r\n\r\n> \r\n> What about just a `getEntriesBy*` variant that accepts both a `type` and also a time range (and optionally that this time range can be specified by passing another `entry`)?\r\n> \r\n> The usage would be something like:\r\n> \r\n> * Create a PerformanceObserver for LoAF\r\n> * From each LoAF entry observed, ask for the marks/measures that overlap its timing\r\n\r\nSee above\r\n\r\n> As per your original proposal, Related questions:\r\n> \r\n> * It seems not so common to me to have active PerformanceObservers for marks/measures, but if someone did have one, would we want to report these LoAF-only entries?\r\n\r\nI think not, perhaps attach them to the `loaf.scripts` entry?\r\n\r\n> * If we did, would we delay adding these entries into the timeline until after we know if a LoAF happened (i.e. a separate buffer)?\r\n\r\nYea definitely.\r\n\r\n> * If we did that, would we wait only until we know a LoAF is being measured, or wait for the LoAF is done measuring (i.e. LoAF always reported first)?\r\n\r\nPerhaps in the same callback, as in if you observe both types you'd get them concurrently? Otherwise in `PerformanceScriptEntry` which is perhaps more suitable.\r\n\r\n> Also also, there have been requests to add groups/categories/labels to User Timings multiple times for multiple purposes. I wonder if this really needs to be LoAF specific or if it could just be a generic feature like that? Then library authors could use as they see fit and might be more creative that we are here?\r\n\r\nI don't think this is related. One is arbitrary metadata and the other is a capturing condition.\r\n\r\n> \r\n> I guess the question I would have is: is it likely that a library like NewRelic would want to consume marks/measures that were created by a different app/library or just their own? Would NewRelic want to share annotations that would be useful to consume by others? (Such that a common standard us useful?)\r\n\r\nI feel that those are parallel question.\r\nNewRelic can use mark/measure names or new metadata we define to filter out what they care about, but that won't help with exploding the buffer with LoAF-attribution-tracing.\r\n\r\nAn additional thing I would propose for this type of mark/measure is that you can't mark/measure it before/after the fact, as in the timestamp has to be now or at least within the current script entry.\r\n\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides suggestions and reasons for improving the way marks/measures are handled in LoAF (Long-running Function) and filtering them from a buffer. The commenter suggests alternative approaches such as using `getEntriesBy*` variants with time ranges, attaching entries to `loaf.scripts`, and proposing a separate buffer for LoAF-specific data. They also raise questions about compatibility between libraries and their ability to consume marks/measures created by other applications or libraries."
  },
  {
    "id": 2225961981,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T16:53:12Z",
    "updated_at": "2024-07-12T16:53:28Z",
    "body": "All of that makes sense in isolation, it just feels needlessly coupled to LoAF data.\r\n\r\nWhat if I wanted to review these marks when they overlap with an Event Timing (but didn't trigger LoAF specifically because delays are from after-main-presentation)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment expresses a desire for the feature in question, which is related to marking events on LoAF. It also provides context about when this might be useful (\"when they overlap with an Event Timing\"). This suggests that the person wanting the feature is seeking it as a solution or utility rather than purely for technical reasons or administrative purposes."
  },
  {
    "id": 2225968333,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T16:57:34Z",
    "updated_at": "2024-07-12T16:57:34Z",
    "body": "> All of that makes sense in isolation, it just feels needlessly coupled to LoAF data.\r\n> \r\n> What if I wanted to review these marks when they overlap with an Event Timing (but didn't trigger LoAF specifically because delays are from after-main-presentation)\r\n\r\nI agree, I think the API should be attachable to any platform entry type where it makes sense, not coupled with LoAF specificially, or at least written in a way that's extendable to do that.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is suggesting a modification to the existing system (LoAF) and proposing an extension for more flexibility, which is characteristic of feature requests."
  },
  {
    "id": 2225988018,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T17:09:21Z",
    "updated_at": "2024-07-12T17:09:21Z",
    "body": "Can we evolve your proposal slightly to something like this, then?\r\n\r\n- performance.mark / measure merely supports `buffered:false`, or something like it, rather than explicitly listing the type of entry to pair with.\r\n  - This has also been independently requested.\r\n  - it seems some of the performance issues with User Timings is around the need to clone various data (like `details`) in order to persist on the timeline.  But several use cases don't need that feature and only conditionally observe.\r\n- PerformanceObserver supports `{ observeUserTimings: true }` or even `{ type: 'entry-type', observeNestedType: 'other-entry-type' }`, or something like it.\r\n  - This becomes like a temporary nested observer which is only observes the nested type when the main entry type is actively being observed.\r\n  - Perhaps instead of `list.getEntries()` you would need to `list.getNestedEntries()`\r\n\r\n(Wonder if this would be useful to e.g. measure all Event Timings and then only nested LoAF entries, and then only nested user timings of those...)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The commenter is requesting a minor change in the current implementation to make it more flexible and able to accommodate different use cases."
  },
  {
    "id": 2226238225,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T19:34:18Z",
    "updated_at": "2024-07-12T19:37:18Z",
    "body": "> Can we evolve your proposal slightly to something like this, then?\r\n> \r\n> * performance.mark / measure merely supports `buffered:false`, or something like it, rather than explicitly listing the type of entry to pair with.\r\n>   \r\n>   * This has also been independently requested.\r\n>   * it seems some of the performance issues with User Timings is around the need to clone various data (like `details`) in order to persist on the timeline.  But several use cases don't need that feature and only conditionally observe.\r\n> * PerformanceObserver supports `{ observeUserTimings: true }` or even `{ type: 'entry-type', observeNestedType: 'other-entry-type' }`, or something like it.\r\n>   \r\n>   * This becomes like a temporary nested observer which is only observes the nested type when the main entry type is actively being observed.\r\n>   * Perhaps instead of `list.getEntries()` you would need to `list.getNestedEntries()`\r\n> \r\n> (Wonder if this would be useful to e.g. measure all Event Timings and then only nested LoAF entries, and then only nested user timings of those...)\r\n\r\nRiffing on that, perhaps if we add `{ buffered: false }`, we can do the trick where if you have an observer that's registered to both LoAF (or event-timing) and user-timing, the user timing entries would be buffered to the LoAF, and the LoAF would be buffered to the event-timing entry if applicable, and the `entries` object in the callback would have some utility functions to correlate, and call it a day?\r\n\r\n```js\r\n// in your function\r\nperformance.mark(functionName, { buffered: false });\r\n\r\n// the observer\r\nconst observer = new Performance Observer(entries => {\r\n  const [loaf] = entries.getEntriesByType(\"long-animation-frame\");\r\n  const [script] = loaf.scripts;\r\n  const marks = entries.getOverlappingEntries(script, {type: \"mark\" });\r\n});\r\nobserver.observe({type: \"long-animation-frame\"});\r\nobserver.observe({type: \"mark\" });\r\n```",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific suggestions and examples for improving the code, pointing out technical issues or inefficiencies that could be improved upon."
  },
  {
    "id": 2226517588,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-12T23:21:07Z",
    "updated_at": "2024-07-12T23:21:07Z",
    "body": "I like that!\r\n\r\n---\r\n\r\nRegarding `{ buffered: false }` I think that might have been a bad suggestion in hindsight.\r\n\r\n1. You would still pay the performance cost of creating the entry for this use case, even if lifetime is short, and even if it's a convenient way to manage cleanup\r\n2. By not buffering at all, it motivates developers to load PO's eagerly, which we don't want to motivate\r\n3. A normal PO for just \"mark\" types I guess would see all the marks in real time.  I know I said PO's for marks aren't as common, but that might still be undesired here.\r\n\r\nI think we need to go back to the idea of this mark type being detached from the typical perf timeline, yet still allow limited buffering (Perhaps more constrained than typical user timings).",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment discusses a specific use case related to managing records or items, and provides feedback on a suggested approach that deviates from standard best practices. It also highlights potential drawbacks of the proposed solution."
  },
  {
    "id": 2228407466,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-15T12:37:51Z",
    "updated_at": "2024-07-15T12:37:51Z",
    "body": "Reciting internal conversation with @mmocny: I feel that turning this into a generic user-timing function has enough limitations to make it suboptimal:\r\n- It's hard to do efficiently without clobbering existing receivers of user-timing or creating new GCed objects\r\n- It loses information about the function we want to trace, such as its source location.\r\n\r\nSo instead, I propose to go back to the original more narrow-scoped proposal, to annotate functions for use in LoAF:\r\n```js\r\nfunction addEventListenerWithWrapper(event_type, internal_function) {\r\n   const wrapped_internal_function = performance.bind(internal_function);\r\n   addEventListener(event_type, wrapped_internal_function);\r\n}\r\n```\r\n\r\nWhere `performance.bind` will have the exact signature of `Function.prototype.bind` but would wrap the internal function in measuring monotonic timestamps (`performance.now()`), and if the result is >5ms this function would appear in LoAF as a long script.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on an existing code snippet, suggesting improvements to make it more efficient and accurate. The author specifically mentions the potential limitations of using `performance.now()` for timing purposes and recommends returning to the original proposal with annotations instead."
  },
  {
    "id": 2228457461,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-15T13:03:46Z",
    "updated_at": "2024-07-15T13:03:46Z",
    "body": "Will there be a mechanism to provide a user-defined name, or will it use `function.name`?\r\n",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is requesting a specific feature (adding the ability to define a custom username for users) that would enhance the overall functionality of the application."
  },
  {
    "id": 2228536472,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-15T13:41:22Z",
    "updated_at": "2024-07-15T13:41:22Z",
    "body": "> Will there be a mechanism to provide a user-defined name, or will it use `function.name`?\r\n\r\nI think we can do that but then we can't use additional arguments for `bind`. Perhaps that's ok",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment expresses a suggestion and implies the need for an alternative approach to handling function names in functions with bind, potentially making it less efficient or flexible."
  },
  {
    "id": 2238528101,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-19T07:15:06Z",
    "updated_at": "2024-07-19T07:15:06Z",
    "body": "Summarizing WG discussion:\r\n- There is a big ask for this, some people avoid using LoAF because of this issue.\r\n- The issue is split into two:\r\n  (1) attribution: with wrapper functions it seems like \"it's the wrapper's fault that this script is long\"\r\n  (2) diagnostics: a script entry point is not always granular enough.\r\n- In addition, people were complaining about lack of support for source-maps in LoAF and that that constraints the usefulness of source location.\r\n\r\nFor (1), we need something reliable like function wrapping, as custom marks/measures don't give source location.\r\nFor (2), something like a low-overhead mark/measure that ties to particular entries is perhaps preferable as not everything is a \"long function\".",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback and suggestions for improving LoAF, highlighting potential issues with attribution and diagnostics, and suggesting alternative solutions (e.g., custom marks/measures, low-overhead mark/measure). It offers constructive criticism to the WG discussion."
  },
  {
    "id": 2238550189,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/3",
    "created_at": "2024-07-19T07:30:17Z",
    "updated_at": "2024-07-19T07:30:39Z",
    "body": "A shape that came to mind:\r\n\r\n```js\r\n// entryTypes can be LoAF, event, measure, script\r\nconst tracing = new PerformanceTracing({threshold, entryTypes, detail})\r\n\r\n// This adds a mark/measure that gets applied to overlapping entries\r\n// from the given list\r\ntracing.mark(label);\r\ntracing.measure(label);\r\n\r\n// This creates a bound function that reports the labeled trace,\r\n// and also appears as a `PerformanceScriptTiming` entry in LoAF\r\ntracing.bind(wrapped_function, label)\r\n\r\nPerformance{User|LongAnimationFrame|Script|Event}Timing.traces\r\n    PerformanceTraceEntry (start, duration, name, detail)\r\n```\r\n\r\nThe advantage of creating a `PerformanceTracing` object or some such in advance is that we don't incur the overhead of creating options dictionaries every time we trace.\r\n",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The code snippet demonstrates an example use case for using the `PerformanceTracing` object to track performance-related events and mark/measure the tracing process. It sets up a tracing system with specific entry types, marks and measures, and binds functions to labels, all of which are useful in understanding how different parts of a JavaScript application perform over time."
  },
  {
    "id": 2245347487,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/11",
    "created_at": "2024-07-23T14:02:22Z",
    "updated_at": "2024-07-23T14:02:22Z",
    "body": "Would be great to log id / data-attribute / something else for inline scripts. We have a lot of inline script inside our page, and loaf entries for them are useless.",
    "user": "proofyman",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The commenter is suggesting an additional feature or improvement that could enhance the functionality and usability of their system. This type of comment typically receives attention from developers or designers who can consider implementing the requested change."
  },
  {
    "id": 2271663914,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/17",
    "created_at": "2024-08-06T16:16:01Z",
    "updated_at": "2024-08-06T16:16:01Z",
    "body": "I think that the `setTimeout` is expected to be 0 here, and the `event-listener` is expected to be non-0 here (assuming you called `alert()` directly from the event listener)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides specific information about a code snippet or design decision that suggests a potential issue with the functionality of the application. It does not seem to be related to user experience, feature requests, administrative tasks, conclusions, philosophical discussions, or unknown reasons."
  },
  {
    "id": 2271669547,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/17",
    "created_at": "2024-08-06T16:19:09Z",
    "updated_at": "2024-08-06T16:19:09Z",
    "body": "That's right, here's the button source:\r\n\r\n```html\r\n<button onclick=\"alert('This no longer blocks INP as of Chrome 127! \ud83c\udf89')\">\r\n  Alert\r\n</button>\r\n```",
    "user": "rviscomi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical assistance or guidance regarding a specific code or feature, which falls under the category of Technical Feedback."
  },
  {
    "id": 2271694693,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/17",
    "created_at": "2024-08-06T16:32:26Z",
    "updated_at": "2024-08-06T16:32:26Z",
    "body": "Ah, I know there are some oddities with inline scripts and LoAF.  If you changed to use `addEventListener` would it be any different?",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides an observation about the current implementation of inline scripts in a specific application (likely a Rich Text Editor or similar tool) and suggests that switching to using `addEventListener` instead might improve readability. It does not ask for new functionality, propose a change to existing behavior, request additional information, provide a conclusion, offer a philosophical perspective, or request administrative action."
  },
  {
    "id": 2271705764,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/17",
    "created_at": "2024-08-06T16:38:57Z",
    "updated_at": "2024-08-06T16:38:57Z",
    "body": "Updated:\r\n\r\n```js\r\nloafAlert.addEventListener('click', () => {\r\n  alert('This no longer blocks INP as of Chrome 127! \ud83c\udf89');\r\n});\r\n```\r\n\r\nStill repros:\r\n\r\n```json\r\n{\r\n    \"name\": \"script\",\r\n    \"entryType\": \"script\",\r\n    \"startTime\": 13446.699999988079,\r\n    \"duration\": 3763,\r\n    \"navigationId\": \"e754322a-fc20-4220-80f0-dfda1ffebbde\",\r\n    \"invoker\": \"BUTTON#loafAlert.onclick\",\r\n    \"invokerType\": \"event-listener\",\r\n    \"windowAttribution\": \"self\",\r\n    \"executionStart\": 13446.699999988079,\r\n    \"forcedStyleAndLayoutDuration\": 0,\r\n    \"pauseDuration\": 0,\r\n    \"sourceURL\": \"https://inp-demo-dialog.glitch.me/\",\r\n    \"sourceFunctionName\": \"\",\r\n    \"sourceCharPosition\": 37\r\n}\r\n```",
    "user": "rviscomi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The provided code snippet includes an update to the `loafAlert` element, which is likely a JavaScript or React-related issue. This change would improve functionality by preventing the alert from blocking input events in Chrome 127 and above."
  },
  {
    "id": 2276429407,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/18",
    "created_at": "2024-08-08T18:34:47Z",
    "updated_at": "2024-08-08T18:34:47Z",
    "body": "Might want to file a crbug instead?",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The commenter is suggesting a different process for reporting and potentially resolving issues, which implies that they are proposing an alternative approach rather than merely asking if something should be done."
  },
  {
    "id": 2276433537,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/18",
    "created_at": "2024-08-08T18:37:41Z",
    "updated_at": "2024-08-08T18:37:41Z",
    "body": "Yeah true, not a spec bug",
    "user": "rviscomi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical clarification and support for an existing code or implementation. It suggests an alternative solution or way of doing things that may improve the current situation but does not describe a problem to be fixed (spec bug) nor a new feature request. It's also too brief to be considered an administrative comment (issue resolution), as it doesn't address the actual issue at hand, and its tone is more conversational than philosophical (description of a principle or concept)."
  },
  {
    "id": 2276461758,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/18",
    "created_at": "2024-08-08T18:54:57Z",
    "updated_at": "2024-08-08T18:54:57Z",
    "body": "Reopened https://issues.chromium.org/40275918",
    "user": "rviscomi",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment is providing feedback on an existing issue (40275918) in the Chromium codebase, specifically reporting a problem and suggesting a solution. This is typically what technical feedback is about."
  },
  {
    "id": 2307330972,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/19",
    "created_at": "2024-08-23T15:33:09Z",
    "updated_at": "2024-08-23T15:36:14Z",
    "body": "Mostly I would expect this is a chromium bug, but I do have some spec questions that this raises:\r\n\r\nWould we expect this to be the time of the first event **dispatched** in the animation frame, or, the time of the first event **created** and then dispatched at any time in the frame.\r\n\r\n(Event dispatch can get re-ordered in limited ways, based on priority or vsync alignment or how synthetic gestures are layered.)\r\n\r\nIn [the chromium implementation](https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/animation_frame_timing_monitor.cc;l=727;drc=82dff63dbf9db05e9274e11d9128af7b9f51ceaa;bpv=1;bpt=1) we just take the platform timestamp of the first UI event dispatched, and don't use the earliest value of any UIEvent dispatched (and I guess those values are also wrong somehow).",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment is asking for clarification on how the timing of animation events in Chromium is determined, specifically which point in time it would be expected to dispatch an event. This question is a use case because it is seeking information that will likely affect how developers interact with and understand the behavior of animations in Chromium."
  },
  {
    "id": 2331894466,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/17",
    "created_at": "2024-09-05T14:45:37Z",
    "updated_at": "2024-09-05T14:45:37Z",
    "body": "The demo page won't consistently report long INP now that the Event Timing duration was fixed for alerts.  You can still make it long and get logged (via input delay) by interacting with the button while the page is blocked.\r\n\r\nAlternatively, just open DevTools console and log all LoAFs with a script for `event-listener`:\r\n\r\n```js\r\nnew PerformanceObserver(list => list.getEntries()\r\n  .flatMap(entry => entry.scripts)\r\n  .filter(s => s.invokerType == \"event-listener\")\r\n  .forEach(s => console.log(s)))\r\n.observe({ type: 'long-animation-frame' });\r\n```\r\n\r\n(It still reproduces, fwiw)",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The developer wants to ensure the demo page consistently reports long INP (Input) frames even after adjusting the Event Timing duration for alerts. They suggest using DevTools console logging or a script to achieve this."
  },
  {
    "id": 2447599886,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/20",
    "created_at": "2024-10-30T15:46:06Z",
    "updated_at": "2024-10-30T15:46:06Z",
    "body": "One alternative: We expose timing details for `script` that are >5ms, but what about exposing a `totalScriptDuration` which sums the durations for also scripts which are faster, and make this duration NOT include durations for work such as GC (not sure if all GC is created equal and worth ignoring, i.e. idle time GC vs GC during hot loops).\r\n\r\nThen you could compare `totalScriptDuration` for the LoAF against the `duration` of the LoAF in order to get a general sense: how much of the time for this LoAF is accountable?\r\n\r\nThere might be many reasons beyond GC that affect LoAF durations, and where optimizing scripts wouldn't help.",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "This comment suggests a feature or an idea to expose additional information about script execution times. It proposes a way to compare the total duration of a LoAF (Load Average Fraction) with its duration in terms of time spent executing scripts, which could help identify performance bottlenecks and optimize code more effectively."
  },
  {
    "id": 2470414631,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/10",
    "created_at": "2024-11-12T12:33:21Z",
    "updated_at": "2024-11-12T12:33:21Z",
    "body": "Even if it's not actionable by developers I think it's worth exposing in someway\r\n\r\nThis is a trace from a 'clean' Chrome profile with two extensions installed \u2013 web vitals one, and other that creates marks / measures for the DevTools Extensibility API to collect \r\n\r\nhttps://trace.cafe/t/cUv2LuXFKq\r\n\r\nLooking at the Custom Tracks we can see the Long Tasks API exposes there's some activity happening even though there's no matching attribution in the corresponding LoAF\r\n\r\nEven if I can't do anything about it as a developer having a clear indication that the time was an extension or even just if there was just a bucket of time that says 'some tasks that we can't tell you about ran' would be helpful because then I know I can't debug them and move onto other things.\r\n\r\n",
    "user": "andydavies",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on the trace provided, suggesting potential issues with the attribution of time spent using an extension. The author is looking for a way to provide more context or indication that the time was attributed to an extension rather than just \"some tasks\". This type of feedback is helpful for developers who can't make changes but need clear guidance on what's happening in their codebase."
  },
  {
    "id": 2470434424,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/10",
    "created_at": "2024-11-12T12:42:35Z",
    "updated_at": "2024-11-12T12:43:08Z",
    "body": "> the Long Tasks API exposes there's some activity\r\n\r\nEven though LoAF Scripts are ~Tasks as per Long Tasks, I know there were some differences between in the details because that API had some unintended cruft.  Much of that was related to splitting Tasks into distinct scripts.  But was there also some \"leakage\" of information related to time spent in extensions?\r\n\r\n> Even if I can't do anything about it as a developer having a clear indication that the time was an extension or even just if there was just a bucket of time that says 'some tasks that we can't tell you about ran' would be helpful because then I know I can't debug them and move onto other things.\r\n\r\nI think this is interesting.  If there is a gap of unaccounted time, it could be:\r\n- scheduling tasks, but for a different iframe and so reported to a different performance timeline\r\n- scheduling work, but outside of scripts (I think animations layout?)\r\n- scheduling scripts, but \"hidden\" i.e. because extensions\r\n- literally Idle time",
    "user": "mmocny",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "use_case",
    "reason": "The comment is discussing the usage and implications of the Long Tasks API, specifically how it handles \"leakage\" or unaccounted time in tasks. It's providing a practical example and analysis to support the idea that there might be some gaps in time reported by developers when they can't determine whether an extension or some other reason caused the delay."
  },
  {
    "id": 2470833340,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/10",
    "created_at": "2024-11-12T15:25:33Z",
    "updated_at": "2024-11-12T15:25:33Z",
    "body": "It sounds reasonable to me to add some opaque attribution about non-actionable things",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "feature_request",
    "reason": "The comment is suggesting adding more transparency around what actions are not taken, which implies that the commenter believes it would be beneficial or helpful for users. This aligns with the goal of feature requests, which are typically new ideas or enhancements to existing software."
  },
  {
    "id": 2478455013,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-11-15T10:01:20Z",
    "updated_at": "2024-11-15T10:01:20Z",
    "body": "Hi again! I found a way around this in the end but I do have a question on what `sourceCharacterPosition` represents.\r\nEspecially in the context of SPAs e.g. a React app it can point to a position in a minified file. When successfully unminifying it, it sometimes points to `import` statements for ex. which seems confusing.\r\n\r\nSo my question on this would be, is the sourceCharPosition pointing to beginning of a task that is executed by the browser? Meaning that in order to understand the performance issue we would need to also know the rest of the code executed in that task. ",
    "user": "Miz85",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "This comment seeks clarification on a specific technical aspect (the purpose of `sourceCharacterPosition`) related to performance optimization in SPAs, specifically React applications."
  },
  {
    "id": 2478463656,
    "issue_url": "https://api.github.com/repos/w3c/long-animation-frames/issues/16",
    "created_at": "2024-11-15T10:05:46Z",
    "updated_at": "2024-11-15T10:05:46Z",
    "body": "> Hi again! I found a way around this in the end but I do have a question on what `sourceCharacterPosition` represents. Especially in the context of SPAs e.g. a React app it can point to a position in a minified file. When successfully unminifying it, it sometimes points to `import` statements for ex. which seems confusing.\r\n> \r\n> So my question on this would be, is the sourceCharPosition pointing to beginning of a task that is executed by the browser? Meaning that in order to understand the performance issue we would need to also know the rest of the code executed in that task.\r\n\r\nIt points to the \"entry point\" function, see key point in https://developer.chrome.com/docs/web-platform/long-animation-frames#better-attribution\r\n\r\nAlso see issue #3 which we're currently working on.",
    "user": "noamr",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/long-animation-frames",
    "classification": "technical_feedback",
    "reason": "The comment provides specific technical information about a Chrome extension's functionality, addressing a potential performance issue with the `sourceCharacterPosition` value. It questions the purpose of this value and suggests that it is related to execution tasks in the browser, which is a relevant detail for debugging or optimizing web applications."
  },
  {
    "id": 706735967,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2020-10-11T17:08:19Z",
    "updated_at": "2020-10-11T17:08:19Z",
    "body": "I don't have strong feelings about this, but structured headers are mostly useful if you want to encode complex values (i.e. something beyond 1 / 0).  Unless we expect to need something more complex in the future (which I'm nervous about, re the extension conversation) I don't see the value of adoption this yet-to-be-standardized approach.  \r\n\r\nThat said, sincerely, i dont have strong feelings about this, so if others are into it, im not going to argue :)",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "philosophical",
    "reason": "The comment expresses a nuanced and somewhat ambivalent view on the proposed structured headers approach, indicating a philosophical discussion rather than a technical or practical one. It raises questions about its potential value and whether it's suitable for adoption in an evolving standard, which is characteristic of philosophical discussions."
  },
  {
    "id": 709435157,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/9",
    "created_at": "2020-10-15T16:16:57Z",
    "updated_at": "2020-10-15T16:16:57Z",
    "body": "Fully in support of this change, thanks @dmarti. Needing to serve an extensionless file from a static site without server access (Github pages for example) overcomplicates things unnecessarily.",
    "user": "dharb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is primarily providing a request or suggestion rather than offering technical advice, discussing a use case, requesting a feature, posing a philosophical question, or resolving an issue. It also includes an expression of gratitude to the author and mentions a specific context (Github pages), but these elements are secondary to the main request for clarification on serving files without server access."
  },
  {
    "id": 709440216,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/9",
    "created_at": "2020-10-15T16:25:24Z",
    "updated_at": "2020-10-15T16:25:24Z",
    "body": "I'll update our sites (reference server and landing page) and documentation to reflect the change.",
    "user": "dharb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides specific information about updating two sites and documentation, which is technical in nature. It does not suggest a need for new functionality or provide an explanation that would typically be provided by \"Use Case\", \"Feature Request\", or \"Administrative\". Additionally, there is no apparent conclusion or resolution to report, making it more suitable as a technical update rather than any other category."
  },
  {
    "id": 709528570,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2020-10-15T18:58:17Z",
    "updated_at": "2020-10-15T18:58:17Z",
    "body": "Per @hober [in the Privacy CG call](https://github.com/privacycg/meetings/blob/master/2020/telcons/10-08-minutes.md) \r\n\r\n> Surprised the Sec-GPC header doesn't use Structured Headers. Issue already filed\r\n> When a structured header represents a boolean and the header is absent, the boolean is true, which maybe is not what you're looking for\r\n\r\nThe easiest way to avoid this behavior would be to not use structured headers. Per our discussion with some of you today, I am closing this issue. Feel free to reopen.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback and suggestions on how to improve the handling of boolean values in header structures, specifically recommending against using structured headers for such cases."
  },
  {
    "id": 709548193,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2020-10-15T19:38:40Z",
    "updated_at": "2020-10-15T19:38:40Z",
    "body": "This was further discussed and it wasn't clear that @hober's assessment was correct. She seems to have been thinking of boolean fields in deeper structures, and not at the top level. It's still worth checking, this came back twice from two browser vendors \u2014 it's worth investigating.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is providing information about a non-technical matter (a discussion about a technical issue) that requires an administrative response or resolution. It does not require a technical analysis or expertise to understand, but rather a quick and straightforward answer."
  },
  {
    "id": 710602822,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2020-10-16T20:46:46Z",
    "updated_at": "2020-10-16T20:46:46Z",
    "body": "Thanks @scottlow, I like the simplification. The only concern I have is I think some implementers may have linked the injection of the signal to tracking protection being turned on, so when a user \"safelists\" (manually disables protection for) a domain, the signal isn't injected there. For instance, https://github.com/EFForg/privacybadger/pull/2693.\r\n\r\n@darobin what do you think? Do we need to explicitly call out that the DOM signal directly reflects the header signal here?",
    "user": "dharb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides a technical insight into how the implementation works and suggests an improvement. It explains why some implementers may have missed injecting the signal in certain scenarios, such as disabling protection for a domain using \"safelists\". The suggestion to explicitly mention this in documentation is also provided."
  },
  {
    "id": 716029191,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/5",
    "created_at": "2020-10-24T17:38:55Z",
    "updated_at": "2020-10-24T17:38:55Z",
    "body": "The TPWG TPE should at least be mentioned in the References: https://www.w3.org/TR/tracking-dnt/",
    "user": "michael-oneill",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback on technical aspects of the W3C specification, namely that a certain term (TPWG) is incorrectly used."
  },
  {
    "id": 716047772,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/5",
    "created_at": "2020-10-24T20:02:12Z",
    "updated_at": "2020-10-24T20:02:12Z",
    "body": "Created new issue for that",
    "user": "michael-oneill",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides information about creating a new issue, which suggests it is intended to be reviewed and potentially addressed through technical means."
  },
  {
    "id": 717614551,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/8",
    "created_at": "2020-10-28T00:09:43Z",
    "updated_at": "2020-10-28T00:09:43Z",
    "body": "@pes10k @dharb merging is blocked.  do you want to resubmit?",
    "user": "asoltani",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on an issue (merging) and suggests how it should be handled, which falls under the category of technical advice or troubleshooting."
  },
  {
    "id": 717614800,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/8",
    "created_at": "2020-10-28T00:10:28Z",
    "updated_at": "2020-10-28T00:10:28Z",
    "body": "Sure, i can rebase\r\n",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides technical information about the code or system being reviewed, specifically that it allows for rebasing. This is typically considered a form of technical feedback, as it offers suggestions or corrections related to the implementation or behavior of the code."
  },
  {
    "id": 717620861,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/8",
    "created_at": "2020-10-28T00:29:41Z",
    "updated_at": "2020-10-28T00:29:41Z",
    "body": "Merging just requires someone with write access to leave an approving review first. If this proves to be a pain point let me know and we can consider alternatives.",
    "user": "dharb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "This comment is requesting a feature, which typically involves proposing a change or enhancement for the system. The tone of the comment suggests that there may be limitations or drawbacks associated with implementing this feature, but it does not explicitly mention any technical issues or problems."
  },
  {
    "id": 717621649,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/8",
    "created_at": "2020-10-28T00:32:22Z",
    "updated_at": "2020-10-28T00:32:22Z",
    "body": "i can give @pes10k admin privs -- or just ping me when you've rebased and I will merge",
    "user": "asoltani",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment is requesting administrative privileges to manage someone else's (pes10k's) account, which implies a need for the requester to have control over the user's profile and permissions. This request suggests an improvement or addition to the current functionality of the platform rather than offering any new features itself."
  },
  {
    "id": 717670938,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/5",
    "created_at": "2020-10-28T03:23:17Z",
    "updated_at": "2020-10-28T03:23:17Z",
    "body": "Resolvedby https://github.com/globalprivacycontrol/gpc-spec/pull/16",
    "user": "asoltani",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "This comment is stating that a specific issue has been resolved, as indicated by the 'Resolvedby' tag. It does not provide any additional context about the issue itself, its type (Technical Feedback, Use Case, etc.), or what changes were made to resolve it."
  },
  {
    "id": 717671255,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/14",
    "created_at": "2020-10-28T03:24:16Z",
    "updated_at": "2020-10-28T03:24:16Z",
    "body": "Resolved in https://github.com/globalprivacycontrol/gpc-spec/pull/16",
    "user": "asoltani",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment is requesting to have an issue (Resolved) reported and tracked on the GitHub repository for the Global Privacy Control Project. This suggests that it's a user request or suggestion, rather than a technical issue, use case, administrative task, conclusion/resolution, philosophical discussion, or something else."
  },
  {
    "id": 732450507,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2020-11-23T21:59:28Z",
    "updated_at": "2020-11-23T22:01:10Z",
    "body": "Hi everyone,\r\n\r\nHere is a downside of setting `navigator.globalPrivacyControl` to `false` when the signal is disabled: https://github.com/EFForg/privacybadger/issues/2717\r\n\r\nA user with Privacy Badger (GPC on by default) and DuckDuckGo Privacy Essentials (GPC off by default) reported GPC not working. What happened is Privacy Badger's content script sets `navigator.globalPrivacyControl` to `true` (in page JS contexts), but DDG then comes in and overwrites `navigator.globalPrivacyControl` to `false`.\r\n\r\n(Content scripts get injected in ... extension installation order? May as well be random.)\r\n\r\nThis is the second time already Privacy Badger received a bug report with this behavior.\r\n\r\nI'm not completely clear on whether this is a problem with the spec or with the DDG extension. Apologies if this isn't in the right place. Just raising an issue we noticed over at Privacy Badger.",
    "user": "ghostwords",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides specific details about an observed behavior and suggests potential improvements to address it, which is a clear indication of technical feedback."
  },
  {
    "id": 732504580,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2020-11-24T00:27:06Z",
    "updated_at": "2020-11-24T00:41:45Z",
    "body": "Hey @ghostwords, thanks for reporting this behavior. I just took a look and I think I see what's happening here.\r\n\r\nPrivacy Badger is setting the `navigator.globalPrivacyControl` property with the following [code](https://github.com/EFForg/privacybadger/blob/master/src/js/contentscripts/dnt.js#L31-L35):\r\n``` JavaScript\r\nOBJECT.defineProperty(OBJECT.getPrototypeOf(NAVIGATOR), \"globalPrivacyControl\", {\r\n  get: function globalPrivacyControl() {\r\n    return \"1\";\r\n  }\r\n});\r\n```\r\nThen DuckDuckGo Privacy Essentials is setting the `navigator.globalPrivacyControl` property with the following [code](https://github.com/duckduckgo/duckduckgo-privacy-extension/blob/develop/shared/js/content-scripts/GPC.js#L21-L28), which is overriding the value set by Privacy Badger (regardless of whether its run first or second):\r\n``` JavaScript\r\ntry {\r\n  Object.defineProperty(navigator, 'globalPrivacyControl', {\r\n    value: false\r\n  })\r\n} catch(e) {}\r\n```\r\nI put the `try...catch` block there in anticipation of other extensions having already set the value directly, which would make this throw an error (attempts to redefine a value defined this way will throw errors since it is by default non-configurable).\r\n\r\nSo basically what's happening here is we're using two different ways (defining the getter and defining the property value) to set the `navigator.globalPrivacyControl` value, and one is overriding the other. I think there are two potential solutions here:\r\n\r\n1. Set both the getter and the value, and wrap in a `try...catch` block. This would throw an error when the value has already been set via either method, which would prevent overriding a signal that's already been set by another extension:\r\n``` JavaScript\r\ntry {\r\n  // will throw error if getter has already been defined\r\n  Object.defineProperty(navigator, 'globalPrivacyControl', {\r\n    get: function globalPrivacyControl() {\r\n      return true;\r\n    }\r\n  })\r\n  // will throw error if value has already been defined\r\n  Object.defineProperty(navigator, 'globalPrivacyControl', {\r\n    value: true\r\n  })\r\n} catch(e) {}\r\n```\r\n2. Privacy Badger defines value directly instead of defining the getter. The reason I'm listing this as a potential solution but not listing DDG defining getter instead of value is because it appears that defining the value directly overrides defining the getter, but not vice versa.\r\n\r\nI'd be happy to make change 1 in the DDG extension to ensure better compat with other extensions, but first out of curiosity is there any reason why Privacy Badger is defining the getter instead of the value itself?",
    "user": "dharb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This comment discusses a technical issue and proposes solutions that address it. It provides context about the behavior being reported and explains potential reasons behind certain actions taken by extensions. The comments do not explicitly state their purpose as \"Administrative\" or \"Technical Feedback,\" but they appear to be providing guidance and suggestions for improving compatibility between different browser extensions, which is a characteristic of administrative purposes."
  },
  {
    "id": 733150064,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2020-11-24T18:13:54Z",
    "updated_at": "2020-11-24T18:13:54Z",
    "body": "I see, [data descriptors vs. accessor descriptors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty). I suppose we use a getter because it's more flexible, but there is no particular need to use it at this point. We haven't run into cross-extension issues up until now.",
    "user": "ghostwords",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback and insights about a specific topic (gettingters vs accessor descriptors in JavaScript), with suggestions for potential improvement or optimization, which is typical of technical feedback."
  },
  {
    "id": 733159882,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2020-11-24T18:34:26Z",
    "updated_at": "2020-11-24T18:34:26Z",
    "body": "If a user has multiple GPC-capable extensions installed, but only one extension has GPC enabled, should the GPC signal be sent? If the answer is yes, then:\r\n\r\n- We should make sure to overwrite GPC in navigator in the most robust way when GPC is enabled, to handle cases when an extension that sets GPC to `false` was injected first. It sounds like this may not be possible depending on exactly how that extension set GPC to `false`.\r\n- Extensions that set GPC to `false` when GPC is disabled should take care to not overwrite GPC in navigator when a GPC-on extension's content script was injected first.\r\n\r\nWe wouldn't have this complexity if extensions didn't inject anything when GPC is disabled.",
    "user": "ghostwords",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "This comment is proposing a feature or behavior change that would improve the functionality of the application, specifically related to handling multiple GPC-capable extensions and their interactions. It also touches on potential complexities or edge cases arising from such scenarios."
  },
  {
    "id": 733957168,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2020-11-25T21:37:17Z",
    "updated_at": "2020-11-30T17:04:21Z",
    "body": "@dharb By the way, we have a similar problem with `navigator.doNotTrack` where DDG overwrites the user's Do Not Track preference (from `\"1\"` to `null`), whether set via Privacy Badger or the browser's own DNT toggle.",
    "user": "ghostwords",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The commenter is expressing a problem they have observed in a specific implementation of `navigator.doNotTrack`, which is causing it to overwrite the user's Do Not Track preference. This suggests that the commenter is seeking a fix or solution for this issue."
  },
  {
    "id": 736772505,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2020-12-01T19:36:51Z",
    "updated_at": "2020-12-01T19:44:51Z",
    "body": ">If a user has multiple GPC-capable extensions installed, but only one extension has GPC enabled, should the GPC signal be sent?\r\n\r\nYes, definitely. If a user has any tool installed that has GPC on, the GPC signal should be sent.\r\n\r\nI agree 100% with your logic here. Extensions should set GPC to `true` using the most robust method possible, and should set GPC to `false` in a way that can be overridden by another extension that has GPC on. With this in mind, what do you think about the following extension implementation guidelines?\r\n\r\n#### GPC off:\r\nFirst check if `navigator.globalPrivacyControl` is defined. If yes, then do nothing. Otherwise set `navigator.globalPrivacyControl` to `false` on the prototype as follows:\r\n```` JavaScript\r\nif (typeof navigator.globalPrivacyControl !== \"undefined\") return\r\nObject.defineProperty(Object.getPrototypeOf(navigator), 'globalPrivacyControl', {\r\n    value: false\r\n})\r\n````\r\n\r\n#### GPC on:\r\nFirst check if `navigator.globalPrivacyControl` is defined and set to `true`. If yes, then do nothing. Otherwise set `navigator.globalPrivacyControl` to `true` as follows:\r\n```` JavaScript\r\nif (navigator.globalPrivacyControl) return\r\nObject.defineProperty(navigator, 'globalPrivacyControl', {\r\n    value: true\r\n})\r\n````\r\n\r\nThen if a user has two conflicting extensions that support GPC, say Extension1 and Extension2, and Extension1 is installed first:\r\n#### Extension1 has GPC on, Extension2 has GPC off\r\n- Since Extension2 was installed most recently, it will first set `globalPrivacyControl` to `false` on the navigator prototype\r\n- Then Extension1 will set `navigator.globalPrivacyControl` to `true`, which will override the prototype property. So `navigator.globalPrivacyControl` will return `true`\r\n#### Extension1 has GPC off, Extension2 has GPC on\r\n- Since Extension2 was installed most recently, it will first set `navigator.globalPrivacyControl` to `true`\r\n- Extension1 will see that `navigator.globalPrivacyControl` is truthy and not do anything\r\n\r\n@ghostwords if this approach or something similar works for you, maybe we could align and do something similar with other navigator properties we're setting via our extensions.",
    "user": "dharb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "This comment asks a question about how to handle conflicting extensions that support different privacy controls. It suggests a feature request where users want the behavior of one extension to override another, which is not currently implemented in the way described."
  },
  {
    "id": 736828083,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2020-12-01T21:21:25Z",
    "updated_at": "2020-12-01T21:21:25Z",
    "body": "Sounds good! Please take a look at https://github.com/EFForg/privacybadger/pull/2722",
    "user": "ghostwords",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment is providing specific feedback on the code being reviewed, namely that it seems like the implementation of privacy badger in the EFF org's GitHub repository needs a look. The comment does not request additional features or administrative actions, nor does it pose any questions or requests for philosophical discussions, and it does not conclude or resolve anything."
  },
  {
    "id": 754760339,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/12",
    "created_at": "2021-01-05T16:55:06Z",
    "updated_at": "2021-01-05T16:55:06Z",
    "body": "@michael-oneill I'm not sure why per-origin control would require a promise? If the user makes that decision in the browser or the extension the browser would understand that at the point of page load. Are you thinking of some other user flow? ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment suggests an alternative approach to implementing per-origin control, specifically questioning whether a promise is truly necessary for this scenario. It implies that users may be able to understand the implications at the point of page load without needing a promise, which could simplify the codebase and improve performance."
  },
  {
    "id": 754787572,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/12",
    "created_at": "2021-01-05T17:40:24Z",
    "updated_at": "2021-01-05T17:43:27Z",
    "body": "The problem is how to make an internal record (i.e. a boolean) available so that script loaded synchronously on page initialisation so the browsing context gets an accurate value from the navigator.gpc property.The browser itself could maybe have an internal record, but it is hard for an extension to do it.\r\n\r\nA callback does not have that issue becase it only needs to occur once the determination is made (by examining non-origin storage out of process i.e. in a background script), and a promise is the modern way to achieve that. \r\n\r\nYou can do it employing some localStorage but it is quite hard to get it right, and it uses up some of the origin's storage that may get overwritten or cleared.\r\n\r\nI know this from developing a browse extension to implement the DNT API back in 2013.\r\n\r\n\r\n\r\n",
    "user": "michael-oneill",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides technical advice on how to solve a specific problem, which is making an internal record available for synchronization with page initialisation. The commenter also references their own experience developing a browsing context extension to implement the Do Not Track (DNT) API, indicating that they have hands-on knowledge of the issue and proposed solution."
  },
  {
    "id": 774561099,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2021-02-06T23:44:21Z",
    "updated_at": "2021-04-16T04:14:41Z",
    "body": "FYI, I tried implementing this with a not-widely used extension, \r\nMan in the Middle v 3.5.3, from @dangkyokhoang.  https://github.com/dangkyokhoang/man-in-the-middle#text-headers has documentation. \r\nI **Add**ed a rule wherein I put `Sec-GPC: 1` in `Text headers`.\r\n\r\nAfter I put `http` in `URL filters`, Firefox started appearing to be doing the right thing, per Server-side detection at https://global-privacy-control.glitch.me/\r\n\r\nI'm posting _that_ as an FYI, but it leads me to ask: are we saying that this should be in _every single HTTP request_?  _[Edit:  Sebastian cleared up my confusion: Ignore: <s>Reading between the lines of issues here, it seems like we're switching to something less verbose (hopefully more sensible) where the browser queries a well-known with this header set and done</s>]_, but perhaps it really does need to be in every request.  Servers die, get rebooted, etc, so session state can't be guaranteed, especially when many actors are motivated for minimal (or less) effort.\r\n\r\n",
    "user": "elvey",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment suggests that adding a rule of putting `Sec-GPC: 1` in `Text headers` may solve the issue of Firefox misinterpreting HTTP requests. However, this solution is not universally applicable and can have implications for other servers or contexts where session state may not be guaranteed."
  },
  {
    "id": 774561109,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2021-02-06T23:44:28Z",
    "updated_at": "2021-02-06T23:44:28Z",
    "body": "And is it intentional that we're not specifying a California-specific string?  Good idea, or mistake?  I've no idea, but choice should be intentional.",
    "user": "elvey",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment is providing feedback on the design of the comment itself, specifically suggesting that the specification language used to describe states and actions in the code (e.g. \"California-specific string\") may not accurately reflect California's specific laws and regulations. This suggests a technical issue with the implementation rather than something else entirely."
  },
  {
    "id": 774752451,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2021-02-07T20:12:23Z",
    "updated_at": "2021-02-07T20:12:23Z",
    "body": "> but it leads me to ask: are we saying that this should be in every single HTTP request? \r\n\r\nYes, that is the case. The GPC signal should be in every single HTTP request. The reasoning is exactly as you are describing, @elvey. We want to relieve the signal recipient from keeping state.\r\n\r\n> where the browser queries a well-known\r\n\r\nThe `.well-known` is intended as an answer. So, a browser or browser extension can surface to the user that a site respects GPC signals, for example.\r\n\r\n> And is it intentional that we're not specifying a California-specific string? Good idea, or mistake?\r\n\r\nIntentional. You can think of GPC as a mechanism that by itself does not have a legal meaning. It will receive its legal meaning from laws and regulations. For example, under the California Consumer Privacy Act Regulations, a GPC signal means the opt out from the sale of personal information. However, the signal can have a different legal meaning under another law. Legislators and regulators will specify the meaning for their jurisdiction.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on how Google Private Communication Protocol (GPC) signals should be implemented in every single HTTP request to avoid requiring browser state management, as suggested by @elvey. It also mentions the intention behind the specification of a California-specific string and its legal meaning under different regulations."
  },
  {
    "id": 790677956,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/19",
    "created_at": "2021-03-04T14:57:36Z",
    "updated_at": "2021-03-04T14:57:36Z",
    "body": "The legal effects of the signal is dependent on the regulatory regimes in a user's jurisdiction.  Please see: https://globalprivacycontrol.github.io/gpc-spec/#legal-effects\r\n",
    "user": "asoltani",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific information about how the signal works and its implications for regulatory compliance, suggesting that it is intended to inform or clarify the technical aspects of the specification."
  },
  {
    "id": 790679088,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/18",
    "created_at": "2021-03-04T14:59:09Z",
    "updated_at": "2021-03-04T14:59:16Z",
    "body": "This is answered in the FAQ.  Please see question \"Why not just use Do Not Track (DNT)?\"   https://globalprivacycontrol.org/faq#DND",
    "user": "asoltani",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides information about a technical issue or inconsistency, suggesting that the answer to a specific question may be in an FAQ. The tone is neutral and informative, providing context rather than expressing opinion or requesting something else."
  },
  {
    "id": 790691743,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/19",
    "created_at": "2021-03-04T15:15:59Z",
    "updated_at": "2021-03-04T15:15:59Z",
    "body": "I'm not talking about the legal effects. I'm taking about this being vague in terms of what the user expects the site to do.\r\n\r\nDoes a website saying \"we honor GPC\" mean that \"we do not share data with anyone else at all\" or \"we share data in limited circumstances that are outlined in our privacy policy and are allowed according to our lawyer's interpretation of the regulatory regime\".\r\n\r\nIf someone connects to that website with Sec-GPC set to \"1\", how are the the website's operators support to handle this w.r.t. to sharing data in limited circumstances?\r\n- Should the site show a popup suggesting the user review the privacy policy?\r\n- Should the site not use 3rd-party analytics tools?\r\n- Should the site not use 3rd party CDNs for scripts/styles/fonts/etc?\r\n- Should the site refuse to let the user perform actions like making purchases that might lead to third-parties being notified?\r\n\r\n\r\n\r\n",
    "user": "robrwo",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment is providing detailed technical specifications and potential implementation details about how a website should handle security-related aspects, specifically related to General Data Protection Consent (GDPR). It appears to be focused on improving the usability and transparency of the site regarding data sharing practices."
  },
  {
    "id": 790698142,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/19",
    "created_at": "2021-03-04T15:25:10Z",
    "updated_at": "2021-03-04T15:27:21Z",
    "body": "Again, those will depend on the legal requirements in the jurisdiction that GPC is honored/invoked.\r\n\r\nIn California, where GPC is required under the CCPA, the definition of who is a third party and the manner/frequency with which a business can show a popup is outlined in the AG's rule making which you can find here: https://www.oag.ca.gov/sites/all/files/agweb/pdfs/privacy/oal-sub-final-text-of-regs.pdf?\r\n\r\nIn other jurisdictions where GPC may be adopted, those definitions and regulations may vary.  Please refer to the privacy framework in the jurisdiction in which you're concerned about.\r\n\r\n",
    "user": "asoltani",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This comment is providing administrative information or guidance regarding how to comply with a specific regulatory requirement (General Data Protection Commission - GPC) related to the definition of a third party and popup usage, specifically as outlined in an official government document. It does not request technical assistance, propose a new feature, or seek to discuss a philosophical approach."
  },
  {
    "id": 814706738,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/2",
    "created_at": "2021-04-07T08:15:54Z",
    "updated_at": "2021-04-07T08:15:54Z",
    "body": "When you're ready:\r\n  https://github.com/protocol-registries/well-known-uris",
    "user": "mnot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment appears to be providing constructive feedback or suggestions on the well-known URIs, suggesting that they may require updates or improvements. This type of feedback is typically provided by experts in the field to help improve the documentation and usability of the resources."
  },
  {
    "id": 814707275,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/3",
    "created_at": "2021-04-07T08:16:35Z",
    "updated_at": "2021-04-07T08:16:35Z",
    "body": "What did you have in mind here? It should cache just like any other HTTP response...",
    "user": "mnot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The commenter is asking for a feature where an application (or service) can cache HTTP responses, similar to how browsers cache HTML pages. This suggests they are looking for a way to improve performance or reduce the number of requests being made to a server."
  },
  {
    "id": 814711749,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2021-04-07T08:22:30Z",
    "updated_at": "2021-04-07T08:22:30Z",
    "body": "> When a structured header represents a boolean and the header is absent,\r\n\r\nThat isn't true (with all deference to the otherwise perennially correct @hober)\r\n\r\n> are we saying that this should be in every single HTTP request?\r\n\r\nI think it would be necessary in this approach, yes. I don't think that's an efficiency concern on the modern Web -- HPACK and QPACK will effectively amortise this to one transmission per connection, and (slightly) compress it in the process.\r\n\r\nWRT how many bytes; it's literally two bytes (`?1`) vs one (`1`). If [future, binary encodings](https://mnot.github.io/I-D/binary-structured-headers/) of Structured Fields get off the ground, it will be significantly more efficient (both in terms of bytes-on-the-wire and processing overhead) to use them.\r\n\r\nI think the extensibility question is the right thing to focus on here. If the value were under advertiser control (as `P3P` was), I'd say this is an easy decision; what problems are foreseen by allowing extension in a request header?\r\n\r\n\r\n\r\n",
    "user": "mnot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is about improving or modifying a specific approach to handling structured headers, particularly for the HTML5 specification. It discusses potential changes and their implications, including the possibility of introducing new complexities that would need to be addressed administratively."
  },
  {
    "id": 814905068,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/20",
    "created_at": "2021-04-07T13:14:51Z",
    "updated_at": "2021-04-07T13:14:51Z",
    "body": "@SebastianZimmeck Thanks for assigning this to me, but I've been saying that `version` serves no purpose and should be removed since the beginning! See also https://berjon.com/xmlbp-naive-versioning/.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment expresses a request to remove or modify the \"version\" field in the XML-BP document, suggesting that it is not necessary for functionality."
  },
  {
    "id": 814919215,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/20",
    "created_at": "2021-04-07T13:35:10Z",
    "updated_at": "2021-04-07T13:43:18Z",
    "body": "> but I've been saying that version serves no purpose and should be removed since the beginning!\r\n\r\nAs long as there is backward compatibility in case GPC is extended, I am personally fine with whatever mechanism can accomplish that. Essentially, if there is a best practice (and whichever that is), we should follow that practice as it will make it easier for implementers.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on an existing code or system, suggesting improvements and proposing changes to achieve better practices. It does not ask a question, request additional information, or make a philosophical statement."
  },
  {
    "id": 814984489,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/20",
    "created_at": "2021-04-07T14:58:00Z",
    "updated_at": "2021-04-07T14:58:00Z",
    "body": "I am 100% a-okay to remove the field too.  I suggested it originally out of some \"always stick a version number on it\" advice I picked up\u2026\u00a0somewhere. But I'm convinced by @darobin that thats more cargo-cult-ish than materially useful. I'm \ud83d\udc4d on removing it too",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is primarily an administrative discussion, with the author expressing a change in their opinion and suggesting alternative practices (removing the field). There is no technical or practical feedback about the code itself."
  },
  {
    "id": 815004772,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/3",
    "created_at": "2021-04-07T15:24:06Z",
    "updated_at": "2021-04-07T15:24:06Z",
    "body": "This is here because DNT [does specify caching](https://www.w3.org/TR/tracking-dnt/#status-caching) and I wanted to be sure that I was not overlooking some reason to have specific caching rules. I think that the model we landed on for GPC means we don't need to care, but I wanted to check my assumptions.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is primarily concerned with clarifying assumptions and double-checking details rather than providing feedback or suggestions about technical aspects of a specific feature or model. It also includes some discussion of administrative tasks related to configuration or implementation."
  },
  {
    "id": 815176181,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2021-04-07T19:41:49Z",
    "updated_at": "2021-04-07T19:41:49Z",
    "body": "> > When a structured header represents a boolean and the header is absent,\r\n> \r\n> That isn't true (with all deference to the otherwise perennially correct @hober)\r\n\r\nSorry for the noise caused by my terrible reading comprehension!",
    "user": "hober",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "philosophical",
    "reason": "This comment appears to be expressing an opinion or critique rather than providing a practical issue or solution. The author uses informal language and includes personal comments, such as \"with all deference\" and \"perennially correct\", which suggests that they are making a judgment about the quality of @hober's reading comprehension rather than offering constructive feedback."
  },
  {
    "id": 840785791,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/20",
    "created_at": "2021-05-13T19:36:02Z",
    "updated_at": "2021-05-13T19:36:02Z",
    "body": "We resolved this by removing `version` and adding `lastUpdate`. It's in the latest version.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed information about how something was fixed or changed, indicating that it offers a technical solution to an issue. The specific changes made are also mentioned, suggesting that the resolution is based on code modifications rather than a completely new feature or concept."
  },
  {
    "id": 840786386,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/3",
    "created_at": "2021-05-13T19:37:11Z",
    "updated_at": "2021-05-13T19:37:11Z",
    "body": "Having reviewed this more closely, I don't think we need to say anything specific.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "This comment primarily provides feedback on the approach or recommendation being suggested. It doesn't contain any technical details, nor does it seem to be a feature request, administrative notice, conclusion, philosophical discussion, or unknown type of feedback. It simply indicates that the suggestion is not necessary."
  },
  {
    "id": 840786671,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/1",
    "created_at": "2021-05-13T19:37:43Z",
    "updated_at": "2021-05-13T19:37:43Z",
    "body": "This is in the latest version, to the level that I believe is sufficient for the purposes at hand.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides specific feedback about the quality and functionality of a software product, specifically mentioning its latest version. It suggests improvements or additional features based on the author's opinion, indicating that it falls under technical commentary aimed at improving the product."
  },
  {
    "id": 840788363,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2021-05-13T19:40:59Z",
    "updated_at": "2021-05-13T19:40:59Z",
    "body": "I've taken @scottlow's change, which is definitely an improvement. I believe that the extension-related issues have been addressed separately \u2014 let me know if that's a problem!",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment expresses a suggestion for how to improve a system or process, specifically mentioning a change made by someone else and asking about the impact on related extensions. This is characteristic of a feature request."
  },
  {
    "id": 840790294,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/12",
    "created_at": "2021-05-13T19:44:38Z",
    "updated_at": "2021-05-13T19:44:38Z",
    "body": "I understand where you're coming from, but I don't think that adding the overhead of a promise only to support extensions is a good compromise. Also, I would think that an allowlist managed by an extension should be at most of the order of tens of entries, thousands at the most (beyond that it's not a very good mechanism). This can readily by managed in memory and implemented synchronously.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment discusses a specific concern with the approach taken to adding extensions to an API. It highlights a potential drawback of this approach, which is that extending functionality beyond certain limits becomes impractical due to the overhead added for support. This indicates that the intention behind providing extensions is not being fully realized or utilized effectively."
  },
  {
    "id": 840790644,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/13",
    "created_at": "2021-05-13T19:45:22Z",
    "updated_at": "2021-05-13T19:45:22Z",
    "body": "It's in, thanks!",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This is an informal expression of acknowledgement or acceptance from someone involved in handling incoming emails or messages. The context suggests that the comment was likely written by someone who is responsible for managing communication flow within a company or organization."
  },
  {
    "id": 841216440,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/12",
    "created_at": "2021-05-14T12:37:02Z",
    "updated_at": "2021-05-14T12:37:02Z",
    "body": "Its not only to support extensions, making the decision early enough to guarentee the signal would be hard for native browsers also.\r\nThe problem with synchronously using localStorage is it is accessable to other script, so could be amended by a third-party to simulate the presense or absense of a consent signal.\r\nAdTech lobbyists would use the resulting uncertainty to justify ignoring it.\r\n",
    "user": "michael-oneill",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides an opinion on a technical issue and proposes an alternative solution. It suggests that using localStorage synchronously can be problematic, raises concerns about the impact of third-party access on the implementation's credibility, and implies that AdTech lobbyists might use this uncertainty to their advantage in justifying ignoring the issue."
  },
  {
    "id": 882967454,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/21",
    "created_at": "2021-07-20T01:08:43Z",
    "updated_at": "2021-07-20T01:08:43Z",
    "body": "Thanks, @braedon! That seems even better. @darobin, what do you think?  ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback on the improvement made to a particular feature or functionality (\"seems even better\"), indicating that it is related to evaluating and refining the quality or usability of something."
  },
  {
    "id": 884488714,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/22",
    "created_at": "2021-07-21T20:47:18Z",
    "updated_at": "2021-07-21T20:47:18Z",
    "body": "Hello!\r\n\r\na) Since GPC is about asserting an opt-in privacy right, I dont know if an option to express a \"my browser knows about GPC but i don't want to assert the rights behind it\" preference is useful.  As regards to site behavior, I expect a `Sec-GPC: 0` value would be the same thing as sending nothing.    If a site wants to know that the user turned off GPC in response to the page's request, they can already do though a session cookie (or similar) and seeing that the GPC signal is no longer sent.\r\n\r\nAdding a third state thought to GPC (not sent, sent and 1, and / or sent and 0) adds fingerpritning surface, so unless there is a practical benefit to it, im still in favor of the current description.\r\n\r\nIs there a use case you have in mind that wouldn't be possible for a site to capture otherwise?\r\n\r\nb) By design, other GPC values are not supported.  This is by design, since turning into GPC into a preferece-broadcasting system would have significant risks in the short term (e.g., increased fingerprinting surface) and longer term (e.g., turning GPC into a system where browsers are expected to advertise the privacy preferences their local jurisdiction entitles them to, which would be very bad privacy wise.  A privacy feature that requires me to advertise my location to get privacy is a deeply flawed privacy system.\r\n\r\nHope this helps explain the design of GPC!  Im going to close the issue, though feel free to continue discussion below if you still have questions",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment provides context and explanation for why the current state of the proposal is useful. It describes a specific scenario (site behavior) where the value `Sec-GPC: 0` would be appropriate, and mentions potential use cases that aren't possible without it. This suggests that the proposal is based on practical considerations and real-world scenarios rather than purely technical or philosophical discussions."
  },
  {
    "id": 884808662,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/22",
    "created_at": "2021-07-22T10:27:00Z",
    "updated_at": "2021-07-22T10:27:00Z",
    "body": "You've asked follow-up questions, but closed the issue. Does this mean a decision has been made and you don't want further feedback on this? \r\n\r\nRegardless - Yes, I have use-cases and practical reasons for why I discuss values. Right now GPC has a single interpretation based on CCPA (legally enforceable) and GDPR (legal interpretation). In the EU, there is no notion of 'sell' data or restricting only third parties from 'selling data' - though where consent is used the ability to withdraw that consent to _share_ data with third parties must exist separate from other consent matters. So 'sell' and 'share' are two distinct activities when it comes to how GPC is applied. The 'right to object' is separate and distinct from 'withdrawing consent'. \r\n\r\nRather than saying `GPC: 1` means all of these - which is problematic because it doesn't provide separation between all of these, GPC can be used to express not preferences, but 'rights'. So `GPC: 1` can mean do not share data with third parties on the basis of consent, object where legitimate interest is used for such sharing; and other values can assist in applying other rights.\r\n\r\nFor example; `GPC: 3` can mean share data for research (non-commercial entities) purposes. `GPC: 5` can mean apply objection to first parties legitimate interests as well. `GPC: 7` can mean apply objection to profiling and automated decision making. Values can be combined e.g. by using primes and combinations (e.g. 3 means 1 x 3, 15 means 1 x 3 x 5 applies and so on) or using bit values. Multiple values are feasible since GPC is transmitted not as a boolean but as an integer/character.",
    "user": "coolharsh55",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "This comment provides feedback and suggestions about the General Privacy Control (GPC) framework, proposing how to define and express different aspects of privacy preferences in a more nuanced way. It asks for clarification on how GPC is used and interpreted, specifically regarding two distinct activities involving data sharing - 'sell' and 'share'. The author suggests that these are separate values that can be expressed as part of the GPC framework, allowing for more complex expressions of privacy preferences."
  },
  {
    "id": 884817059,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/22",
    "created_at": "2021-07-22T10:43:17Z",
    "updated_at": "2021-07-22T10:43:17Z",
    "body": "As for fingerprinting, IMHO it is not a good strategy to say lets not give users more privacy management and preferences because it _may_ be used for fingerprinting. There *are* separate 'preferences' to mange: giving consent, withdrawing consent, consent for sharing data, consent for sharing data with first party only, consent for sharing data with third parties only, objecting to legitimate interest, objecting to profiling, objecting to direct marketing, objecting to automated decisions. GPC choosing only a few specific ones based on how CCPA works may not represent the best interests of users across the globe. If this is to be a web standard, then it must work for all web users. It has to address 'basic' concepts - either by making them explicit in the spec or by relying on their commonality.\r\n\r\nLike the previous comment says, EU doesn't have 'sell' as a data processing activity. Saying GPC prohibits sharing of data to any 'third party' is not enough - what is a third party also differs by jurisdiction! E.g. processors may or may not be third parties. Similarly, GPC doesn't consider what happens when data is 'shared' by joint-controllers - which is again a jurisdiction specific concept. So is the right to object. What happens when GPC implementation doesn't fulfill jurisdiction-based necessities such as these? Do we again invent a separate signal for these items? See [ADPC](https://www.dataprotectioncontrol.org/spec/). \r\n\r\nAs for inferring jurisdiction, the website is _needed_ to infer these, e.g. to see what laws to comply with. If serving to EU users, GDPR must be complied with. If serving to California users, CCPA must be complied with. GPC is not a barrier to inferring jurisdiction - this information is already present in other inferrable data: IP addresses and language/region/timezone settings.",
    "user": "coolharsh55",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on the technical aspects of the proposed General Data Protection Regulation (GDPR) framework, specifically addressing potential issues with the \"general privacy consent\" choice. It offers suggestions for improvement and clarifies points about jurisdiction, data sharing, and compliance with different regulations."
  },
  {
    "id": 884820975,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/22",
    "created_at": "2021-07-22T10:51:17Z",
    "updated_at": "2021-07-22T10:51:17Z",
    "body": "Regarding `GPC: 0` being the same as not sending a GPC signal is incorrect. `GPC: 0` *must* have an interpretation, otherwise any website, browser, user-agent that doesn't support GPC can assume user has set `GPC: 0` and claim data sharing is permitted!\r\n\r\n| I expect a Sec-GPC: 0 value would be the same thing as sending nothing. If a site wants to know that the user turned off GPC in response to the page's request, they can already do though a session cookie (or similar) and seeing that the GPC signal is no longer sent. - [pes10k](https://github.com/globalprivacycontrol/gpc-spec/issues/22#issuecomment-884488714)\r\n\r\nArguing that a cookie is needed to signal GPC is no longer set is not a good design IMHO. So you're asking the website to store cookies representing the GPC state, and then later checking that cookie each time there's no GPC signal to infer if the user has turned GPC off? Why not just have GPC specify its state? What if I actually want to enable sharing data with third parties because its an actually beneficial use-case and I believe they're good and not data vampires? E.g. I want to share that I read a news story posted on some other site to the actual news publisher. Yes, I want them to track how many views their story got, but they don't profile me. This is sharing data with third parties that would be prohibited by GPC. Just because the current malicious activity of third party data sharing is bad doesn't mean there are zero useful cases where data sharing is beneficial.\r\n",
    "user": "coolharsh55",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides technical feedback on why `GPC: 0` cannot be interpreted as sending no signal and offers suggestions for alternative solutions, such as using a session cookie to verify the GPC state. It also raises questions about design and proposes an alternative approach to handling GPC states."
  },
  {
    "id": 885129111,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2021-07-22T18:12:47Z",
    "updated_at": "2021-07-22T18:14:02Z",
    "body": "Reading these comments, it seems like there is some confusion regarding the spec and how JavaScript accessors work.\r\n\r\nTrying to define a non-configurable accessor twice will throw an error. As I understand it (and as it has been implemented in Brave), this accessor should be configurable to user JS.\r\n\r\nI expect all implementations to work as such, since the IDL in the spec says that this is implemented on `Navigator` and not directly on `navigator`:\r\n\r\n```ts\r\nif (!Navigator.prototype.hasOwnProperty('globalPrivacyControl')) {\r\n  Object.defineProperty(Navigator.prototype, 'globalPrivacyControl', {\r\n    get: () => true, // or whatever the user has configured for GPC\r\n    configurable: true, // prevents errors when other scripts attempt to redefine this property\r\n    enumerable: true\r\n  });\r\n}\r\n```",
    "user": "eligrey",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides technical feedback on a specific implementation of an accessor in JavaScript. It explains why the code is implemented as it is and how it addresses a potential error that might occur, making it informative for improving or optimizing the code."
  },
  {
    "id": 885253999,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2021-07-22T21:41:34Z",
    "updated_at": "2021-07-22T21:41:34Z",
    "body": "Thanks @eligrey, appreciate the feedback. I'm open to making this change in DDG's implementations, but would love to hear others' thoughts here as well. For background, there were two primary reasons we went with the current implementation:\r\n\r\n### Conflicts caused by competing defaults\r\nNot all implementations set GPC on by default. This can lead to two types of conflicts:\r\n1. User's browser or previously installed extension sets GPC on by default, then user unknowingly turns GPC off by installing an extension that implements GPC but doesn't turn it on by default. Ideally if a user's browser or any installed extension is setting GPC on, it shouldn't be overridden by another extension that is setting GPC off by default.\r\n2. User's browser or previously installed extension implements GPC but does not turn it on by default, then user installs extension that sets GPC on by default. This is only an issue if the extension first checks `if (!Navigator.prototype.hasOwnProperty('globalPrivacyControl'))` before setting the GPC DOM signal, since `Navigator.prototype.globalPrivacyControl` will already be defined as `false` here. Less concerned about this case, we can make it work.\r\n\r\n### Preventing scripts from tampering with GPC signal\r\nIf we allow the GPC DOM property to be configurable, it's possible for a malicious script (or website even) to change the value and prevent the signal from propagating correctly. That is to say, if a website checks `navigator.globalPrivacyControl` before each third party script is loaded, it's possible that this value may not reflect the user's preference. I like your suggestion in the other thread to use `Object.getOwnPropertyDescriptor(Navigator.prototype, 'globalPrivacyControl')?.get.call(navigator)`, but I'm not sure we can count on websites to check the value this way instead of just checking `navigator.globalPrivacyControl`. Either way, I think this is probably a pretty rare edge case and not such a big deal.",
    "user": "dharb",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed information about the current implementation and potential improvements, which falls under the category of technical feedback. It also discusses potential issues with the design that could be improved or clarified further, which is another characteristic of technical feedback."
  },
  {
    "id": 885269870,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/11",
    "created_at": "2021-07-22T22:13:22Z",
    "updated_at": "2021-07-22T22:22:17Z",
    "body": "> ### Conflicts caused by competing defaults\r\n\r\n> Ideally if a user's browser or any installed extension is setting GPC on, it shouldn't be overridden by another extension that is setting GPC off by default.\r\n\r\nIMO users should be free to install extensions with conflicting behaviors. It's on implementors to try to coexist with each other. I'd prefer if extension-based and web-based implementations backed off if GPC is natively supported by the browser. If this signal is natively supported by the browser, then the browser vendor should provide a settings API which allows extension authors to modify this value.\r\n\r\n> ### Preventing scripts from tampering with GPC signal\r\n\r\nIf a script wants to tamper with GPC, I feel like that's fine. It should be up to the site owner and/or user as to what happens with this property. For example, a site owner's 1st-party JS or user's user agent (browser or extension) may polyfill or modify this feature.\r\n\r\nIf tamper prevention is an intended design goal for this API, you should add `[Unforgeable]` to the WebIDL in the spec. This should not affect API consumers.\r\n\r\nAlso, some clarification with `Object.getOwnPropertyDescriptor(Navigator.prototype, 'globalPrivacyControl')?.get.call(navigator)`: This doesn't actually make `navigator.globalPrivacyControl` references secure by itself. This kind of code is combined with cached interfaces that may need to be used post-init due to potentially hostile code trying to backdoor the post-init environment.\r\n\r\nFor example, I could securely resolve `navigator.globalPrivacyControl` post-init if I so wished, by building on top of references that I know are secure against code loaded later due to my script being the first to run:\r\n\r\n```js\r\n// assume potential prototype pollution post-init\r\n// assume all uninitialized variables in this example are cached references\r\nconst doSomething = () => {\r\n  if (navigator && gpcGetter) {\r\n    const GPC = call(gpcGetter, navigator);\r\n    if (GPC) {\r\n      // do something with GPC\r\n    }\r\n  }\r\n};\r\naddEventListener('some-event', doSomething, { once: true });\r\n```",
    "user": "eligrey",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides suggestions and ideas for improving a specific part of the specification. It proposes alternative approaches to implementing certain requirements and suggests additional considerations for ensuring security and correctness."
  },
  {
    "id": 886076433,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/22",
    "created_at": "2021-07-24T16:29:00Z",
    "updated_at": "2021-07-24T16:29:00Z",
    "body": "These are important points. For the time being, I think a binary signal will serve us well. Keeping it simple will make GPC easy to implement and to use. Essentially, it is a question for the user: do you want privacy? Yes or no.\r\n\r\n@darobin wrote up in a [blog post](https://berjon.com/gpc-under-the-gdpr/) how GPC can be interpreted under the GDPR. For the recipient of a GPC signal in a GDPR jurisdiction it would be reasonable to interpret it to mean that the user withdraws consent and objects to the processing of their data to the extent it is based on legitimate or public interest. This way GPC can be fitted in different jurisdictions allowing regulators to attach meaning under their local laws. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed explanations and examples related to implementing a binary signal (GPC) as a user consent mechanism, specifically within the context of the General Data Protection Regulation (GDPR). It offers technical insights and suggestions for how to interpret GPC signals in different jurisdictions."
  },
  {
    "id": 886119314,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/22",
    "created_at": "2021-07-24T22:39:50Z",
    "updated_at": "2021-07-24T22:39:50Z",
    "body": "Thanks. I wrote up on some of the considerations of GPC and GDPR [here](https://harshp.com/research/blog/gpc-gdpr-can-it-work) before Robin's post, so its my opinion rather than a response. I agree with Robin's post, and the spirit of GPC. But disagree that there is a straightforward interpretation in GDPR. There isn't, and the GPC spec should, IMHO, clarify what it should mean under GDPR rather than asking the law to interpret how the signal may be used for it. Its the equivalent of the chicken and egg problem - what comes first? In this case, between the signal and the law, the signal must come first.\r\n\r\nAs to why different values: How can the same signal convey different actions depending on jurisdiction? In CCPA, it restricts 'selling' (Do Not Sell) which when compared with GDPR, is probably equivalent to restriction of sharing data with third parties for commercial(isation) purposes. GDPR does not have a notion of 'selling data', nor does it make a distinction between for-profit purposes. Yet, the [GPC mentions](https://globalprivacycontrol.github.io/gpc-spec/#legal-effects) that:\r\n\r\n> The GPC signal is intended to convey a general request that data controllers limit the sale or sharing of the user's personal data to other data controllers ([GDPR] Articles 7 & 21).\r\n\r\nSo already here there is an incompatibility between what the signal means depending on whether one happens to be in California or EU (sell vs share). Furthermore,  'third parties', as I mentioned before, are also different concepts across jurisdictions. So the spec should also clarify these because otherwise it remains incompatible with jurisdictional laws. The law can, at most, say signal should be respected in matters of consent or preferences (e.g. ePrivacy Regulation in EU). However, the signal/spec itself must be clear on what its interpretation means. For GPC, CCPA provides an enforceable basis for simply stating 'do not sell', which already exists codified in law. Unfortunately, this has no equivalent in GDPR. There is no 'do not share' signal or right. A generalised  solution would be saying:\r\n\r\n> GPC is \"a signal that indicates restriction of data sharing with third parties\" - and keeping the legal basis (e.g. consent) outside this. Thus, when the signal is active/set, and the legal basis happens to be consent, it indicates the data subject has chosen not to consent to such sharing, or is withdrawing the consent. If the legal basis is legitimate interest, they object to such sharing. This is much clearer IMHO than saying \"withdraws consent\" without being specific as to which consent, or why. \r\n\r\nIf adopted, this then creates an incompatibility between 'do not sell' and 'do not share' (as above) because sell and share do not mean the same thing. And given that GPC is already enforceable in CCPA, its intention and interpretation cannot be changed retrospectively. That's why the original proposal for multiple values as an exploration of how to resolve this.",
    "user": "coolharsh55",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on the proposed General Privacy Control (GPC) specification and GDPR, discussing issues with the current approach and suggesting potential solutions. The commenter is providing technical expertise to help improve the GPC spec based on their understanding of GDPR and its requirements."
  },
  {
    "id": 886122089,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/22",
    "created_at": "2021-07-24T23:13:04Z",
    "updated_at": "2021-07-24T23:13:04Z",
    "body": "Thanks for the input @coolharsh55 \r\nWe'll take it under advisement.",
    "user": "asoltani",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This response is related to an internal administrative matter, such as acknowledging and handling user feedback or messages. It does not require any technical expertise or provide significant information that would typically be considered a \"use case\" or \"feature request\". The tone is polite and professional, suggesting that the message has been acknowledged by someone in an organization and is now on file for future reference."
  },
  {
    "id": 886217468,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/22",
    "created_at": "2021-07-25T15:25:30Z",
    "updated_at": "2021-07-25T17:33:43Z",
    "body": "The server could indicate what the signal means to it (i.e. taking into account what legal jurisdiction etc.), either in the gpc.json resource or preferably in a response header. \r\nThis removes some of the fingerprinting risk.\r\nRegulators in particular jurisdictions could mandate the response, \r\nBrowsers could show the user the server response in suitable standardised UI.\r\n",
    "user": "michael-oneill",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific technical suggestions and advice for improving a solution (the server), which falls under the category of \"Technical Feedback\"."
  },
  {
    "id": 923632631,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/23",
    "created_at": "2021-09-21T05:14:03Z",
    "updated_at": "2021-09-21T05:14:03Z",
    "body": "Thanks for the suggestion, @othermaciej! We are discussing GPC in Privacy Community Group [here](https://github.com/privacycg/proposals/issues/10). Feel free to chime in ...",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback about a specific piece of code or suggestion, indicating that it is intended for improvement and may be used to enhance the quality or functionality of the project."
  },
  {
    "id": 929497015,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/23",
    "created_at": "2021-09-28T18:02:55Z",
    "updated_at": "2021-09-28T18:02:55Z",
    "body": "If you want to discuss further here, @othermaciej, feel free to reopen this issue. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment is asking for someone else's (@othermaciej) input or feedback on a specific issue that has been discussed in the same thread, indicating it is related to using the platform or software and requires further discussion."
  },
  {
    "id": 940363177,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/24",
    "created_at": "2021-10-11T18:56:45Z",
    "updated_at": "2021-10-11T18:56:45Z",
    "body": "Agreed \u2014 this is a small change, and we should do it.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment provides feedback on a specific action or decision, namely agreeing that the change is necessary. It does not provide any technical information, feature details, or administrative context, which are typically characteristics of other categories. Instead, it focuses on the subjective aspect of the situation, making it a use case."
  },
  {
    "id": 940365750,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/24",
    "created_at": "2021-10-11T19:01:29Z",
    "updated_at": "2021-10-11T19:01:29Z",
    "body": "I'm thinking replacing [what we have](https://globalprivacycontrol.github.io/gpc-spec/#webidl-1311723487) with:\r\n\r\n```\r\npartial interface GlobalPrivacyControl {\r\n  readonly attribute boolean globalPrivacyControl;\r\n}\r\nNavigator includes GlobalPrivacyControl;\r\nWorkerGlobalScope includes GlobalPrivacyControl;\r\n```\r\n\r\nWould that work for you @smaug----?",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed and technical suggestions about the implementation of a specific code snippet, which is typical of technical feedback. The author offers alternative syntax or improvements to achieve better functionality without asking for permission, resolution, or offering additional context."
  },
  {
    "id": 940376695,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/24",
    "created_at": "2021-10-11T19:17:47Z",
    "updated_at": "2021-10-11T19:17:47Z",
    "body": "Or do you want\r\n```\r\n\r\ninterface mixin GlobalPrivacyControl {\r\n  readonly attribute boolean globalPrivacyControl;\r\n}\r\nNavigator includes GlobalPrivacyControl;\r\nWorkerNavigator includes GlobalPrivacyControl;\r\n\r\n```\r\n\r\nhttps://webidl.spec.whatwg.org/#using-mixins-and-partials\r\nhttps://html.spec.whatwg.org/#the-workernavigator-object",
    "user": "smaug----",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides technical details about the WebIDL (Web API Description Language) specification, specifically about how to use mixins and partials. It explains a piece of code in detail, which is typically provided as feedback for improvement or clarification purposes rather than an idea for a new feature or a philosophical discussion."
  },
  {
    "id": 940381862,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/24",
    "created_at": "2021-10-11T19:23:54Z",
    "updated_at": "2021-10-11T19:23:54Z",
    "body": "`interface mixin` is what I meant \u2014 `WorkerNavigator` I hadn't thought about, but yes indeed. Will do thanks.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback on the code, suggesting that a specific term (\"interface mixin\") was not used correctly, and offering an alternative solution (\"WorkerNavigator\"). This type of comment is typically provided by developers to improve or correct existing code."
  },
  {
    "id": 974518077,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/25",
    "created_at": "2021-11-19T22:37:08Z",
    "updated_at": "2021-11-19T22:37:08Z",
    "body": "The way W3C standards work is that [adoption precedes standardisation](https://www.w3.org/2021/Process-20211102/#implementation-experience), and we're seeing strong adoption.\r\n\r\nThis is an issue tracker for technical discussion about the GPC standard, please don't use it for general questions and without using a descriptive subject. The [official site](https://globalprivacycontrol.org/) has an FAQ and contact details for the project.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed information about the W3C standards process, specifically discussing how adoption precedes standardization. It's a factual and informative piece of feedback meant to help improve technical discussions."
  },
  {
    "id": 993603781,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/21",
    "created_at": "2021-12-14T14:35:50Z",
    "updated_at": "2021-12-14T14:35:50Z",
    "body": "Please also add \"be\" to the following sentence:\r\n\r\n     MUST an ISO 8601 date\r\n\r\nAlso, need a reference for either RFC 3339 or ISO 8601.",
    "user": "seanturner",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical feedback on a proposal or suggestion, specifically regarding the format of a date string. It provides clarification and correction, which are typical characteristics of technical feedback."
  },
  {
    "id": 996180932,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/21",
    "created_at": "2021-12-16T20:45:05Z",
    "updated_at": "2021-12-16T20:45:05Z",
    "body": "Thanks, @braedon and @seanturner. I changed the spec to RFC3339 and fixed the typo. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment is expressing gratitude to two users for helping with a technical issue (changing the specification to RFC3339) and providing a correction for a typo, which is an action related to software development or maintenance that impacts its quality and functionality."
  },
  {
    "id": 1023662209,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/2",
    "created_at": "2022-01-27T21:38:26Z",
    "updated_at": "2022-01-27T21:38:26Z",
    "body": "Filed https://github.com/protocol-registries/well-known-uris/issues/21",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical information about an issue or bug reported in the GitHub repository for the well-known uris registry. It's suggesting a solution to fix the problem, which could be related to security, functionality, or performance of the system. The tone appears to be professional and objective, with no apparent emotional or personal aspect."
  },
  {
    "id": 1023669912,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/4",
    "created_at": "2022-01-27T21:50:38Z",
    "updated_at": "2022-01-27T21:50:38Z",
    "body": "Fixed in 6b6c943.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment is providing feedback on a specific version of a code or software, indicating that it has been fixed. This type of comment is typically from someone who has reviewed and validated the changes made to address an issue or bug."
  },
  {
    "id": 1025687681,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2022-01-31T12:26:20Z",
    "updated_at": "2022-01-31T12:26:20Z",
    "body": "I think we clarified this point and can move on as is, right?",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment expresses an agreement or confirmation about moving forward with a particular aspect of the conversation, which indicates that it is related to the use case or workflow discussed earlier."
  },
  {
    "id": 1035047443,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/27",
    "created_at": "2022-02-10T15:22:42Z",
    "updated_at": "2022-02-10T15:22:42Z",
    "body": "I agree, @brodrigu, readability is important. Though, my preference would be to leave the values as they are. For binary values `1` usually means `on`. Also, other standards have similar notation, especially, [DNT = 1](https://www.w3.org/TR/tracking-dnt/#dnt-header-field) is pretty similar to our use case.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides a suggestion for improving the readability of binary values by suggesting to leave them as they are, and also recommends that other standards follow this notation. The tone is constructive and informative, aiming to improve the documentation or specification."
  },
  {
    "id": 1035103987,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/27",
    "created_at": "2022-02-10T16:08:58Z",
    "updated_at": "2022-02-10T16:08:58Z",
    "body": "`DNT` stood for Do Not Track which made it intuitive that when `DNT=1` (assuming you knew what DNT stood for) the request was to not be tracked.\r\n\r\nWith `Sec-GCP = 1` if you know GCP stands for Global Privacy Control suggests there is some request for control, but control does not inherently mean \"do not sell / share\".\r\n\r\nI agree that keeping the value `1` makes sense, and if that is the priority then I suppose the ask is to adjust the header name to be more readable.",
    "user": "brodrigu",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback on how the code or system can be improved by suggesting a change (adjusting the header name) in response to specific information provided, which is characteristic of technical comments that offer advice and guidance for improvement."
  },
  {
    "id": 1035262277,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/27",
    "created_at": "2022-02-10T18:10:43Z",
    "updated_at": "2022-02-10T18:10:43Z",
    "body": "I don't think we should change the header name.  This is ultimately an implementation detail, and as long as the meaning is clear and can be looked up by a curious party easily, i dont think we need a full english description sent in every HTTP request.  Or in other words, i don't think GPC needs to run in debug mode ;)",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on the implementation of a specific feature (header name) and suggests an optimization that could potentially improve the performance or user experience, although it does not explicitly request changes."
  },
  {
    "id": 1076757427,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/28",
    "created_at": "2022-03-23T19:51:01Z",
    "updated_at": "2022-03-23T19:51:01Z",
    "body": "> Shouldn't the client-side be reading the value of the header?\r\n\r\nIndependently of whether you set GPC via a header or JavaScript property, the GPC signal would need to be sent from the client to the server. For example, for every web request that you send via Brave, you should see the GPC header attached to it. You can use [OptMeowt](https://chrome.google.com/webstore/detail/optmeowt/hdbnkdbhglahihjdbodmfefogcjbpgbo) to turn GPC on and off for individual domains. We provide [client- and server-side sample implementations for setting GPC](https://global-privacy-control.glitch.me/). ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment is asking about the implementation of a specific feature (GPC signal sending from client to server) and provides a solution (using OptMeowt extension or sample implementations provided by Glitch), which suggests that it's a request for code enhancements."
  },
  {
    "id": 1132072598,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/29",
    "created_at": "2022-05-19T18:45:03Z",
    "updated_at": "2022-05-19T18:45:03Z",
    "body": "Hi @KoopaKing \r\n\r\nI'm not entirely clear on what you are requesting. If this is a question about a response to the on-page `navigator` Javascript object that GPC is providing, that API does not respond and you should not send messages to it. Generally [the way you say your site is listening for GPC is to have the `.well-known` resource](https://globalprivacycontrol.github.io/gpc-spec/#gpc-support-representation). \r\n\r\nIf you are asking about a HTTP response on the basis of the request coming in with a GPC header, the spec does not suggest a specific response or response code. I'd suspect that your response will change on the basis of why you are rejecting the request. The 451, 403, 412 [and more error codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) might be appropriate depending on both the reason and style of the rejection. That said, some laws have specific language around not forbidding users access on the basis of a privacy choice and you should consult with a lawyer before choosing to reject a request because it has a privacy preference attached. \r\n\r\nDoes that answer your question @KoopaKing ?",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is providing information and guidance about how to handle requests based on GPC (Global Privacy Control) preferences, which suggests an administrative purpose rather than feedback or a request for improvement."
  },
  {
    "id": 1132167655,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/29",
    "created_at": "2022-05-19T20:20:26Z",
    "updated_at": "2022-05-19T20:22:25Z",
    "body": "@AramZS yes that does answer my question. I was really asking about the latter, for requests coming into an API server that happen to specify this, it seems like if the API implementor was not sure of the legal requirements associated with handling a specific request, they may opt for not processing and instead returning an appropriate error.\n\nI agree that depending on the exact reason for thinking the request cannot be processed different error codes may be correct, but I had originally thought that there may be some use in a standardized code or response type for this situation.\n\nMy use case was mostly just exploritory. Specifically I have some REST APIs that use gRPC+Go on the backend and was adding a request processor to easily access the GPC indicator on the request, and make canned decisions before handing the request off to the business logic layer. As a library it seemed like one way you would want to configure it would be to deny requests with the GPC indicator that also meet some conditions (maybe a source IP range believed to be in an unsupportable location). I thought I'd ask if the project itself had a recommendation for standardized \"I can't process this in a guaranteed GPC-compatible way\" response. If not, all good.\n\nThanks for the response!",
    "user": "KoopaKing",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment discusses the potential need for a standardized response type when dealing with requests that are supposed to be compliant with a specific legal requirement (GPC indicator) but ultimately cannot be processed due to various reasons. This is related to the use case of implementing business logic on top of REST APIs using gRPC+Go, where the library author wants to determine if the request should be denied based on certain conditions, and would like guidance on this aspect."
  },
  {
    "id": 1275451064,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2022-10-12T01:01:53Z",
    "updated_at": "2022-10-12T01:01:53Z",
    "body": "Another consideration that comes up routinely when dealing with HTTP fields is the potential for them to be repeated, which can happen by accident more often than expected.  Under those conditions, it is possible that the values are combined.\r\n\r\nIn this case, that could produce results like `Sec-GPC: 1, 1` at a receiving entity.  A simple parser that does simple comparisons (`headers.get(\"sec-gpc\") == \"1\"`) will make a mistake.\r\n\r\n> I think the extensibility question is the right thing to focus on here.\r\n\r\nI agree.  Though we do want this to be easy to process, there is no guarantee that a very simple - and franky, bespoke - design is going to be more robust.  That is true even in if extensibility is never sought or even expressly forbidden, as shown above.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The commenter raises a concern about the potential for repeated HTTP fields (e.g., `Sec-GPC`) being combined unexpectedly due to accidental repetition. They suggest that this issue could lead to incorrect results in certain scenarios, and advocate for considering extensibility as a key factor when designing this feature."
  },
  {
    "id": 1293784074,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2022-10-27T16:29:48Z",
    "updated_at": "2022-10-27T16:29:48Z",
    "body": "[This resource](https://well-known.dev/?q=resource%3A%22gpc%22) lists a number of sites that produce the signal already.  I don't have an easy summary of how many of these say `gpc: true`.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback about a website, stating that it's producing GPC and asks for an easy way to determine how many sites report \"gpc: true\"."
  },
  {
    "id": 1293854650,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2022-10-27T17:35:43Z",
    "updated_at": "2022-10-27T17:35:43Z",
    "body": "You can use the [gpc_support](https://well-known.dev/?q=resource%3A%22gpc%22+gpc_support%3Atrue#results)  filter to find sites that say `gpc: true`.\r\n\r\n[Here's the latest summary](https://twitter.com/gpcsup/status/1585632442634801153) from the Twitter bot. Note that its stats also filter out subdomains.",
    "user": "braedon",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "This comment appears to be a request for a new feature or functionality, specifically the ability to filter sites based on their `gpc: true` statement using a specific [filter](https://well-known.dev/?q=resource%3A22+filter)."
  },
  {
    "id": 1295238616,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/34",
    "created_at": "2022-10-28T17:01:12Z",
    "updated_at": "2022-10-28T17:01:12Z",
    "body": "I'm taking a stab at flexibility for this here: https://github.com/globalprivacycontrol/gpc-spec/pull/39\r\n\r\nIt's not fully answering your question but makes it clear the door is at least open to it.",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback and suggestions, indicating that it aims to improve the code or its functionality, rather than proposing a change or asking for information. It's aimed at helping others understand or enhance their work."
  },
  {
    "id": 1302486259,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/40",
    "created_at": "2022-11-03T18:04:31Z",
    "updated_at": "2022-11-03T18:04:31Z",
    "body": "Versioning inside of HTTP headers is a bit of an anti-pattern. It's better to just mint a new header field if you need to make backwards-incompatible changes.",
    "user": "mnot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "This comment provides a technical suggestion for improving the current behavior or implementation of something, rather than offering feedback on its usability, design, functionality, or any other aspect that would typically be classified under \"Administrative\" or \"Conclusion/Resolution\". It is intended to inform and improve the existing system by suggesting an improvement (minting new header fields) rather than simply describing what works well."
  },
  {
    "id": 1329269986,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/39",
    "created_at": "2022-11-28T15:10:53Z",
    "updated_at": "2022-11-28T15:10:53Z",
    "body": "@darobin for review",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment is providing feedback on the code, specifically suggesting improvements."
  },
  {
    "id": 1329270171,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/38",
    "created_at": "2022-11-28T15:10:58Z",
    "updated_at": "2022-11-28T15:10:58Z",
    "body": "@darobin for review",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment appears to be a form of technical feedback, where someone is providing constructive criticism or suggestions on how to improve something. The use of the \"@\" symbol and the specific language (\"for review\") also suggest that it's intended to provide input rather than an opinion or proposal."
  },
  {
    "id": 1329338304,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/39",
    "created_at": "2022-11-28T15:56:06Z",
    "updated_at": "2022-11-28T15:56:06Z",
    "body": "Thanks for filing a PR, but I don't believe that this change is correct. The name \"global\" comes from its legal roots, it means that it can apply everywhere but not that it has to be consistent everywhere. It is perfectly permissible for UAs to choose to make exceptions, or to have some kind of rule system to apply it selectively and differently per origin. The important part is the automation.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback on a technical aspect (the name \"global\") by suggesting alternative interpretations and justifications for its use, which can be useful in debugging or optimizing code. It does not express an opinion about the change's value or impact beyond that it is technically incorrect, but rather focuses on clarifying the purpose behind the original intent of the word \"global\"."
  },
  {
    "id": 1334333785,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/41",
    "created_at": "2022-12-01T20:01:27Z",
    "updated_at": "2022-12-01T20:01:27Z",
    "body": "@martinthomson I thought we might use your exact language from #36 here instead, but wanted to open up a area for discussion of how best to represent this.",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment is about the potential reuse or repurposing of existing code or language (from #36) and requests discussion on how best to approach it. This involves exploring alternative representations, which falls under the category of use case exploration and improvement."
  },
  {
    "id": 1343278021,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2022-12-08T19:56:01Z",
    "updated_at": "2022-12-08T19:56:01Z",
    "body": "Hi @martinthomson , this feature (the .well-known) is important for a couple of reasons:\r\n\r\n1. Unlikely most other browser features, a site supporting GPC won't have any immediate, user (or browser) noticeable effects. This is very different than almost every other browser feature\r\n2. the risk in terms of implementation complexity seems very very small\r\n3. We expect that measuring site adoption will be important for a number of reasons (from regulators, academics / activists, auditors, etc) and so something like .well-known is needed (and .well-known seems simpler than other possibilities, like a fixed HTTP response header)",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed analysis and suggestions for the implementation of a specific feature (.well-known) in browsers, highlighting its importance, potential complexity, and expected benefits. It does not contain personal opinions or complaints, nor is it focused on administrative tasks, conclusions, or philosophical discussions that might be characteristic of other types of comments."
  },
  {
    "id": 1343288576,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/42",
    "created_at": "2022-12-08T20:04:15Z",
    "updated_at": "2022-12-08T20:04:59Z",
    "body": "@AramZS small suggestion, but I think it'd be even cleaner to just say \"return a `ISO-8601` date\", and not inline the regex / format itself.\r\n\r\nSomething like, instead of\r\n\r\n> A <code>lastUpdate</code> member. The value of the <code>lastUpdate</code> member MUST be an RFC3339 <code>full-date</code> (YYYY-MM-DD) or <code>date-time</code> (YYYY-MM-DDTHH:MM:SS(?:0+)?TZ) [[RFC3339]]. This indicates the time at\u2026\r\n\r\nthen\r\n\r\n> A <code>lastUpdate</code> member. The value of the <code>lastUpdate</code> member MUST be a ISO-8601 formatted date string.  This indicates the time at\u2026",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is discussing the format of the `lastUpdate` field, which is being suggested for improvement to conform with specific standards (RFC3339). It does not require technical expertise or a solution that involves coding changes, but rather an interpretation and clarification of existing requirements."
  },
  {
    "id": 1343329934,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/34",
    "created_at": "2022-12-08T20:43:29Z",
    "updated_at": "2022-12-08T20:43:29Z",
    "body": "> Does this make it impossible to default to enabling GPC in private browsing modes, only with appropriate interface affordances, or only in some jurisdictions?\r\n\r\nThe answer to these questions depends on the laws and regulations in a particular jurisdiction. For example, [per the CCPA](https://oag.ca.gov/sites/all/files/agweb/pdfs/privacy/ccpa-fsor-appendix-e.pdf), a consumer\u2019s choice of using privacy-preserving browsers or other tools is considered a sufficiently deliberate act that is interpreted as a consumer expression of a preference to not have personal information sold or shared:\r\n\r\n> The consumer exercises their choice by affirmatively choosing the privacy control [...] including when utilizing privacy-by-design products or services.\r\n\r\nMaybe, in other cases turning on a privacy mode of a \"normal\" product or service is sufficient to also turn on GPC by default in this mode.\r\n\r\nTo leave this flexibility we may want to take out [section 5.1](https://globalprivacycontrol.github.io/gpc-spec/#user-interface-language).",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment discusses the technical implementation of Google Play Console Privacy Control (GPC) and provides context for how it might be used, but does not provide any feedback or criticism on its design. It also presents a legal perspective on the subject by referencing specific laws such as the California Consumer Privacy Act (CCPA), which suggests that the comment is providing administrative guidance rather than offering technical feedback."
  },
  {
    "id": 1343412179,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/35",
    "created_at": "2022-12-08T21:44:37Z",
    "updated_at": "2022-12-08T21:44:37Z",
    "body": "> > websites MAY interpret an expressed Global Privacy Control preference as they find most appropriate\r\n> \r\n> This one might be unavoidable, but this is effectively a meaningless statement. Consider avoiding normative language and instead concentrate on the intended semantics of carrying the signal. The real teeth in this mechanism lies in the legal enforcement part, so explain that more directly rather than use a \"In the absence of regulatory, legal, or other requirements\" preface to this statement.\r\n\r\nThis could be addressed by including a cross-reference to \u00a7 5 (Legal Effects) after the prefatory phrase.\r\n\r\n\r\n\r\n\r\n> > User agents SHOULD strive to represent what the user agent best believes to be the person's [preference](https://globalprivacycontrol.github.io/gpc-spec/#dfn-preference) for the Global Privacy Control value.\r\n> \r\n> This could easily be a \"MUST\".\r\n\r\nDifferent jurisdictions are going to have different UX requirements. One country may require an express act to turn on the signal, another may say that the choice of a privacy-specific browser or browsing mode is sufficient to imply intent. Still others may be entirely silent, or they may say that the signal should _always_ be sent by default to accord with the reasonable expectations of most users. I think SHOULD is appropriate to express the general subjective principle of reflecting user intent while affording the flexibility necessary to accommodate varying legal regimes.",
    "user": "j-br0",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment primarily addresses the implementation details and implications of the Global Privacy Control mechanism, including how it should be implemented by user agents and how different jurisdictions handle its usage. It discusses the potential differences in UX requirements across various countries and does not focus on providing technical feedback or explicitly seeking to change the underlying code or specification."
  },
  {
    "id": 1343453648,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/40",
    "created_at": "2022-12-08T22:24:00Z",
    "updated_at": "2022-12-08T22:24:00Z",
    "body": "The [GPC support resource](https://globalprivacycontrol.github.io/gpc-spec/#gpc-support-representation) has a date and time that is intended for future-proofing and also give implementers flexibility:\r\n\r\n> This indicates the time at which the statement of support was made, such that later changes to the meaning of the GPC standard should not affect the interpretation of the resource for legal purposes. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment is providing technical information and clarification about a specific aspect of the Global Privacy Control (GPC) support resource, which suggests it is intended to help improve or correct existing documentation."
  },
  {
    "id": 1343455748,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/36",
    "created_at": "2022-12-08T22:26:10Z",
    "updated_at": "2022-12-08T22:26:10Z",
    "body": "@pes10k [further revised the language](https://github.com/globalprivacycontrol/gpc-spec/pull/41#pullrequestreview-1210618600).",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on a pull request, specifically suggesting that there needs to be further work done in the new language."
  },
  {
    "id": 1343460661,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/31",
    "created_at": "2022-12-08T22:32:20Z",
    "updated_at": "2022-12-08T22:32:20Z",
    "body": "Thanks for pointing out this issue, @coolharsh55! It is resolved now. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback to the developer who reported an issue, indicating that it has been resolved and acknowledging the developer's effort."
  },
  {
    "id": 1343461767,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/28",
    "created_at": "2022-12-08T22:33:40Z",
    "updated_at": "2022-12-08T22:33:40Z",
    "body": "@martymcflyDMC, please feel free to reopen if you think this needs further discussion. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment is a request for the person who sent it (MartymcFlyDmc) to consider re-opening a topic that has been discussed earlier. The tone is polite and friendly, indicating that the commenter is seeking clarification or more information before moving forward with further discussion."
  },
  {
    "id": 1343768806,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/42",
    "created_at": "2022-12-09T02:42:34Z",
    "updated_at": "2022-12-09T02:42:34Z",
    "body": "ISO-8601 defines a variety of ways to serialise dates; it's quite complex. That's why 3339 profiles it...",
    "user": "mnot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on the technical details of a specific concept, specifically highlighting a limitation or a need for improvement (in this case, the complexity of ISO-8601) and suggesting an alternative solution."
  },
  {
    "id": 1343877333,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2022-12-09T05:40:28Z",
    "updated_at": "2022-12-09T05:40:28Z",
    "body": "Hi @pes10k, of these, only the third strikes me as an actual reason.  It's not a terrible reason, but I'm concerned that the mechanism comes with downsides that are being disregarded.\r\n\r\nWhat I really want to hear is that there is some legally-relevant reason for making a commitment, and whether this sort of resource would be consider adequate toward that end (as in non-repudiable if necessary, etc...).  A better outcome - at least from the legal effect of the system - might be to have no need for any such commitment.\r\n\r\nI'm less convinced by the need to monitor for compliance.  Many sites have privacy policies that could adopt common language about compliance with GPC.  Given the need to understand the complexities of how data is handled by sites and their partners and subsidiaries, I see no significant advantage to having a special signal for this purpose.\r\n\r\nAs for this being cheap, I think that you underestimate the costs involved.  Though it seems simple, I don't think that it really is that easy.  Because there is no immediate effect from compliance, there is no reason for the resource to be actively validated.  And no matter how small a resource is, correctly serving it requires a non-trivial work in most organizations.\r\n\r\nOverall, my view is that a smaller target is better.  That means cutting back on anything that is not very strongly motivated and this is the most complicated piece of the specification.  Well, outside of the essential part where a technical mechanism engages with any number of legal/regulatory mechanisms.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The commenter raises concerns about the practicality and cost-effectiveness of implementing such a system in general organizations, rather than focusing solely on the legal aspects. They also question the usefulness of having a dedicated signal for compliance, suggesting that other mechanisms could be sufficient to achieve this goal. This is more of an operational concern within an organization rather than a theoretical or philosophical discussion about the nature of the system itself."
  },
  {
    "id": 1344817961,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2022-12-09T21:56:41Z",
    "updated_at": "2022-12-09T21:56:41Z",
    "body": "> Unlikely most other browser features, a site supporting GPC won't have any immediate, user (or browser) noticeable effects. This is very different than almost every other browser feature\r\n\r\nIn my view this is an important point. We did GPC usability studies (to appear in PETS next year), and some of the feedback we received from people was that they were unsure whether turning on GPC actually did anything. If there is at least a declaration on a site that it respects GPC, it could be picked up in a browser or other user agent and trigger a UI event.\r\n\r\nAlso, there is evidence that some operators find it useful: [6,093 sites](https://well-known.dev/?q=resource%3A%22gpc%22#results) sites use the resource; [5,869 sites](https://well-known.dev/?q=resource%3A%22gpc%22+gpc_support%3Atrue#results) set it to `true`. Other operators may decide to not use it. That is OK. It is voluntary (personally, I would actually favor the resource to be mandatory).\r\n\r\n> What I really want to hear is that there is some legally-relevant reason for making a commitment ...\r\n\r\nImplementing the resource and setting it to `true` is a declaration that a site respects GPC. That makes life for regulators a bit easier. If a site does not respect GPC contrary to its declaration, there is a clear compliance issue.\r\n\r\n> Many sites have privacy policies that could adopt common language about compliance with GPC. \r\n\r\nThat is true. Respecting GPC could also be written in the privacy policy of a site. But since there is no common language, it would be much harder to automate and scale GPC compliance (declaration) analysis. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides technical suggestions for implementing Google Page Speed (GPC) and is focused on the implementation details of respecting GPC in a site's declaration, rather than discussing its usability or use cases. The tone is constructive and aimed at improving browser behavior based on user declarations."
  },
  {
    "id": 1348889772,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/40",
    "created_at": "2022-12-13T16:03:10Z",
    "updated_at": "2022-12-13T16:03:10Z",
    "body": "I am closing this issue as resolved. If there is more need for discussion, feel free to reopen.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment appears to be an administrative action (closing the issue), providing instructions on how to handle future requests or discussions related to the same issue, and setting a clear expectation for communication. It does not provide technical feedback, use case information, feature requests, conclusions/resolutions, philosophical insights, or any additional context that would classify it as one of those categories."
  },
  {
    "id": 1348943810,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/40",
    "created_at": "2022-12-13T16:16:35Z",
    "updated_at": "2022-12-13T16:16:35Z",
    "body": "the browser header is not the only place the gpc is communicated; the IAB Techlab has incorporated it into server to server open rtb headers. ",
    "user": "patmmccann",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides information about an issue that can be resolved by a technical fix, such as updating software or installing new components, rather than requiring additional context or explanation."
  },
  {
    "id": 1353602023,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/34",
    "created_at": "2022-12-15T19:27:10Z",
    "updated_at": "2022-12-15T19:27:10Z",
    "body": "(None of this is legal advice, just my personal understanding. Ask Mozilla counsel before acting on any of this, etc.)\r\n\r\nI think it depends on what you mean by obligations on the browser. I don't believe that the browser incurs any legal obligation from GPC in any jurisdiction that I'm aware of. A browser that wishes to make GPC legally effective _may_ in some jurisdictions need to do more than just send the header. However, in every existing jurisdiction that I am aware of, I believe that turning on Private Browsing would be more than enough to meet even a pessimistic interpretation of the law.\r\n\r\nI agree with you that there is a risk that privacy labour could be transferred to people, however I believe that it can be minimised. Again, check with counsel but I believe that at worst showing a \"Do you want to sell your data?\" prompt at first launch ought to be sufficient. ",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment discusses the browser's obligations in relation to Google Play Console (GPC) and privacy policies, exploring whether the browser can legally fulfill these requirements by simply turning on Private Browsing. It also touches upon the idea of privacy labor being transferred to users and how it might be minimized through user interface design changes."
  },
  {
    "id": 1353617665,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/35",
    "created_at": "2022-12-15T19:41:43Z",
    "updated_at": "2022-12-15T19:41:43Z",
    "body": "Just for context: the `MAY` there comes from the fact that this spec shouldn't be defining legal requirements. It's not just in the absence of legal requirements: we are explicitly stating that you may do whatever you want, including breaking the law. It's a pretty safe bet that that comes with consequences, but those consequences will hold not because of anything the spec says.\r\n\r\nI personally don't have a preference either way on this one; I'm just flagging that this is there because people keep saying \"but you can't set law.\" We don't need to.\r\n\r\nThe `SHOULD` is because browser folks tend to be quite fussy about UI requirements. Also, `MUST strive to \u2026 best believes` is really a SHOULD in disguise. (Candidate addition to RFC6919 I guess.) I agree with @j-br0 that `SHOULD` reflects the fuzziness and leeway that really is there. Again, I'm not married to this specific formulation, but I would be _very_ reluctant to add a `MUST` that I don't know how to write a test for.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed and constructive feedback on the proposed specification, discussing its implications, potential issues, and suggested alternatives. It offers practical advice on when to use \"SHOULD\" instead of \"MUST\", which is characteristic of technical feedback."
  },
  {
    "id": 1353641131,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2022-12-15T20:02:55Z",
    "updated_at": "2022-12-15T20:02:55Z",
    "body": "We've had this debate multiple times. The one and only value that I see is that regulators can use it as a deceptive declaration if someone has it set to `true` but does not abide. None of the other reasons stick (eg. browsers are never going to surface that in the UI.)\r\n\r\nAs I've said before, I don't think that it accomplishes anything that a standard statement in the PP wouldn't perform almost equally well, it adds complexity and the odds that things will go out of sync (no legal team can manage a `.well-know` which means that they'll need a process to update it when they change anything GPC-related, which they won't), and it keeps purely client-side implementations from existing (and those are the norm in CMP-land).\r\n\r\nI certainly could live without it; it could also be put in a separate spec to live on its own merits.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides specific criticisms of using this particular feature, pointing out limitations and potential drawbacks (complexity, legal considerations, client-side implementation), which suggests that the author is offering constructive criticism rather than advocating for a new idea or proposing an alternative."
  },
  {
    "id": 1353661646,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2022-12-15T20:20:46Z",
    "updated_at": "2022-12-15T20:20:46Z",
    "body": "Concerning repetition, the registration for the header has it as non-repeatable. (I assume that this will make no difference in most implementations, but just flagging for the few cases in which it'll help.)\r\n\r\nConcerning extensibility, when I started working on this I went and grabbed every server-side DNT processor I could find. (It wasn't that many, so I'm not claiming any kind of statistical relevance here, just directional indication.) For reference, DNT can be `0` or `1`, followed by extension data. I mostly found implementations testing for strict equality with `1`. Yes, that fails with repeated headers (a corner case I would think) but it fails with extensions \u2014 meaning that extensions wouldn't work and possibly couldn't be deployed. We could reach out to GPC server-side implementers, but that's a lot of people.\r\n\r\nConcerning `?1`, I have some pretty strong misgivings about changing the syntax of an active compliance method in a way that would render sites non-compliant overnight.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The commenter is suggesting significant changes to the DNT (Don't Track) specification, specifically proposing the use of `?1` as a special case for extensions, which could potentially make it impossible for compliant servers to detect. This raises concerns about the stability and security implications of such a change."
  },
  {
    "id": 1354033552,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2022-12-16T01:06:30Z",
    "updated_at": "2022-12-16T01:06:30Z",
    "body": "This issue was raised in 2020; AIUI there's been enough pre-standards deployment to make what would have been a reasonable change then unwise now.\r\n\r\nWhat I'd suggest is that if SF is going to be used, a new field name be defined. You might only consider that if other breaking changes are made -- syntactically or semantically.",
    "user": "mnot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "philosophical",
    "reason": "The comment provides an analysis of the current situation and proposes a change in approach (defining a new field name). However, it does not offer any concrete suggestions for how to implement this change or what benefits it would bring. Instead, it discusses potential implications and limitations."
  },
  {
    "id": 1356459770,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/34",
    "created_at": "2022-12-17T20:32:26Z",
    "updated_at": "2022-12-17T20:32:26Z",
    "body": "> showing a \"Do you want to sell your data?\" prompt\r\n\r\nA bit of an aside, we tested a UI mockup in an [upcoming PETS paper](https://sebastianzimmeck.de/zimmeckEtAlGPC2023.pdf) to get a sense of whether people understand GPC (81%) and how many would turn it on (94%). Here is the UI we tested (and [some more intricate UI tests](https://github.com/privacy-tech-lab/gpc-privacy-choice#2-privacy-choice-schemes) are in progress ...):\r\n\r\n<img src=\"https://user-images.githubusercontent.com/11034003/208264708-eacc9f54-8b9a-43b3-a422-faed49961890.jpg\" data-canonical-src=\"https://user-images.githubusercontent.com/11034003/208264708-eacc9f54-8b9a-43b3-a422-faed49961890.jpg\" width=\"200\" height=\"400\" />\r\n",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on the presentation of a UI mockup, specifically a prompt asking whether users want to sell their data. This is a technical issue that requires technical expertise and would be classified as a \"Technical Feedback\" response."
  },
  {
    "id": 1360363994,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/42",
    "created_at": "2022-12-20T21:43:56Z",
    "updated_at": "2022-12-20T21:43:56Z",
    "body": "@mnot I think that means it does make sense to have specific date string formats inline then?",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment appears to be requesting a feature where the format of date strings is explicitly defined within the application, making it more user-friendly and consistent."
  },
  {
    "id": 1360562275,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/42",
    "created_at": "2022-12-21T00:30:16Z",
    "updated_at": "2022-12-21T00:30:16Z",
    "body": "Yes, but it should be defined in 3339 terms.",
    "user": "mnot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment is providing an opinion or suggestion on how something could be improved, specifically that the suggested definition of the term should be more detailed. The tone is informal and conversational, suggesting a discussion rather than a formal request for clarification."
  },
  {
    "id": 1372473925,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2023-01-05T16:55:15Z",
    "updated_at": "2023-01-05T16:55:15Z",
    "body": "> This issue was raised in 2020; AIUI there's been enough pre-standards deployment to make what would have been a reasonable change then unwise now.\r\n\r\nIndeed, but there was a total a lack of implementer interest at the time. Also, the fact that @hober would get it wrong made me think that it couldn't be mature tech :)\r\n\r\nCould this be a candidate for retrofitting?",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment expresses dissatisfaction with the current state of pre-standard deployment and suggests that the change could potentially be retrofitted to improve maturity, but does not specifically mention implementation details or potential technical requirements."
  },
  {
    "id": 1372932319,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2023-01-05T23:38:20Z",
    "updated_at": "2023-01-05T23:38:20Z",
    "body": "> Could this be a candidate for retrofitting?\r\n\r\nIt's not syntactically a SF, so it'd need to be mapped. That's basically just creating a new header with the same semantics but different syntax.",
    "user": "mnot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment suggests that the code is not syntactically compatible with Sphinx (SF), which implies that it may require modification or reconfiguration to work seamlessly with SF, indicating a potential feature request."
  },
  {
    "id": 1382919519,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/45",
    "created_at": "2023-01-14T21:12:12Z",
    "updated_at": "2023-01-14T21:12:12Z",
    "body": "Thank you, @martinthomson! This PR resolves issue #44. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on an existing code change or release. It specifically mentions the number of the issue being resolved and the author's username (@martinthomson), indicating that it is a technical update or improvement rather than a discussion, request, administrative action, conclusion/resolution, philosophical point, or unknown category."
  },
  {
    "id": 1397480046,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/42",
    "created_at": "2023-01-19T19:14:01Z",
    "updated_at": "2023-01-19T19:14:01Z",
    "body": "@mnot We can remove the generic examples or make them actual examples but the text does specify \r\n\r\n```html\r\n<code>full-date</code> (YYYY-MM-DD) or <code>date-time</code> (YYYY-MM-DDTHH:mm:ss.sssZ)\r\n```\r\n\r\n`full-date` and `date-time` are the RFC 3339 correctly referenced right?",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment is providing a technical point of clarification regarding two specific RFC references, specifically whether \"full-date\" (YYYY-MM-DD) or \"date-time\" (YYYY-MM-DDTHH:mm:ss.sssZ) are indeed the correct formats as referenced in RFC 3339."
  },
  {
    "id": 1399643983,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/42",
    "created_at": "2023-01-22T23:46:57Z",
    "updated_at": "2023-01-22T23:46:57Z",
    "body": "That works. I see the current spec says:\r\n\r\n> The value of the lastUpdate member MUST be an RFC3339 full-date (YYYY-MM-DD) or date-time (YYYY-MM-DDTHH:MM:SS(?:0+)?TZ) [[RFC3339](https://privacycg.github.io/gpc-spec/#bib-rfc3339)]\r\n\r\nJust a note - many formats constrain the `TZ` to `Z` for simplicity, since there are so many ways to notate timezone.\r\n\r\n",
    "user": "mnot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment requests an update to the specification regarding the formatting and notation of timezones in RFC3339, indicating a need for additional clarity or consistency in this area."
  },
  {
    "id": 1409092746,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/47",
    "created_at": "2023-01-30T18:13:50Z",
    "updated_at": "2023-01-30T18:13:50Z",
    "body": "Thank you, @tidoust! ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on something specific to someone (in this case, Tidoust), indicating that the intent is practical and operational."
  },
  {
    "id": 1409175257,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/47",
    "created_at": "2023-01-30T19:05:51Z",
    "updated_at": "2023-01-30T19:05:51Z",
    "body": "Did you mean to hit the merge button instead of the close one? Or should I read your comment as \"Thank you but no\"? ;)",
    "user": "tidoust",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "This comment provides feedback on user interaction (the \"merge\" and \"close\" buttons), which is a key aspect of a use case. It also indicates the intent behind the original message, indicating that it was intended to be closed rather than merged."
  },
  {
    "id": 1409210928,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/47",
    "created_at": "2023-01-30T19:24:32Z",
    "updated_at": "2023-01-30T19:24:32Z",
    "body": "Yes, sorry, @tidoust! I wanted to merge, of course! :) ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment is expressing a technical issue or concern (the intention to merge something) and providing an acknowledgement. It does not relate to the use case, feature request, administrative aspects, conclusion/resolution, philosophical discussions, or the status of something unknown."
  },
  {
    "id": 1424268314,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2023-02-09T14:22:50Z",
    "updated_at": "2023-02-09T14:22:50Z",
    "body": "@braedon, FYI, we plan to discuss this issue in the February 23 PrivacyCG call. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is related to scheduling a meeting or discussing an ongoing topic in advance, rather than providing feedback on code quality, requesting new functionality, or exploring philosophical ideas. It also appears to be a reminder from someone who may not have direct involvement in the project, such as a team lead or manager."
  },
  {
    "id": 1424302797,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2023-02-09T14:44:45Z",
    "updated_at": "2023-02-09T14:44:45Z",
    "body": "@SebastianZimmeck Thanks, is that going to be in the Noon or 7pm EST timeslot?",
    "user": "braedon",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This message appears to be a query from an individual seeking information about the scheduling of a time slot (Noon and 7pm EST) for which they are requesting confirmation, likely in relation to a meeting or appointment."
  },
  {
    "id": 1424314126,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2023-02-09T14:52:28Z",
    "updated_at": "2023-02-09T14:52:28Z",
    "body": "@braedon, this would be at noon EST. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical information or data about the time zone (noon EST), which suggests it's a piece of feedback related to how to interpret or understand that information."
  },
  {
    "id": 1426684841,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2023-02-11T10:10:36Z",
    "updated_at": "2023-02-11T10:10:36Z",
    "body": "I'm unlikely to make the call unfortunately - that's 1am for me. A few notes:\r\n\r\nFor tracking adoption, the well-known resource is MASSIVELY superior to a statement in the PP, even standardized. I originally threw together gpcsup.com in a few hours - it'd simply not have been feasible to build if I had to find and parse privacy policies. This use case isn't critical, but I think it has value.\r\n\r\nSimilarly, surfacing support status to users in the browser would be reliant on the resource to be practical. I disagree with Robin here - IMO once there's decent adoption browsers should surface it so users can make informed browsing decisions (and if they don't, it should be feasible for extensions to).\r\n\r\nI'm also not sure why sites would need to update it whenever they change \"anything GPC-related\" - or rather I'm not sure what changes would require an update to the resource and be frequent enough to cause an issue? I'd hope sites aren't changing whether they support GPC more than once or twice on average, and as I understand it, the `lastUpdate` field should at max only need to be updated if/when the spec is updated?\r\n\r\nOverall, I don't have particularly strong feelings, but would lean to keep it since it's already there, and IMO it's useful even if it's not essential.",
    "user": "braedon",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed feedback about a technical aspect of GPC adoption tracking, specifically the usefulness and practicality of a certain resource. It addresses potential issues or concerns with the information provided, such as its relevance, frequency of updates, and consistency with the official specification."
  },
  {
    "id": 1426685178,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2023-02-11T10:12:27Z",
    "updated_at": "2023-02-11T10:12:27Z",
    "body": "(If anyone has any questions on adoption I'm seeing, or anything like that, let me know.)",
    "user": "braedon",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment appears to be asking for clarification or information regarding the adoption process and seems to be directed towards users who may have questions about how to use the system."
  },
  {
    "id": 1441213257,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-02-23T04:46:02Z",
    "updated_at": "2023-02-23T04:46:02Z",
    "body": "As the spec stands, the well-known resource *is* intended to describe what the site does for all users (where a relevant privacy law has jurisdiction).\r\n\r\nI can't speak to what the authors intended, but that's how it reads to me, to everyone I've talked to about it, and how it's treated in every implementation I've come across.\r\n\r\nWithout getting into what the semantics of the resource *should* be, I don't think we should fundamentally change the meaning of an existing resource/field at this stage.",
    "user": "braedon",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides a detailed explanation and critique of the specification, suggesting changes that could improve clarity or consistency. It does not appear to request new information or propose additional features, but rather critiques aspects of how the resource is currently being described."
  },
  {
    "id": 1442292664,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/42",
    "created_at": "2023-02-23T19:06:54Z",
    "updated_at": "2023-02-23T19:06:54Z",
    "body": "Looks like we've got it right in this change then! ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment appears to be related to a specific issue or resolution within a software system, rather than providing feedback on technical issues (which would typically be classified as Technical Feedback) or requesting new features. It also does not appear to be an administrative comment or a philosophical discussion, nor is it an unknown type of content."
  },
  {
    "id": 1442527181,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2023-02-23T22:42:45Z",
    "updated_at": "2023-02-23T23:11:50Z",
    "body": "So we did discuss this issue at length on the PrivacyCG call today (notes [here](https://docs.google.com/document/d/1DZEhS1UHJ1PKxt5ZwKmn5LZ4bo10UFyNXeLp2dUuzRM/edit#heading=h.dm21kstbhcht)). In general, the discussion tracked the commentary in the thread. The biggest point of agreement was that maintenance of a `well-known` should not be mandatory largely because of the impact on small publishers (it is currently [optional](https://privacycg.github.io/gpc-spec/#gpc-support-resource) in the spec). Otherwise, while there was mild disagreement over the value of the signal, no one seemed to think that the optional resource should be a barrier to going forward with this process. For this reason, the editors indicated on the call that we are likely to close the issue next week --- however, if folks who were not on the call feel more strongly and/or believe that inclusion of an optional `well-known` in the spec would be a barrier to moving forward, please speak up and we can continue to discuss.\r\n\r\nRelatedly, we also discussed whether the optional `well-known` resource should be revised to provide more detailed information about site compliance. Right now the [spec](https://privacycg.github.io/gpc-spec/#gpc-support-representation) only includes a `gpc` field which returns as `true` or `false`, and a `lastUpdated` field to indicate the time the statement of support was made. Seperately, @pes10k has filed PR #48 to propose to clarify that the resource should indicate whether a site respects GPC with respect to _the specific user_ accessing the resource. We also briefly discussed whether a static resource could provide more specificity as to in which jurisdictions GPC is honored, and whether the `lastUpdated` field still provides any value. Assuming we move forward with inclusion of the optional resource, we intend to continue to discuss those options.",
    "user": "j-br0",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment describes specific technical details about the implementation of a proposed specification or process, including discussions about its compliance and potential changes, which are typically classified as technical feedback. The tone is neutral and informative, with no apparent persuasive intent."
  },
  {
    "id": 1444028418,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-02-24T17:00:55Z",
    "updated_at": "2023-02-24T17:00:55Z",
    "body": "I think the current text is somewhat ambiguous. It says: \"The purpose of a GPC Support Resource is for a site to convey its support for the Global Privacy Control.\" I think this could be read to mean either its support for GPC for this particular user or more broadly.\r\n\r\nRight now, the `well-known` field only allows the site to respond with `gpc` as `true` or `false`. If it is a static resource that returns the same result for all users, it's not entirely clear what `true` means. Does it mean that it honors GPC for all users around the world, that it honors GPC in jurisdictions where it's explicitly required, or something else? And separately, there's a question of _how_ it honors GPC: does it stop third-party sharing entirely, just turn off certain advertising pixels, or does it . . . change the default font size.\r\n\r\nPete's PR would address the first question --- the `well-known` provided to a user would tell whether that user's GPC signals are being honored (though it still wouldn't provide information how). Others should speak to the technical challenges with such a dynamic approach, but it would certainly provide more granular and robust data about GPC compliance.\r\n\r\nAlternatively, we could devise a static resource to provide more detail about the jurisdictions in which it supports GPC instead of the binary result returned today. Presumably companies are honoring GPC is jurisdictions where they are clearly legally required to do so, but the `well-known` could signal when companies are honoring in additional jurisdictions (including jurisdictions where it is unclear what legal effect GPC has).\r\n\r\nLeast ambitiously, we could just revise the spec to clarify (1) that the resource is static and (2) what `true` means.\r\n\r\nI think we should at least do that last bit for clarity's sake. In general, I am leery about introducing major substantive changes to the spec given that it is widely implemented and has legal consequences in some jurisdictions, but I think we can be more flexible with regard to the optional `well-known` (and the `lastUpdated` field would signal whether the company was providing data pursuant to the `well-known`'s original parameters or in a newer format).",
    "user": "j-br0",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "philosophical",
    "reason": "The comment is a philosophical discussion about the design of an API, specifically the ambiguity and vagueness of the \"GPC Support Resource\" field. It raises questions about what it means to honor GPC (Global Privacy Control) for all users or just in certain jurisdictions, and whether this should be communicated more explicitly in the spec. The comment is not providing technical feedback or a feature request, but rather exploring the implications and nuances of the API's design."
  },
  {
    "id": 1444330993,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-02-24T19:35:39Z",
    "updated_at": "2023-02-24T19:35:39Z",
    "body": "If servers applied different rules to different users then it would have to examine request headers (e.g. cookies) or the user's source IP,  either of which possibly being personal data. This would not look good in a privacy motivated spec.\r\nHowever a machine readable declaration of a servers intent to honour a users right to privacy is a good concept, and if jurisdiction specific information would help then this could be conveyed via additional properties in the .well-known resource.",
    "user": "michael-oneill",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on a technical aspect of a specification or implementation (servers applying different rules based on user identity), suggesting an improvement to handle privacy concerns. The tone is informative and problem-focused, indicating that this comment is intended for the authors or implementers of the specification to consider in their development process."
  },
  {
    "id": 1444599689,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-02-24T22:29:17Z",
    "updated_at": "2023-02-24T22:29:17Z",
    "body": "> As the spec stands, the well-known resource is intended to describe what the site does for all users (where a relevant privacy law has jurisdiction).\r\n\r\nAgreed with @braedon. That is also how I read it. It is the flip side of the spec. The spec intentionally does not define what legal meaning GPC has. Rather, its meaning is determined by the law the site operator is subject to. Similarly, with the .well-known resource the site operator declares \"I am respecting GPC to the extent I am required to under the laws applicable to me.\" (The operator can also go beyond the law and apply GPC where it is not required.)\r\n\r\n> I think we should at least do that last bit for clarity's sake. \r\n\r\nAlso agreed with @j-br0. If it is not clear, we should clarify the meaning.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on a technical issue related to the interpretation of a specification, specifically regarding the intended meaning and application of certain terms and concepts."
  },
  {
    "id": 1451102630,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-03-02T00:43:43Z",
    "updated_at": "2023-03-02T00:43:43Z",
    "body": "If it'd help to define the concept \"current session\" as its used in the proposal, im happy to do so. But if whats being asked for is to define a technical, machine enforceable concept for what counts as the \"current session\", i do not think thats necessary or w/in the scope of this spec. Whats meant by \"session\" for \"session cookies\" is similarly ambiguous and left up to the [browser implementors](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.2) and sites (e.g., \"your session has ended, please log in again\") to work out.\r\n\r\nI'm not saying it wouldn't be useful to the platform to have such a definition, im only saying i. this proposal isn't the only place that references the concept of a session without providing a complete definition of it, and ii. i dont think this spec needs to be clearer than other parts of the platform for it to still be useful.\r\n\r\nI think we need something like this though, and to make it clear that .well-known doesn't describe a site wide policy.  Even if we extended the .well-known to include additional information, like \"these are the jurisdictions or regions or laws I respect GPC under\", it still wouldn't be sufficient to answer the main (to my mind) question of \"if I interact with the site now, will the site respect my GPC-relevant rights.\"\r\n\r\nFor example, if we go the other direction, and have the .well-known describe the site's policy. We could go even further and \r\nextend the .well-known to  say \"I respect CCPA\" or something like that. But that doesn't tell the user (who may be connected through Tor, or a VPN, or living in California but on vacation in Chicago, or vise versa) if the site thinks the user is entitled to, and so the site will follow, CCPA when the user interacts with the site.\r\n\r\nLast note, like i mentioned on the calls, this isn't a core thing to me; I think the proposal would be more useful if there was a way for the site to signal back to the user what GPC-relevant rights the site is respecting in regards to the user, and so i think that requires a change at least similar to this PR. But, i think GPC would still be useful w/o that, and so having a .well-known isn't a hill I want to die on.\r\n\r\nBut, i don't think \".well-know describes the site, not the site+user interaction\" is useful for anything other than a public statement of \"GPC is good\", and I think we could do that w/o the .well-known.\r\n\r\nTL;DR; my pref is: \"`.well-known` describes the session\" > nothing > \"`.well-known` describes the site\r\n",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides technical feedback on the proposal, specifically addressing potential ambiguities and unclear definitions. It also expresses the author's perspective on what constitutes a well-known definition of \"current session\". The tone is constructive and detailed, but does not explicitly request changes or clarification beyond its current status as an unknown item in this spec."
  },
  {
    "id": 1477963541,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/49",
    "created_at": "2023-03-21T14:41:36Z",
    "updated_at": "2023-03-21T14:41:36Z",
    "body": "@SebastianZimmeck (or other person with permission) can you add the agenda+ tag so this is discussed thursday?",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment appears to be related to an administrative task, specifically asking someone to add a specific label (\"agenda+\") to a discussion thread. This is a common request in online forums and platforms, and the tone of the comment suggests that it's not particularly technical or philosophical in nature."
  },
  {
    "id": 1478906243,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/49",
    "created_at": "2023-03-22T04:33:53Z",
    "updated_at": "2023-03-22T04:33:53Z",
    "body": "It is a good point, @arichiv! It looks like we won't be able to get to it this week. But we will surely do it in one of the next meetings ... (at which point I will put the agenda+ label on). ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is a reminder about an upcoming meeting and a possible task or action that will be taken at that time, indicating that it's not related to technical feedback, use cases, features, conclusions/ resolutions, philosophical discussions, or unknown purposes."
  },
  {
    "id": 1483151172,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/49",
    "created_at": "2023-03-24T17:16:24Z",
    "updated_at": "2023-03-24T17:16:24Z",
    "body": "Preference changes in the middle of loading a page don't seem common or need well-defined behavior (although I'm curious if any other specs do define that), but changing preferences after a page is loaded will certainly happen (because people keep pages open for long periods of time, and preferences do get changed, not just at startup time).\r\n\r\nPerhaps there could be simpler text to say: if the user changes their preference after a page is loaded, UAs could  reload the page or reflect the preference (in sub-http requests and the javascript property) only on subsequent page loads.",
    "user": "npdoty",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment suggests that changing preferences after loading a page might be more convenient for users, and proposes a possible solution of reloading the page or reflecting the preference in subsequent page loads. This indicates a user-centric suggestion rather than purely technical feedback, administrative advice, philosophical ramblings, or unknown comments."
  },
  {
    "id": 1485062917,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/49",
    "created_at": "2023-03-27T12:51:13Z",
    "updated_at": "2023-03-27T12:51:13Z",
    "body": "It's true this isn't reflected in other specs, including the DNT spec itself: \"Ideally, the value of Navigator.doNotTrack ought to reflect the current set of user-granted exceptions in effect when the attribute is read.\" https://www.w3.org/TR/tracking-dnt/#expressing\r\n\r\nI think it's worth requiring locked consistency within a given navigation for all subresources and subframes as that seems the most correct/consistent approach and this spec is still being incubated, but I'd also be fine with unifying HTTP/JavaScript approaches the other direction and always using the 'live' value of the preference if that's what you're saying.",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific suggestions for improving or clarifying a technical specification (the DNT spec), which is intended to inform or improve the quality of the specification itself. It offers alternative solutions and reasoning behind these suggestions, rather than addressing a use case, feature request, administrative issue, conclusion, philosophical discussion, or unknown aspect."
  },
  {
    "id": 1485129752,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/49",
    "created_at": "2023-03-27T13:47:06Z",
    "updated_at": "2023-03-27T14:41:05Z",
    "body": "It's true this isn't reflected in other specs, including the DNT spec itself: \"Ideally, the value of Navigator.doNotTrack ought to reflect the current set of user-granted exceptions in effect when the attribute is read.\" https://www.w3.org/TR/tracking-dnt/#expressing\r\n\r\nI think it's worth requiring locked consistency within a given navigation for all subresources and subframes as that seems the most correct/consistent approach and this spec is still being incubated, but I'd also be fine with unifying HTTP/JavaScript approaches the other direction and always using the 'live' value of the preference if that's what you're saying.",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides technical feedback on a specification related to tracking and Do Not Track (DNT) preferences. It suggests an approach based on existing specifications, such as the DNT spec, which implies it is intended to inform or improve the design of the specification being referenced."
  },
  {
    "id": 1499285724,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-06T15:54:10Z",
    "updated_at": "2023-04-06T18:14:48Z",
    "body": "In a perfect world, I would definitely want the response to be session-specific. My three concerns are:\r\n\r\n(1) It may be technically challenging in some cases (as @AramZS and @dmarti have argued).\r\n(2) As @braedon notes, tens of thousands of sites have already published a `well-known` for GPC assuming a different meaning.\r\n(3) Publishing a `well-known` is voluntary, and I fear sites will not be sufficiently incentivized to provide a session-specific response. In addition to any coding challenges, doing so potentially invites liability if they provide an inadvertently incorrect response, and I am not aware of any user agents that are taking steps to treat publishers differently based on the `well-known` (though that could change if the `well-known` was dynamic).\r\n\r\nI am not sure these three concerns are insurmountable, just noting them. In fact, it would be my preference to surmount them.\r\n\r\nI think I disagree that nothing > a static `well-known` however. While honoring GPC is mandatory in California and Bermuda (and possibly other jurisdictions), I think there is still some lack of awareness and/or compliance with GPC. At IAPP yesterday on the CA regulators' panel, the speakers noted that compliance with CCPA more broadly was very inconsistent. Allowing publishers to express _any_ recognition of GPC is still valuable and provides data to researchers and regulators; the trend lines detected by the GPC Support Bot which crawls `well-knowns` have been useful.\r\n\r\nSo I would still support a static resource over nothing. But if we go that route we should revise the spec to clarify whether `true` means:\r\n\r\n(1) \"I do something, somewhere in response to GPC\"\r\n(2) \"I do something, everywhere in response to GPC\" (but I think this would be a significant change from how many companies are interpreting this today)\r\n(3) \"I do something in response to GPC in the places where I am legally required to\"\r\n(3b) \"I do something in response to GPC _at least_ in the places where I am legally required to\"\r\n(4) \"I do something in response to GPC in these jurisdictions\" (and we provide guidance on how to list them out), or\r\n(5) something else\r\n\r\n(also, to be clear, as with @pes10k, none of this is a hill I am willing to die on)",
    "user": "j-br0",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment primarily discusses technical concerns related to using the `well-known` for GPCC compliance in different jurisdictions and proposes revisions to the specification to clarify its meaning. While there are also philosophical comments about why publishing session-specific responses is a good idea, this aspect of the comment is more focused on clarifying the meaning and implications rather than raising philosophical questions. The tone remains neutral and informative throughout, making it an administrative comment."
  },
  {
    "id": 1499472949,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-06T18:42:43Z",
    "updated_at": "2023-04-06T18:42:43Z",
    "body": "It would be very helpful to include information on consent-exempt storage aka \"strictly necessary\" cookies etc.\r\nIn Europe a website does not require consent for particular kinds of storage such as those that are \"strictly necessary for the provision of an information society service requested by the subscriber or user\" (ICO guidance).\r\nThe GPC signal is a No-Op in Europe (because ePrivacy already establishes default opted-out) but incorporating the ability to declare autonomy relevent information in a machine-readable way could make it _de rigueur_",
    "user": "michael-oneill",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment discusses the inclusion of consent-exempt storage and other technical aspects related to cookies, which are relevant to the technical functionality and user experience of a website. It seems to be providing feedback or suggestions on how to improve the technical implementation of a particular feature (cookies) in a European context."
  },
  {
    "id": 1500669099,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-07T21:43:45Z",
    "updated_at": "2023-04-07T21:43:45Z",
    "body": "Is there a reason not to have two fields? I don't think that JSON is running out. Like:\r\n- `gpc: true`: this site intends to honour GPC requests as applicable.\r\n- `requestGPCState`: is `true` if the _current request_ would honour a GPC signal that if set, `false` if it wouldn't, and undefined if it's not saying. (Let's not talk about sessions, only lawyers think that those exist.)\r\n\r\nSide note: @michael-oneill GPC is entirely unrelated to cookies, by design. It's not that it's a no-op, it's that it deliberately targets the sale of data, not cookies considerations. The spec states so.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides technical feedback on how to use the `gpc` field in a JSON object, specifically clarifying its purpose and behavior within this context. It addresses potential confusion or misuse and offers guidance for implementing the feature correctly."
  },
  {
    "id": 1500866278,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-08T10:56:32Z",
    "updated_at": "2023-04-08T10:56:32Z",
    "body": "> Side note: @michael-oneill GPC is entirely unrelated to cookies, by design. It's not that it's a no-op, it's that it deliberately targets the sale of data, not cookies considerations. The spec states so.\r\n\r\nExactly. The header signal is a no-op in Europe because it has no legal meaning there.\r\n\r\nFYI ePrivacy is not about \"cookies\" either, it is about tracking, or recognising an individual across multiple web interactions by utilising data stored in their UA. The \"cookie law\" ephthet was given it by the tracking lobby.\r\n\r\nI was referring to extending the well-known resource - which could give the recomendation some point in Europe, where there is a need for a machine-readable way for sites to declare storage claimed to be exempt from the prior consent requirement.\r\n\r\n\r\n",
    "user": "michael-oneill",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback and insights about the specification or technical aspect of cookies (GPC) in the context of data protection laws, specifically highlighting differences between European regulations regarding cookie considerations and the header signal."
  },
  {
    "id": 1500959664,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-08T19:17:32Z",
    "updated_at": "2023-04-08T19:17:32Z",
    "body": "> Is there a reason not to have two fields? I don't think that JSON is running out. Like:\r\n\r\n\"I dont think that JSON is running out\" is a very funny phrase :)\r\n\r\nI'm all for this idea @darobin! A+, way to cut the knot!\r\n\r\nIf no one disagrees by EOD Monday, i'll update the PR accordingly ",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive criticism and suggestions regarding a technical aspect of using JSON. It expresses concern about running out of space in certain situations (e.g., storing large amounts of data), but frames it as a minor issue rather than a critical one, with the author offering an alternative solution by suggesting two fields instead."
  },
  {
    "id": 1500961354,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-08T19:27:37Z",
    "updated_at": "2023-04-08T19:27:37Z",
    "body": "one small note though, i think session is better than request here, bc its not useful to know if GPC is being respected for the request for the `.well-known`; what the user cares about is if GPC is respected for _every other_ request to the site.\r\n\r\nI appreciate that session is a not-100%-well-defined term on the platform, but i dont think that makes \"session\" meaningless (as i mentioned above, session is used similarly in other standards/specs), and it captures the intent better than request.\r\n\r\nThat said, this isn't a hill i want to die on.  If there isn't a path to close/merge this PR with \"session\", but there is for \"request\", I can go along with \"request\"",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed and constructive feedback about the terminology used in the request, suggesting that 'request' might be more suitable than 'session'. It also mentions a potential solution (closing/merging the PR) for technical issues but does not explicitly state the classification."
  },
  {
    "id": 1501060388,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-09T07:15:09Z",
    "updated_at": "2023-04-11T03:05:54Z",
    "body": "Agree with @pes10k that saying \"GPC is honored for this request\" isn't useful/will be exploited. We'd need to very carefully/explicitly define the scope, and consider how it interacts with the various laws. Seems hard, to put it mildly?\r\n\r\nPersonally, I think that's a lot of effort/complication/risk to add to the spec for something that is hard for most sites to even implement - a dynamic response based on *something* about the user is a very different prospect to a static file.\r\n\r\nThe elegance/simplicity of the existing well-known resource is it is extremely simple to implement, and offloads all that complexity to the relevant law. I don't see a good argument for complicating it currently.\r\n\r\nTrying to report whether the site is honoring GPC for the current user/session/request/whatever seems like something for a response header and/or JS API?",
    "user": "braedon",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The commenter disagrees with the original statement about saying \"GPC is honored for this request\" being useful, suggesting that it may not be exploitable. They also express concerns about adding complexity to the specification, implying that it's unnecessary and potentially complicated."
  },
  {
    "id": 1502133797,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-10T18:09:11Z",
    "updated_at": "2023-04-10T18:09:11Z",
    "body": "I also agree with @pes10k and @braedon. A tricky problem is when GPC must be checked and used by a service provider, in 3rd-party JavaScript that may appear on multiple sites, but the `.well-known` file can only be updated in the CMS for the individual site. This is a common pattern for sites that use service providers that must (or choose to) respect GPC, and makes it hard to keep the resourceand the actual GPC behavior in sync. A site with this fairly common setup would be likely to omit the resource entirely.",
    "user": "dmarti",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "This comment is discussing a specific scenario or situation related to using Google Public Service Cache (GPC) in 3rd-party JavaScript applications that may appear on multiple sites, and how it can lead to inconsistencies between different resources. The author is providing feedback on the CMS for individual sites regarding this issue, indicating that their purpose is to provide information about a usability problem."
  },
  {
    "id": 1502140891,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-10T18:15:29Z",
    "updated_at": "2023-04-10T18:15:29Z",
    "body": "Glad you liked it @pes10k :)\r\n\r\nI'm not going to die on this hill either, but note that if your goal is to prevent lawyer from lying then using a somewhat vague term like \"session\" might not be the best idea either. Maybe make it something like \"a request to any other resource on this site with similar parameters\"?",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment suggests adding a feature or modification to prevent certain types of behavior (lawyers lying) and provides an alternative suggestion for achieving that goal, indicating that it's something the person is requesting."
  },
  {
    "id": 1515167739,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-19T18:14:54Z",
    "updated_at": "2023-04-19T18:14:54Z",
    "body": "> Is there a reason not to have two fields? I don't think that JSON is running out. Like:\r\n> \r\n> * `gpc: true`: this site intends to honour GPC requests as applicable.\r\n> * `requestGPCState`: is `true` if the _current request_ would honour a GPC signal that if set, `false` if it wouldn't, and undefined if it's not saying. (Let's not talk about sessions, only lawyers think that those exist.)\r\n\r\nI could live with two fields, but I suspect in practice few if any will implement the proposed `requestGPCState` field for the reasons discussed in the thread (novel, difficult to implement, potentially induces legal liability). Earlier proposed versions of the CCPA regulations would have required sites to display opt-out state to users, but there is no such mandate today under any law I am aware of. And even if that mandate is reintroduced, I'm not sure the `well-known` is the best mechanism to facilitate compliance.\r\n\r\nCurrently at least 20k sites seem to voluntarily publishing a GPC `well-known`, and the trend lines are useful to both researchers and regulators. Of the options I listed earlier to more narrowly define what a static resource is meant to convey, I would choose to define `gpc: true` as \"this site honors GPC signals at least in the jurisdictions where it is legally required to do so.\" Such a statement would not trigger new liability for site owners which could otherwise deter implementation. While the signal would only be conveying that the sites were compliant with the law, we know today a lot of sites _aren't_ compliant with the law, so the `well-known` would provide some information to the ecosystem about awareness and adoption.",
    "user": "j-br0",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The commenter is suggesting adding an additional field (`requestGPCState`) to indicate whether a site honors GPC (Generalized Passenger Consent) signals, in order to better facilitate compliance with CCPA regulations. They propose defining `gpc: true` as \"this site honors GPC signals at least in the jurisdictions where it is legally required to do so\", which would provide more specific information about compliance status for sites that are subject to such requirements."
  },
  {
    "id": 1516727406,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/41",
    "created_at": "2023-04-20T17:55:33Z",
    "updated_at": "2023-04-20T17:55:33Z",
    "body": "Reflecting on this discussion, I think this addition is warranted and should be merged in, but I think the spec needs additional information in this section. @martinthomson I'd like to merge this in and invite additional changes on top of that change. ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment expresses a request for the addition of specific information related to the proposed specification, indicating that it requires further development or consideration before being merged into the existing codebase."
  },
  {
    "id": 1516728309,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/41",
    "created_at": "2023-04-20T17:56:23Z",
    "updated_at": "2023-04-20T17:56:23Z",
    "body": "This is a good start, if brief. We may want to add more to the privacy considerations (which can be done later), like noting the privacy benefits of being able to easily exercise privacy rights and express privacy preferences, and that in some cases or jurisdictions the preference may not lead to actual differences in behavior.",
    "user": "npdoty",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment is requesting additional privacy considerations for a specific feature (exercising privacy rights and expressing privacy preferences), suggesting it can be developed later if necessary."
  },
  {
    "id": 1516730034,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/49",
    "created_at": "2023-04-20T17:57:47Z",
    "updated_at": "2023-04-20T17:57:47Z",
    "body": "I think this is worthwhile discussing in the CG. @martinthomson let's add this to the agenda. ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment expresses an opinion or idea about adding something new (a feature) to a product or system, and suggests it be discussed within a specific group (the CG). This indicates that it is not strictly \"Technical Feedback\", \"Administrative\", or \"Conclusion/Resolution\" but rather a proposal or suggestion for improvement."
  },
  {
    "id": 1516731276,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-20T17:58:47Z",
    "updated_at": "2023-04-20T17:58:47Z",
    "body": "I think this warrants additional in-group discussion. I move to take the conversation to our next meeting. ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "No reason provided."
  },
  {
    "id": 1516732946,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2023-04-20T17:59:57Z",
    "updated_at": "2023-04-20T17:59:57Z",
    "body": "@darobin @mnot What is the feeling here? Should we close and drop or does this need further development? ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback about an existing issue, specifically about whether the code should be closed and dropped or if it needs further development. It's a technical issue that requires consideration to determine its future state."
  },
  {
    "id": 1516741014,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/34",
    "created_at": "2023-04-20T18:05:58Z",
    "updated_at": "2023-04-20T18:05:58Z",
    "body": "I would like to say that this is out of scope for the specification and up to the implementer. Browser vendors / extension developers have a better understanding of their users' intent in private/incognito mode than the spec writers and arguably user intent is not consistent across every browser. Different browsers provide different messaging on activation of clean-state browser modes and the activation of GPC in those modes may make sense based on one browser's messaging but not on another and in some cases it may even make sense to present it as an option on activation of that mode, as @darobin suggests. I do not think we need language in the spec to address this.",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is primarily discussing a matter related to browser functionality and user experience, specifically how to handle different browser modes and their respective messaging. It does not provide any technical details about the specification or propose changes to it, but rather suggests a workaround for addressing a potential issue in private/incognito mode."
  },
  {
    "id": 1517055427,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2023-04-20T23:26:32Z",
    "updated_at": "2023-04-20T23:26:32Z",
    "body": "My .02 - close this, but keep it in mind if you find that you need to create a new, incompatible version of the header.",
    "user": "mnot",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment is providing constructive criticism or suggestions for improving something (in this case, a programming code). It's giving specific advice on how the feature could be improved."
  },
  {
    "id": 1519420565,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/41",
    "created_at": "2023-04-24T05:52:33Z",
    "updated_at": "2023-04-24T05:52:33Z",
    "body": "I'm just contributing here the same as anyone else, not as a chair.  Editors have discretion in how they manage feedback.  If you think that this is a good start and plan to address comments in future changes, that's good with me.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This comment does not offer any feedback on the content or quality of the provided text but rather provides guidance for editing and managing user contributions. It discusses the role of editors and their discretion in handling feedback, which falls under administrative purposes."
  },
  {
    "id": 1526013755,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-27T16:40:32Z",
    "updated_at": "2023-04-27T16:40:32Z",
    "body": "Want to add this note to the record: \r\n\r\nFrom CCPA regs: \r\n\r\nhttps://cppa.ca.gov/regulations/pdf/cppa_regs.pdf#page=37\r\n\r\n```\r\n(6) A business may display whether it has processed the consumer\u2019s opt-out preference\r\nsignal as a valid request to opt-out of sale/sharing on its website. For example, the\r\nbusiness may display on its website \u201cOpt-Out Preference Signal Honored\u201d when a\r\nbrowser, device, or consumer using an opt-out preference signal visits the website, or\r\ndisplay through a toggle or radio button that the consumer has opted out of the sale\r\nof their personal information.\r\n```\r\n\r\nFrom the CG conversation ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides technical information related to California Consumer Privacy Act (CCPA) regulations and how businesses can display opt-out preference signals on their websites. It is a factual update that aims to inform others about specific details in the law, which is classified as technical feedback."
  },
  {
    "id": 1526017287,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/48",
    "created_at": "2023-04-27T16:43:03Z",
    "updated_at": "2023-04-27T16:43:03Z",
    "body": "CG felt strongly that this did not particularly satisfy any concerns about the resource and may have introduced new ones as such closing without merging at this time. ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment expresses CG's concern about whether the action taken (closing the issue without merging it) will address their specific needs or worries regarding the resource, suggesting that it may not fully satisfy their concerns."
  },
  {
    "id": 1526032194,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/38",
    "created_at": "2023-04-27T16:55:56Z",
    "updated_at": "2023-04-27T16:55:56Z",
    "body": "CG came to agreement for an update to this text. @arichiv will author. ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment expresses a technical decision or action (authoring of the text) that is related to improving or updating documentation, which is typically classified as a technical feedback item."
  },
  {
    "id": 1531343412,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/38",
    "created_at": "2023-05-02T11:58:10Z",
    "updated_at": "2023-05-02T11:58:10Z",
    "body": "@AramZS how does this look?",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment is providing feedback on the appearance of a piece of code or a presentation, specifically indicating if something looks good to Aram Zohar. This type of information is typically related to usability and functionality rather than technical implementation or philosophical discussions."
  },
  {
    "id": 1544207575,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/50",
    "created_at": "2023-05-11T15:32:07Z",
    "updated_at": "2023-05-11T15:32:07Z",
    "body": "That is good in my view!",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on something related to functionality or quality, indicating that it was helpful and useful. It does not appear to be related to the user's use case, request, or any administrative aspect of the system. There is no mention of a philosophical discussion or an unresolved issue."
  },
  {
    "id": 1544444309,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2023-05-11T17:57:36Z",
    "updated_at": "2023-05-11T17:57:36Z",
    "body": "Thanks @mnot ! \r\n\r\nI think this is a candidate to be closed. Does anyone strongly feel otherwise? If not, I'll close by the end of this month. ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment expresses an opinion on whether the issue should be considered a feature request, suggesting that it is sufficient for someone else (mnot) to \"close\" it, implying it may not be worth revisiting or improving further in the future."
  },
  {
    "id": 1583111277,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/34",
    "created_at": "2023-06-08T18:05:52Z",
    "updated_at": "2023-06-08T18:05:52Z",
    "body": "Different user agents conceive of Incognito mode/private mode in different ways and enable different features. I'm not sure it makes sense to try to dictate a reaction to such a mode at the level of this specification. Can we discuss in the next PrivacyCG? ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment expresses the author's concern that the technical details of Incognito mode/private mode might be too complex or unclear for developers to fully understand and implement according to this specification, suggesting a need for further clarification."
  },
  {
    "id": 1598745673,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/38",
    "created_at": "2023-06-20T13:09:39Z",
    "updated_at": "2023-06-20T13:09:39Z",
    "body": "@npdoty for review",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment appears to be a request from npdoty ( possibly an organization or individual within that group) to provide feedback on the code being reviewed, in this case, it seems they are looking for suggestions or opinions. It's generally considered constructive and informative as it asks others to review their work or the current status of something."
  },
  {
    "id": 1604802693,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/38",
    "created_at": "2023-06-23T19:46:29Z",
    "updated_at": "2023-06-23T19:46:29Z",
    "body": "Thanks, Ari. One editorial correction. Editors, feel free to merge and make any fixes yourself.",
    "user": "npdoty",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment is providing feedback on technical issues or errors that need to be addressed in the code or document being reviewed, specifically suggesting corrections to editors. It does not appear to be related to a feature request, use case, administrative task, conclusion/resolution, or philosophical discussion."
  },
  {
    "id": 1604891544,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/38",
    "created_at": "2023-06-23T20:13:15Z",
    "updated_at": "2023-06-23T20:13:15Z",
    "body": "@martinthomson, would you like to review this PR? (If you are busy, feel free to let me know, and I can do it.)",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment is asking for a technical review of the provided pull request (PR). This type of communication is typically used between developers or team members to share information, discuss code changes, or ask for guidance on how to implement something."
  },
  {
    "id": 1611414956,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/38",
    "created_at": "2023-06-28T13:29:11Z",
    "updated_at": "2023-06-28T13:29:11Z",
    "body": "@martinthomson for review",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This comment appears to be a formal notification or request from someone (likely Chris Thompson, as it is signed by \"@martinthomson\") requesting that another person (Martyn Thomson) performs the task of reviewing something. It does not seem to provide any specific feedback, use case, feature request, conclusion/resolution, philosophical discussion, or contain unknown information. The primary purpose appears to be administrative in nature."
  },
  {
    "id": 1634682385,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/33",
    "created_at": "2023-07-13T18:08:47Z",
    "updated_at": "2023-07-13T18:08:47Z",
    "body": "If there are further issues please submit as a separate issue. ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment appears to be related to user feedback or support, where the author is requesting that any additional issues or concerns should be reported separately rather than directly in this thread. This is a common practice for tracking and managing multiple requests or issues related to the same topic or product."
  },
  {
    "id": 1634688941,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/36",
    "created_at": "2023-07-13T18:14:41Z",
    "updated_at": "2023-07-13T18:14:41Z",
    "body": "@martinthomson The changes we now have merged in were agreed upon as potentially needing additional text beyond what is there. Would you like to suggest something that would improve clarity or close this issue?",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "This comment is requesting a feature addition that suggests further development of the current change, implying that some aspects may be unclear or in need of improvement. The language used (\"would you like to suggest\") also implies that there's an opportunity for constructive input or collaboration."
  },
  {
    "id": 1637928379,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/36",
    "created_at": "2023-07-17T11:22:22Z",
    "updated_at": "2023-07-17T11:22:22Z",
    "body": "I'm still unhappy with the \"we tried not to make it worse, really\" implications of that last statement.\r\n\r\nWhy not just say something like:\r\n\r\n> Exposing a user's preference (in the HTTP header field or `navigator` object[^1]) potentially divides users into two groups in a way that might increase the information available for fingerprinting.  This extra information is available unless the signal perfectly correlates with other signals [^3]. This represents a privacy cost that is justified[^2] by the privacy advantage provided by sending the signal. \r\n\r\n[^1]: Note that the formatting in the draft is [a little off](https://privacycg.github.io/gpc-spec/#privacy).\r\n[^3]: I wouldn't say this, but a decision to enable always would mean that the users of that browser don't contribute any signal beyond what the user agent identification would.\r\n[^2]: I don't know how to do this without the passive voice; I wanted to say \"we believe it to be justified\", but \"we\" is super ambiguous, which I don't like.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "philosophical",
    "reason": "The comment expresses a philosophical opinion about the implications of the statement in question. It questions whether it's morally justifiable to prioritize privacy over other concerns, such as fingerprinting, and whether the decision to expose user preferences is a good thing or a bad thing. This type of analysis requires careful consideration of ethical and moral dilemmas rather than technical information."
  },
  {
    "id": 1638742962,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/38",
    "created_at": "2023-07-17T19:27:30Z",
    "updated_at": "2023-07-17T19:27:30Z",
    "body": "@martinthomson have time to take another look and merge?",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment asks if the author can take another look at a task or feature they mentioned earlier, indicating that it requires review and potential changes."
  },
  {
    "id": 1640413712,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/38",
    "created_at": "2023-07-18T15:10:52Z",
    "updated_at": "2023-07-18T15:10:52Z",
    "body": "I'm OK with this, but the decision to merge is up to editors.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This comment appears to be an administrative note or clarification regarding a decision-making process in a specific context (likely a content management system or online platform), indicating that the commentor has no objection to the decision itself, but rather wants to acknowledge it."
  },
  {
    "id": 1640418051,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/51",
    "created_at": "2023-07-18T15:13:28Z",
    "updated_at": "2023-07-18T15:13:28Z",
    "body": "Making this infinitely extensible is a bad idea IMO. Part of the strength of GPC is that it is a single choice for a user that represents a \"more private\" experience that reflects a very sane boundary. \r\n\r\nBy changing the semantics, we may be throwing away California's progress in enforcement by changing the meaning out from under them. \r\n\r\nIf there are more compelling use cases we could add another header or two in this spec. `Sec-*: 1` should compress well. I understand the concern of not wanting to have multiple headers for very similar semantics, however I don't think the set of things the user can reasonably be asked to opt out of with every request is that big. Maybe just a couple more? Even ADPC only provides a single value for the `object` option. ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The commenter suggests adding additional headers to the spec to accommodate different user options, such as \"Sec-*\" which compresses well and is related to security features, rather than just being a generic header as mentioned in the comment. They also propose keeping only a couple of headers for common use cases, implying that adding more might not be necessary or justified."
  },
  {
    "id": 1640425620,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/52",
    "created_at": "2023-07-18T15:17:52Z",
    "updated_at": "2023-07-18T15:17:52Z",
    "body": "I agree that setting a norm for a string, if not a requirement, would be useful given the legal implications.\r\n\r\nI am working internally in Firefox to get language set now. One idea we have had that I am partial to is \"Tell websites not to sell or share my data\" with a link to learn more. ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "This comment expresses an idea or proposal for improvement related to the user interface of Firefox, specifically regarding setting a norm for strings and informing users about their privacy settings. It is not directly related to technical aspects of the browser, administrative tasks, philosophical debates, or unknown scenarios."
  },
  {
    "id": 1640647858,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/38",
    "created_at": "2023-07-18T17:19:29Z",
    "updated_at": "2023-07-18T17:19:29Z",
    "body": "> I'm OK with this, but the decision to merge is up to editors.\r\n\r\n@martinthomson, can you approve your review? Then, I will merge. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides technical feedback on a previous action or decision by someone else (the editor), suggesting that they approve the decision and indicating their intention to take further action (merge). The tone is neutral and does not appear to be asking for anything else, so it falls under technical feedback."
  },
  {
    "id": 1648714893,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/53",
    "created_at": "2023-07-24T22:33:43Z",
    "updated_at": "2023-07-24T22:33:43Z",
    "body": "Could we do this section as a [Registry](https://www.w3.org/2023/Process-20230612/#registries) so it can be updated outside the WG process? This would be an unexpected use for registries, but it seems to mostly fit. I think the biggest challenge would be defining how the custodian should figure out whether a proposed entry is legally correct.",
    "user": "jyasskin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment suggests creating a new registry specifically designed for adding new sections or entries in this process, which aligns with the purpose of registries to define and standardize a set of activities. However, it's unclear what features or changes would be included in such a registry, making it difficult to categorize based on the information provided."
  },
  {
    "id": 1648730723,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/51",
    "created_at": "2023-07-24T22:54:14Z",
    "updated_at": "2023-07-24T22:54:14Z",
    "body": "+1 that it shouldn't be infinitely extensible (unlike parts of ADPC): adding values should require a change to the standard. The GPC spec mentions 3 plausible values so far: sale, direct-marketing, and (unnecessary) local storage. I don't think there's a need to include all 3 in the first version, but this issue is about ensuring that there's semantic space for them. If that's just a described naming pattern for future extensions to follow, I think that'd be ok.\r\n\r\n`Sec-*: 1` doesn't compress that well under [HPACK](https://httpwg.org/specs/rfc7541.html#detailed.format), which allows re-using field names or (name,value) pairs, but doesn't re-use parts of names. That said, the size isn't likely to be a big problem here.",
    "user": "jyasskin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed feedback and suggestions for improving the code, specifically regarding the handling of security-related fields in the Sec-* header. It aims to ensure that these fields are used correctly and do not cause unnecessary complexity or overhead."
  },
  {
    "id": 1649693839,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/51",
    "created_at": "2023-07-25T11:57:08Z",
    "updated_at": "2023-07-25T11:57:17Z",
    "body": "> If that's just a described naming pattern for future extensions to follow, I think that'd be ok.\r\n\r\nThat would be reasonable. Having a naming pattern called out and understanding that future variations can land here. \r\n\r\nI think we agree that using the cookie namespace for the variations is non-ideal and we would be closer to ADPC syntax if we had no adoption yet. \r\n\r\n> Sec-*: 1 doesn't compress that well under [HPACK](https://httpwg.org/specs/rfc7541.html#detailed.format), which allows re-using field names or (name,value) pairs, but doesn't re-use parts of names. \r\n\r\nYou caught me, I forgot that header compression was tricky :) ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on the suggested naming pattern for future extensions to the HTTP/2 specification (\"That would be reasonable\"), as well as technical details about how the cookie namespace will not compress with HPACK. The tone is constructive and aimed at improving the specification, rather than making a request or asking an opinion."
  },
  {
    "id": 1650242390,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/51",
    "created_at": "2023-07-25T17:25:30Z",
    "updated_at": "2023-07-25T17:25:30Z",
    "body": "> we would be closer to ADPC syntax if we had no adoption yet.\r\n\r\nIt seems like you're saying that because someone shipped and there's some adoption, the standards process can't change any of the names anymore. While lots of Chrome teams would be happy with that policy, it's not usually the policy we follow for the web platform, especially for features that shipped before getting any feedback from other browsers.",
    "user": "jyasskin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment is providing technical input and suggestions on how to improve or enhance a specific aspect of Chrome, namely its Adoptability Data Points (ADPC) syntax. It suggests alternative approaches and proposes changes based on observed behavior."
  },
  {
    "id": 1652523786,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/36",
    "created_at": "2023-07-26T21:30:44Z",
    "updated_at": "2023-07-26T21:30:44Z",
    "body": "FWIW, I'm mostly fine with @martinthomson 's suggested text, with the following change:\r\n\r\nChange:\r\n\r\n> This represents a privacy cost that is justified by the privacy advantage provided by sending the signal.\r\n\r\nto\r\n\r\n> Depending on the browser and implementation, the GPC signal may impose a privacy cost, though one intended to be justified by the privacy advantage provided by sending the signal.\r\n\r\nI think this change is important bc the previous sentence recognizes that in some deployments the GPC signal doesn't provide additional fingerprinting-signal. My suggestion aims to just carry that recognition into the next sentence.\r\n\r\nIf that all sounds good / no one opposes it, i'll update the PR and merge",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific suggestions for improving the text, with a focus on clarifying or refining technical details. It does not address broader issues such as use cases, features, or administrative aspects of the codebase. The tone is informative and helpful, indicating that its purpose is to improve the quality or clarity of the proposed change."
  },
  {
    "id": 1692073308,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/34",
    "created_at": "2023-08-24T16:54:32Z",
    "updated_at": "2023-08-24T16:54:32Z",
    "body": "Some brief notes from the perspective of the meeting about things to add to address this: \r\n\r\nContext matters, browsers understand what people want, they try very hard to interpret and there needs to be flexibility on defaults and activation at the browser level. Should make it clear that GPC default settings is based on the user agent or extensions' understanding of how they anticipate their audience behaves. Browser modes alteration of user state in this signal should be considered based on the accompanying messaging to the browser users. Add in as deeper context around how to make the decisions and expectations. Maybe also an explainer for how this has worked and resources from legal decisions, regulator statements, etc... ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The commenter suggests adding features or considerations related to browser defaults, user state management, and decision-making processes in the context of GPC (Global Platform Communication) settings. This includes clarifying default settings based on user agents and extensions' understanding, as well as providing additional information on how these decisions are made and what has worked in similar contexts."
  },
  {
    "id": 1692087800,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/34",
    "created_at": "2023-08-24T16:59:37Z",
    "updated_at": "2023-08-24T16:59:37Z",
    "body": "How browsers interpret user intent or anticipate user expectations is a bit of a science and a bit of an art, but I think that this conclusion is right.  We plan to clearly document our rationale for how we interpret various signals and use those to decide to turn GPC on or off.  We're happy to share that.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This comment appears to be a statement about internal company information, such as the process of interpreting user intent, rather than addressing specific technical issues or providing feedback on code. The tone is neutral and informative, suggesting it's an administrative note rather than something that would require further review or analysis."
  },
  {
    "id": 1703833426,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/52",
    "created_at": "2023-09-02T13:25:14Z",
    "updated_at": "2023-09-02T13:25:14Z",
    "body": "\"Tell websites not to sell or share my data\" might be tailored to the scope of opt-outs for some laws, but not others that have broader opt-outs, for example. If the GPC field sticks to a boolean value, the language might need to clarify other ways it could be interpreted (in addition to the \u2018learn more\u2019 link with more complete information). We flag these questions to consider, as many actors in the ecosystem will be required to figure out how to parse and respond to these signals.",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is primarily focused on administrative and technical aspects of the given subject matter, specifically regarding language clarifications and potential interpretations for opt-out signals. It does not seem to be a question requiring feedback or advice, nor does it appear to be a discussion of the use case or feature request side."
  },
  {
    "id": 1703833545,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/51",
    "created_at": "2023-09-02T13:25:48Z",
    "updated_at": "2023-09-02T13:25:48Z",
    "body": "There is some adoption on the user agent side and web side, but multiple localities have automated opt-out clauses that only go into effect in 2024. Don\u2019t we still have time to revisit the format of the header? The [ADPC](https://www.dataprotectioncontrol.org/spec/#objecting-to-processing-http) pattern may be relevant for opt-outs limited to targeted advertising, sale of personal data, or both. We should anticipate more, distinct opt out requirements in the future and don\u2019t want to end up with Sec-GPC2, Sec-GPC3, etc. fields in the not-too-distant future.",
    "user": "arichiv",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment is requesting changes to the HTTP header format for handling specific types of opt-out clauses that are being implemented at the user agent and web sides, as well as proposing additional, distinct opt-out requirements in the future. This suggests a need for improvement or enhancement in this area."
  },
  {
    "id": 1712190256,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/51",
    "created_at": "2023-09-08T20:31:56Z",
    "updated_at": "2023-09-08T20:31:56Z",
    "body": "> > If that's just a described naming pattern for future extensions to follow, I think that'd be ok.\r\n> \r\n> That would be reasonable. Having a naming pattern called out and understanding that future variations can land here.\r\n\r\nA naming pattern could help; I wouldn't expect it to be in the normative spec itself (though I don't care strongly where it ends up). \r\n\r\nI think more helpful would be advice from implemented experience on sending opt-out signals and their usage. \r\n\r\nDifferent opt-outs (though I don't anticipate many of these will see strong legal support or wide interest for some time) will have potentially quite different semantics, how they're explained to users, how they're interpreted by websites, even which parties or with which data they're communicated in the browser. Guidance and lessons learned on how to write and deploy such a mechanism seems more helpful than anticipatory architectural design to use the same header for other rights or controls.",
    "user": "npdoty",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback on the technical aspects of the specification, specifically addressing concerns about naming patterns, opt-out signals, and guidance on implementing such mechanisms. It does not offer a new feature, propose a use case, request an administrative action, or discuss philosophical implications of a particular issue."
  },
  {
    "id": 1712504710,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/51",
    "created_at": "2023-09-09T12:53:07Z",
    "updated_at": "2023-09-09T12:53:07Z",
    "body": "> Don\u2019t we still have time to revisit the format of the header? \r\n\r\nI think this is a good question for the editors and those that did outreach in California where GPC already constitutes a binding opt-out. ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment suggests revisiting the format of the header, which implies that it could be improved to better suit the needs or context of GPC (Game Promotion Committee) or similar entities. This is in contrast to purely technical feedback, use case analysis, administrative concerns, or philosophical discussions."
  },
  {
    "id": 1728216731,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/52",
    "created_at": "2023-09-20T18:12:25Z",
    "updated_at": "2023-09-20T18:12:25Z",
    "body": "I submitted PR #57 to try to provide more information about existing legal guidance on UI requirements. I do not think it is practical to get browsers to agree on specific disclosures since at least some user agents have stated an intent to continue to turn GPC on by default (which is allowable under certain conditions under at least both California and Colorado regulations). And even if W3C were to agree on consensus language, there is no certainty that regulators (who have the final say in their jurisdictions) would agree with our interpretation of what is or is not legally required. I think it is unlikely that regulators are going to require or even bless specific language formulations, though if any do we should certainly update our documentation to reflect that.\r\n\r\nBecause legal guidance will continue to evolve, I agree with the proposal from @AramZS to set up an explainer document with more detail about legal requirements that can be updated more regularly than this spec (see Issue #56). ",
    "user": "j-br0",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The commenter is providing suggestions and opinions on how to improve or refine the existing proposal, specifically addressing concerns about browser compatibility and regulatory interpretation. They are not asking for a change in the technical implementation of the UI requirements but rather providing feedback on best practices or potential issues that could arise from different interpretations."
  },
  {
    "id": 1728258858,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/53",
    "created_at": "2023-09-20T18:46:05Z",
    "updated_at": "2023-09-20T18:46:05Z",
    "body": "We could alternatively create a separate explainer document for implementers as @AramZS proposed in Issue #56. I don't have a strong feeling about whether an explainer or a registry makes sense, but it probably does make sense for details about various and evolving legal guidance to be in a separate document outside of the spec itself.\r\n\r\nEither way, we should stay away from too much normative interpretation of different jurisdictions' legal requirements and stick to just trying to accurately capture the relevant text of statutes, regulations, or other policy statements from legislators and regulators.",
    "user": "j-br0",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on how to implement the proposed solution (creating a separate explainer document) and suggests an alternative approach (using a registry). The primary focus is on improving the technical implementation."
  },
  {
    "id": 1730008482,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/52",
    "created_at": "2023-09-21T17:27:53Z",
    "updated_at": "2023-09-21T17:27:53Z",
    "body": "We have a paper at the Privacy Enhancing Technologies Symposium next year that may be relevant,\r\n[Generalizable Active Privacy Choice: Designing a Graphical User Interface for Global Privacy Control](https://github.com/privacycg/gpc-spec/files/12689566/GPC_Privacy_Choice_Paper.pdf).\r\n\r\nThe question we address is how GPC can be integrated into the browser without default settings, compliant with the law, and in a usable way. The main idea is to generalize settings, e.g., apply the GPC opt out on site towards all future sites people visit.\r\n",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "This comment describes an existing research paper (or potential paper) that explores how Generalized Privacy Control can be integrated into a browser without default settings. It mentions specific design considerations, such as integrating the GPC opt-out feature across multiple sites and ensuring compliance with law."
  },
  {
    "id": 1778454934,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/56",
    "created_at": "2023-10-25T03:39:01Z",
    "updated_at": "2023-10-25T03:39:01Z",
    "body": "@SebastianZimmeck, is there a specific question that the group can help you with here?  Also, how much time do you expect that discussion to take?  I think that we can find time for this at the meeting this week, but I need a little help with scheduling.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment is an administrative request from a user (SebastianZimmeck) seeking guidance on how to schedule a discussion regarding technical issues. It doesn't contain any specific feedback or suggestions about the group's work, nor does it ask for help with a particular feature or use case."
  },
  {
    "id": 1779527580,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/56",
    "created_at": "2023-10-25T15:23:35Z",
    "updated_at": "2023-10-25T15:23:35Z",
    "body": "Here is the [explainer](https://docs.google.com/document/d/14e7iWqm2zmyEShNq5yGXVrnYQC5BVBMhnNrMRtpOmwM/edit?pli=1). \r\n\r\n@martinthomson, the question is what, if anything, should be changed in the explainer to make it most helpful to implementers (e.g., publishers, browser vendors)?\r\n\r\nI think 15 minutes would be a good amount of time to reserve.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The commenter suggests reserving a specific amount of time for implementing the explainer, which may not provide enough guidance for publishers and browser vendors who need more detailed instructions. This type of suggestion is typically related to implementing features or resolving issues with a system, product, or process."
  },
  {
    "id": 1780989187,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/56",
    "created_at": "2023-10-26T12:11:45Z",
    "updated_at": "2023-10-26T12:11:45Z",
    "body": "Some feedback:\r\n\r\n* The header needs to be a structured header. We should not add new non-structured headers to the web platform. (I have given this feedback a number of times.)\r\n* The new member of `Navigator` should always be present and return false when the signal is not present. Conditional members are generally not supported by Web IDL and also bad for a number of optimizations around object shapes and such.",
    "user": "annevk",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific suggestions to improve the web platform's functionality, which falls under technical improvements or bug fixes aimed at enhancing its stability and usability."
  },
  {
    "id": 1781257336,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/56",
    "created_at": "2023-10-26T14:35:04Z",
    "updated_at": "2023-10-26T14:35:04Z",
    "body": "> The new member of Navigator should always be present and return false when the signal is not present. Conditional members are generally not supported by Web IDL and also bad for a number of optimizations around object shapes and such.\r\n\r\nThe spec defines it as always present, and false if the user hadn't expressed a do-not-sell-or-share preference at the time of navigation. The spec is reasonable imo.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on a specific technical aspect of a specification (the behavior of Navigator's conditional members), suggesting an improvement or adjustment to achieve better results or minimize issues in practice. It does not relate to the use case, feature request, administrative aspects, conclusion/resolution, philosophical discussion, or are otherwise unknown within this context."
  },
  {
    "id": 1781438061,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2023-10-26T16:17:31Z",
    "updated_at": "2023-10-26T16:17:31Z",
    "body": "I continue to think this is important to address before this is more widely adopted. This gives us some extensibility and also overall consistency with all new headers we add to the web platform.",
    "user": "annevk",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides a specific technical opinion about an issue (a lack of consistency in handling new headers), suggesting that it is aimed at improving or proposing changes to address this problem."
  },
  {
    "id": 1781440364,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2023-10-26T16:18:58Z",
    "updated_at": "2023-10-26T16:18:58Z",
    "body": "If this is going to be re-opened, I'd suggest we also consider whether the `Sec-` prefix is needed.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment suggests that the feature (possibly related to security) should not have a `Sec-` prefix, indicating a request for a simpler or more straightforward naming convention."
  },
  {
    "id": 1781445722,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/51",
    "created_at": "2023-10-26T16:22:24Z",
    "updated_at": "2023-10-26T16:22:24Z",
    "body": "If we are changing the syntax of the header (e.g. because of #6), I'm much more open to the idea of allowing other rights to be expressed via this header.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment suggests a potential change in the syntax of an existing feature, which is typically something that can be improved or fixed rather than providing new functionality."
  },
  {
    "id": 1781488064,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/56",
    "created_at": "2023-10-26T16:49:58Z",
    "updated_at": "2023-10-26T16:49:58Z",
    "body": "As discussed in [today's PrivacyCG meeting](https://docs.google.com/document/d/1DZEhS1UHJ1PKxt5ZwKmn5LZ4bo10UFyNXeLp2dUuzRM/edit#heading=h.9a4smtitowo2), please feel free to add your suggestions to the [Explainer](https://docs.google.com/document/d/14e7iWqm2zmyEShNq5yGXVrnYQC5BVBMhnNrMRtpOmwM/edit?usp=sharing) within the next two weeks. At that point, we will convert the Explainer format to markdown and open a PR here.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "This comment requests new features or improvements to be added to the Explainer documentation in the future, indicating it is about adding more functionality to an existing system."
  },
  {
    "id": 1781544968,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2023-10-26T17:30:43Z",
    "updated_at": "2023-10-26T17:30:43Z",
    "body": "That should probably be a separate issue as that raises the question of what should happen when a website sets it.",
    "user": "annevk",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment is expressing an idea or suggestion for improvement, specifically requesting to have something (a set) handled differently. This aligns with the common classification of feature requests in software development and design, where users propose changes to make a product more useful or efficient."
  },
  {
    "id": 1815663967,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/58",
    "created_at": "2023-11-17T02:45:15Z",
    "updated_at": "2023-11-17T02:45:15Z",
    "body": "@dmarti, can you review this change? I would like to add a .gitignore. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment is providing technical assistance and guidance on how to use or configure a tool (a Git repository), which falls under the category of \"Technical Feedback\"."
  },
  {
    "id": 1836479822,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/56",
    "created_at": "2023-12-01T17:10:48Z",
    "updated_at": "2023-12-01T17:10:48Z",
    "body": "The explainer is now merged into main.\r\n\r\n> The header needs to be a structured header. \r\n\r\nThis point is discussed in #6.\r\n\r\n> The spec defines it as always present, and false if the user hadn't expressed a do-not-sell-or-share preference at the time of navigation. The spec is reasonable imo.\r\n\r\nAgreed.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "This comment discusses specific requirements or decisions related to a user interface feature (\"The explainer is now merged into main\") and its interaction with other parts of the specification, but does not directly address functionality, technical details, or design principles."
  },
  {
    "id": 1856833507,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/60",
    "created_at": "2023-12-14T22:38:05Z",
    "updated_at": "2023-12-14T22:38:05Z",
    "body": "GPC is designed to be a binary signal --- either it's on or it's not. There is no third state. If the user has activated GPC, it seems like the header should always be transmitted (unless some edge case or technical challenge I'm not thinking of). The user agent generally won't know the extent to which the recipient has seen, logged, or responded to previous GPC signals, so the header should be always sent so long as the consumer hasn't changed their preference. On the other hand, if the user hasn't activated GPC, or subsequently turns it off, the signal should never be sent (what constitutes user intent to turn on the signal is a different question raised by Issue #52).\r\n\r\nI can imagine a mechanism where a user agent could be configured by the user to whitelist certain domains to not receive the signal (e.g., a particular website asks to be exempted from the general preference to not have data shared and the user agrees). I would be fine clarifying that in the spec, though again the signal would still be binary: either the header would be persistently sent because the user wants to send it to that domain, or the header wouldn't be sent. I don't know if we need to get into that level of granularity but I don't feel strongly either way.\r\n\r\nFWIW, the [California regulations](https://cppa.ca.gov/regulations/pdf/20230329_final_regs_text.pdf) on Opt-out Preference Signals state that if a business had previously received an opt-out signal from a known user but then stops receiving the signal, the business should still treat the user as opted out unless they receive explicit permission to undo the opt-out:\r\n\r\nWhere the consumer is known to the business, the business shall not interpret the \r\nabsence of an opt-out preference signal after the consumer previously sent an opt-out \r\npreference signal as consent to opt-in to the sale or sharing of personal information. \r\n\r\n\u00a7 7025(c)(5). Other jurisdictions may treat opt-out/re-opt-in differently, so I don't think the spec should get into detail about what sort of consent or interface is legally required.",
    "user": "j-br0",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed information and suggestions for improving the design and behavior of Google Pay Credit (GPC), specifically regarding its handling of opt-out signals. It offers technical solutions and clarifications to address potential issues with user agent configuration, signal persistence, and regulatory compliance."
  },
  {
    "id": 1856866589,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/62",
    "created_at": "2023-12-14T22:52:00Z",
    "updated_at": "2023-12-14T22:52:00Z",
    "body": "From an implementation perspective, having support for a feature means that the associated interfaces and items are present.\r\n\r\nThe difference with HTTP is that boolean fields that are not present are simply assumed to be false (I know you aren't using modern definitions for fields -- naughty -- but that is the best way to model `Sec-GPC`).\r\n\r\nI guess the real question is whether we should invest in making the attribute hidden when GPC has not been enabled.  That is irregular, but I believe it is technically feasible.  Is there a good reason not to expose a value of `false`?",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment discusses a technical implementation aspect related to a specific feature or functionality, which in this case is support for a feature and the modeling of boolean fields in the context of HTTP security content (GPC). The question posed at the end addresses a use case-related concern, whether to expose the default value when GPC has not been enabled."
  },
  {
    "id": 1882564641,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/62",
    "created_at": "2024-01-09T07:53:55Z",
    "updated_at": "2024-01-09T07:53:55Z",
    "body": "Correcting the HTTP field is still an open issue: #6.\r\n\r\nThe member of `Navigator` should always be present as conditionally hiding interface members is rather unprecedented and there's no good reason to do so.\r\n\r\nAs with the header we should just give guidance that websites only pay attention to the true state.\r\n\r\n(And yes, we wouldn't transmit the header in its false state, but that's just because it's a different mechanism and we want to be efficient on the wire.)",
    "user": "annevk",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment is requesting a change or enhancement to improve an existing component (the `Navigator` class) by suggesting that a specific functionality (correcting the HTTP field) should be implemented. It also implies adding guidance that websites only pay attention to the true state, which could influence how the code is written and maintained."
  },
  {
    "id": 1883680366,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/64",
    "created_at": "2024-01-09T19:48:44Z",
    "updated_at": "2024-01-09T19:48:44Z",
    "body": "> https://global-privacy-control.glitch.me/ says it should return 1\r\n\r\nThis says the navigator property should be a boolean. \"This value mirrors the value sent in the Sec-GPC header: it will equal true if the Sec-GPC header sent is equal to \"1\", and false otherwise.\"\r\n\r\n> Chrome returns 1\r\nI don't believe Chrome has native support of `navigator.globalPrivacyControl`- how have you enabled it for your testing? \r\n\r\n> https://developer.mozilla.org/en-US/docs/Web/API/Navigator/globalPrivacyControl also indicates it isn't supported anywhere except Firefox, which seems false. They are missing the specs as well so there seems a big gap\r\n\r\nThe spec is in the [See Also](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/globalPrivacyControl#see_also) section. And I think among the browsers in the table, Firefox is currently the only one to support GPC without a browser extension.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This comment appears to be discussing an internal or organizational matter related to the global privacy control feature of the web browser, specifically whether it should return 1 (true) instead of 0 (false) when the Sec-GPC header is set to \"1\". It seems that a decision has been made internally and does not require external feedback."
  },
  {
    "id": 1887680170,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/62",
    "created_at": "2024-01-11T17:54:52Z",
    "updated_at": "2024-01-11T17:56:43Z",
    "body": "In the meeting of PrivacyCG for Jan 11 2024 we have concluded that the specification should note that the `navigator` property *should* always be present, regardless of value. This is standard practice and the fingerprinting risk at the browser level is already going to be there because it will be known from the major browser version number. Documents will be updated to make this clear ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides a technical recommendation about the specification, which should note that the `navigator` property should always be present, regardless of its value. This is for the purpose of security and usability reasons, indicating that it's providing feedback on best practices or coding standards in a specific context (PrivacyCG)."
  },
  {
    "id": 1887685301,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/60",
    "created_at": "2024-01-11T17:58:24Z",
    "updated_at": "2024-01-11T17:58:24Z",
    "body": "Standards and discussion in the January 11 Privacy CG group have indicated that not transmitting the header when the user has not set or unset the control is the preferred process. With a note that we want to make the above clear (reverting the setting does not indicate an opt *in* when there was previously an opt *out*) we should update the documentation accordingly. ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides specific technical advice regarding the best practice for handling user preferences in a privacy context, making it primarily focused on ensuring that technical aspects are correct and up-to-date."
  },
  {
    "id": 1887694325,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/62",
    "created_at": "2024-01-11T18:04:11Z",
    "updated_at": "2024-01-11T18:04:11Z",
    "body": "Browser extension providers might possibly make a different choice (because their presence on a browser that doesn't support GPC could then be detected, and that could be an unnecessary and meaningful addition to fingerprinting surface), but could also reasonably conclude that not including the header at all when the user hasn't turned it on is compatible with feature-detection requirement in the spec: the user may not know about the feature at all and that effectively the feature isn't present for this user.\r\n\r\nWe could note somewhere in the spec that the navigator property definitely shouldn't be used to indicate that a user turned the setting off after turning it on at some point in the past. That is not what GPC means and not what this property should be used for. Probably no implementer would do that anyway and so a warning may be unnecessary; up to the editors.",
    "user": "npdoty",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on how browser extension providers might choose to implement their own setting detection, but notes that including the `navigator.property` in the fingerprinting surface is not strictly necessary for feature-detection. This suggests a technical critique of the specification rather than an advisory or recommendation."
  },
  {
    "id": 1887772160,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/64",
    "created_at": "2024-01-11T18:54:54Z",
    "updated_at": "2024-01-11T18:54:54Z",
    "body": "I agree we should make sure this is clear in the explainer: the header on the HTTP request is `1` the `navigator` property is `true` and that is the expected behavior. ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides a technical observation or insight about how something works, rather than expressing an opinion, requesting action, or making a philosophical statement. It also lacks any specific request for improvement or clarification, which are typically associated with Administrative or Conclusion/Resolution categories."
  },
  {
    "id": 1887780611,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/64",
    "created_at": "2024-01-11T19:00:53Z",
    "updated_at": "2024-01-11T19:00:53Z",
    "body": "Ah ok, I do have the GPC plugin from Protegis,  so that must be what is returning 1, so that would be a bug on their side according to the spec. I'm not clear if there is any overlap between this group and them, but I will send them an email. ",
    "user": "ryan-a-guthrie",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment provides information about a potential issue related to a specific plugin or service (GPC plugin from Protegis) that is returning an incorrect value (1). This suggests that the user wants to report and possibly fix this bug, which falls under the category of using their product."
  },
  {
    "id": 1910791467,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/62",
    "created_at": "2024-01-25T18:48:17Z",
    "updated_at": "2024-01-25T18:48:17Z",
    "body": "I think that #61's changes the explainer to make this clearer and makes the answer clear. ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment is requesting a change in the explainer text to improve its clarity, indicating that it suggests an enhancement or improvement of a feature."
  },
  {
    "id": 1910792254,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/60",
    "created_at": "2024-01-25T18:48:51Z",
    "updated_at": "2024-01-25T18:48:51Z",
    "body": "#61 now merged covers this question well. ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides an objective assessment of the code, specifically about how well it addresses a particular issue (the merging of #61). It does not relate to any specific use case or feature request, nor is it an administrative note or conclusion/ resolution. Additionally, there is no philosophical or unknown aspect to this comment."
  },
  {
    "id": 1910795816,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/64",
    "created_at": "2024-01-25T18:51:23Z",
    "updated_at": "2024-01-25T18:51:23Z",
    "body": "@ryan-a-guthrie Does the new text in the explainer changes in #61 explain this sufficiently clearly?  ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment appears to be asking for clarification on whether the new text in the explainer in #61 adequately explains a specific use case. It seeks an opinion or confirmation regarding how well the explanation meets their needs, suggesting it's more of a usability-related inquiry."
  },
  {
    "id": 1910797115,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/52",
    "created_at": "2024-01-25T18:52:17Z",
    "updated_at": "2024-01-25T18:52:17Z",
    "body": "@jyasskin Does the latest state of the explainer satisfy your questions here enough that we can close the issue?",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "This comment requests additional clarification or information to be added to an existing explainer, suggesting it is a feature request rather than a technical feedback or administrative inquiry."
  },
  {
    "id": 1910801879,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/53",
    "created_at": "2024-01-25T18:55:40Z",
    "updated_at": "2024-01-25T18:55:40Z",
    "body": " We think that maintaining these explanations in the explainer is for the best. @bvandersloot-mozilla - is the current text satisfactory in covering your concerns? ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides specific feedback on the content of the previous response, indicating a concern about the explanatory quality of the information being shared. It suggests that the current explanation may not fully address the issue at hand or provide sufficient context for understanding the concerns presented by @bvandersloot-mozilla."
  },
  {
    "id": 1915325858,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/52",
    "created_at": "2024-01-29T18:30:38Z",
    "updated_at": "2024-01-29T18:30:38Z",
    "body": "Looking at https://github.com/privacycg/gpc-spec/blob/main/explainer.md#6-user-experience-considerations-and-recommendations, I don't see clear answers to the questions in my original post.\r\n\r\n> As [discussed when we talked about adopting GPC into the Privacy CG](https://github.com/privacycg/meetings/blob/main/2022/telcons/10-27-minutes.md#notes), UAs aren't sure how to do this so that the header stays legally enforceable and has the intended effect across many jurisdictions. UAs also want to make it clear to users what happens when they turn on the header, and we need guidance about how that depends on where the user is, where the target site is based, the user's history of moving around, etc.\r\n\r\nFor example, if Chrome were to start sending the header by default, with no indication from the user that they intended to opt out of sale/sharing, would that remove sites' obligations in some jurisdictions to respect the header when it came from Chrome? And so is it something that the specification or explainer should tell Chrome not to do?\r\n\r\nI also don't see anything in the explainer yet that covers the concern about how we make the effects clear to users. I see the link to Robin's speculation about the effects under the GDPR, but our legal folks aren't convinced he's right. This might be a task to leave to the WG.",
    "user": "jyasskin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment is providing specific feedback on technical aspects of the specification or explainer, such as clarifying ambiguities and suggesting potential issues with certain implementation decisions. It is not related to use cases, features requests, administrative tasks, conclusions/resolve, philosophical discussions, or unknown topics."
  },
  {
    "id": 1915550636,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/53",
    "created_at": "2024-01-29T20:55:48Z",
    "updated_at": "2024-01-29T20:55:48Z",
    "body": "It seems like a Registry is where you want a W3C-defined process to be the deciding factor in how something is applied. But in this case, what is being discussed is documenting decisions that are made elsewhere (in government bodies, primarily). \r\n\r\nCould the spec briefly and non-normatively summarize legal effects and provide an informative reference to a documentation page that could be kept up to date? A w3c wiki page or MDN, say. Or +1 to using an explainer for that purpose for now.",
    "user": "npdoty",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "This comment is discussing how the Registry concept can be applied in a specific context (documenting decisions) and suggesting ways to achieve this goal, such as referencing external documentation sources or leveraging existing resources like W3C wikis. The main focus is on exploring alternative approaches rather than providing technical feedback."
  },
  {
    "id": 1916812994,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/53",
    "created_at": "2024-01-30T13:10:20Z",
    "updated_at": "2024-01-30T13:10:20Z",
    "body": "The current text is satisfactory for me!",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "philosophical",
    "reason": "This comment does not express any specific opinion about the product or its functionality. It simply states that the current text is satisfactory, which is a subjective and general statement that doesn't provide new insights or information to be considered technical feedback, use case, feature request, administrative, conclusion/resolution, or unknown."
  },
  {
    "id": 1926010018,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/67",
    "created_at": "2024-02-05T00:22:00Z",
    "updated_at": "2024-02-05T00:22:00Z",
    "body": "I dont have strong feelings about this, but i think it might be better to scrap the entire paragraph and, instead of describing it in terms of the unverifiable context:\r\n\r\n```A Global Privacy Control [=preference=] needs to be conveyed to all mechanisms that might collect data from a person or share a person's data with third parties.```\r\n\r\nand instead describe it in terms of what the client can verify, something like:\r\n\r\n```A Global Privacy Control [=preference=] should be conveyed for all HTTP requests (in the form of the HTTP header) and all websites (in the form of the Web API property).```\r\n\r\nThat said, i think this is fine too, so if the current PR gets merged too / instead",
    "user": "pes10k",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback on the proposed solution by suggesting an alternative approach. It suggests a change in wording to improve clarity and readability."
  },
  {
    "id": 1926068777,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/67",
    "created_at": "2024-02-05T01:39:20Z",
    "updated_at": "2024-02-05T01:39:20Z",
    "body": "I agree. Your suggestion makes it more clear, @pes10k. I updated the PR accordingly.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback on a suggested change made to a pull request (PR). It does not express an opinion or ask a question about a feature, use case, or administrative process. The mention of \"Your suggestion\" and \"@pes10k\" suggests that it is related to the PR but does not contain any explicit opinions or requests for changes."
  },
  {
    "id": 1984206085,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/68",
    "created_at": "2024-03-07T18:47:07Z",
    "updated_at": "2024-03-07T18:47:07Z",
    "body": "Hi, after some review, we're concerned about the future of adding more laws into the future into the body of the spec. Changes, once this spec continues along the document lifecycle, will enter a longer timeline of review and feedback and we want the rapidly changing landscape of privacy to be quickly reflected to people who want to understand GPC. Since there are likely a lot of new privacy laws that are applicable coming in the future, we think the best place for them is in the explainer.\r\n\r\nWould it be possible for you to put it into the explainer instead? https://github.com/privacycg/gpc-spec/blob/main/explainer.md or we can work on transforming it into there in this PR. Also, if you have any supporting documents or formal legal text that refers to privacy signals or GPC in particular, it would be useful to have it in the docs folder of this repository. \r\n\r\nThanks greatly for this contribution @loganaden - let us know what the best approach is to get it incorporated into the explainer! ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The reviewer is suggesting that a new section or content within an existing document (the spec) be moved there, specifically the part about adding more laws. This indicates a feature request for modifying the existing content to better address future privacy-related developments and improve user understanding of GPC."
  },
  {
    "id": 1984725259,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/70",
    "created_at": "2024-03-07T22:57:15Z",
    "updated_at": "2024-03-07T22:57:15Z",
    "body": "Per @martinthomson's [suggestion](https://github.com/privacycg/gpc-spec/issues/69#issue-2174843185), I added section headers for the different laws and made a few other small editorial changes, none of which are intended to change any meaning. @j-br0, can you review if everything still stands as you intended? ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback on whether adding section headers for specific laws in the gpc-spec documentation is a good idea and whether it alters the original intent of the author."
  },
  {
    "id": 1984790832,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/68",
    "created_at": "2024-03-07T23:44:53Z",
    "updated_at": "2024-03-07T23:44:53Z",
    "body": "On the general point of where to capture information about implementation in law, perhaps a separate document (or wiki page, if you were willing to tempt fate) is better.  The section on laws is already fairly unwieldy and distracting.  A separate document might lend itself to more structure, without distracting from the central message in the explainer.",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "philosophical",
    "reason": "This comment touches on the fundamental nature of information management, specifically how best to organize and present implementation details within a legal context. It raises questions about the purpose and usefulness of current documentation versus creating a new, separate resource for these purposes, which is a philosophical perspective on how information should be categorized and presented."
  },
  {
    "id": 1984944152,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/52",
    "created_at": "2024-03-08T02:39:06Z",
    "updated_at": "2024-03-08T02:39:06Z",
    "body": "> I see the link to Robin's speculation about the effects under the GDPR, but our legal folks aren't convinced he's right.\r\n\r\nI'd say [@darobin's point](https://berjon.com/gpc-under-the-gdpr/) is a bit more than speculation. Notably, the [Landgericht Berlin required LinkedIn to honor DNT signals based on GDPR, Article 21(5)](https://www.vzbv.de/sites/default/files/2023-10/Teil-%20und%20Schlussurteil_LG%20Berlin_24.08.2023.pdf) (in German).",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment is about a specific use case (the requirement under GDPR for LinkedIn to honor DNT signals), and it provides evidence from an external source, which adds to the value of understanding this use case."
  },
  {
    "id": 1985073388,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/68",
    "created_at": "2024-03-08T05:43:27Z",
    "updated_at": "2024-03-08T05:43:27Z",
    "body": "Wherever this winds up, someone should check that the cited sections of the law actually address the effect of a GPC request. The text mentions Articles 23 and 24. Article 23 is\r\n\r\n> a controller shall not collect\r\npersonal data unless (a) it is done for a lawful purpose connected with a\r\nfunction or activity of the controller; and (b) the collection of the data is necessary for that\r\npurpose.\r\n\r\n(not about opt-outs)\r\n\r\n> the controller shall, at the\r\ntime of collecting the personal data, ensure that the data subject\r\nconcerned is informed of  ...\r\n\r\n(not about opt-outs)\r\n\r\nArticle 24 is\r\n\r\n> (1) The controller shall bear the burden of proof for\r\nestablishing a data subject\u2019s consent to the processing of his\r\npersonal data for a specified purpose.\r\n> (2) The data subject shall have the right to withdraw his\r\nconsent at any time.\r\n\r\nThis is closer to being about opt-outs, but it doesn't say that a globally-configured opt-out wins over a direct consent to a specific sharing request on a specific site. Without that statement, a controller can pretty easily prove that the data subject consented to their particular processing even if they told their browser to object in general. (\"We saw a `Sec-GPC: 1` header, and then we asked if they wanted to override that for our site, and they said yes, and they never clicked this other button on our site withdrawing that consent.\") At best, this winds up saying that if the user turns on GPC after some sites had gotten consent, those sites need to re-request consent. (Yay, more consent banners.)\r\n\r\nI did snip some other bits of both articles that seemed unrelated to GPC, but if I snipped a critical one incorrectly, please paste it in here.",
    "user": "jyasskin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "The comment provides feedback on the interpretation of specific provisions related to General Data Protection Control (GPC) requests. It specifically questions whether the controller bears the burden of proof for establishing consent under Article 24, and also suggests that sites may not need to re-request consent if they have previously obtained it through GPC."
  },
  {
    "id": 1985376479,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/68",
    "created_at": "2024-03-08T09:46:50Z",
    "updated_at": "2024-03-08T09:46:50Z",
    "body": "I'll rework it for the explainer instead. ",
    "user": "loganaden",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment appears to be suggesting an alternative approach or suggestion, implying that a different version of something exists or will exist (in this case, an explainer). This is characteristic of \"Use Case\" comments, which are meant for developers or other stakeholders to understand and plan for new features or improvements."
  },
  {
    "id": 1985417256,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/70",
    "created_at": "2024-03-08T10:12:22Z",
    "updated_at": "2024-03-08T10:12:22Z",
    "body": "I have a question also link to @AramZS [comment](https://github.com/privacycg/gpc-spec/pull/68#issuecomment-1984206085) in PR #68 : Is there no a risk of discrepancy about regional privacy regulations between the header from browser and a publisher with their CMP?",
    "user": "anderagakura",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment is asking for clarification or additional information regarding the potential discrepancies between how a browser handles its privacy headers (e.g., those that comply with GDPR) and how a publisher manages its Common Privacy Policy (CPP), which may have different regional regulations."
  },
  {
    "id": 1998069644,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/65",
    "created_at": "2024-03-14T18:23:57Z",
    "updated_at": "2024-03-14T18:23:57Z",
    "body": "> I suggest going further and moving the entire section to the explainer. As the original issue discussed, legal frameworks are a moving target and so will be easier to maintain separately, including for those current described in the spec.\r\n\r\nGood point, @chrisn. Since a number of people expressed this preference, that is what we are going to do, i.e., move the legal details to the [explainer](https://privacycg.github.io/gpc-spec/explainer), keep some general remarks in the spec itself, and (non-normatively) link to the explainer from the spec.\r\n\r\nI'll merge these changes now so that we have a clean slate to make these changes in the spec and explainer.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides detailed suggestions for improving the specification, which is typically considered technical feedback. It proposes moving certain sections of the document to a new section called \"explainer\", suggesting improvements that can enhance the overall clarity and usability of the documentation."
  },
  {
    "id": 1998093357,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/70",
    "created_at": "2024-03-14T18:39:43Z",
    "updated_at": "2024-03-14T18:39:43Z",
    "body": "> I have a question also link to @AramZS [comment](https://github.com/privacycg/gpc-spec/pull/68#issuecomment-1984206085) in PR #68 : Is there no a risk of discrepancy about regional privacy regulations between the header from browser and a publisher with their CMP?\r\n\r\nMost CMPs implement GPC and set other privacy signals accordingly. For example, if GPC is turned on (via the header or JS property), the IAB's GPP `usca` is set accordingly by the CMP. I have not done exhaustive studies on this point, but in general it should be the case. Any particular CMP should be able to answer that question for their platform.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides a technical insight or explanation regarding how Google Platform (GPC) and its Compliance Program with the Interactive Advertising Bureau (IAB) would handle regional privacy regulations between browser headers and publishers with Content Management Programs (CMPs). It offers suggestions for potential discrepancies and proposes that each CMP can be configured to determine this discrepancy."
  },
  {
    "id": 1998096875,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/68",
    "created_at": "2024-03-14T18:41:56Z",
    "updated_at": "2024-03-14T18:41:56Z",
    "body": "> I'll rework it for the explainer instead.\r\n\r\nGreat, @loganaden! Here is the [explainer](https://privacycg.github.io/gpc-spec/explainer) that we are currently revising and in which we can include your language.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment asks for a rework of an existing explainer, suggesting that the user is requesting changes to an existing document rather than providing feedback on its content."
  },
  {
    "id": 1998101741,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/70",
    "created_at": "2024-03-14T18:45:20Z",
    "updated_at": "2024-03-14T18:45:20Z",
    "body": "@SebastianZimmeck I understand the fact that the CMP should handle the signal but : \r\n\r\n1. You mention GPP spec\r\n2. What about TCF in UE which does not support GPC?",
    "user": "anderagakura",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical feedback on how to improve the Capability Management Process (CMP), specifically highlighting a limitation or a potential issue with the current approach and suggesting an alternative solution that takes into account the specifics of the Control Technology Framework (CTF) in User Experience (UE)."
  },
  {
    "id": 2002575600,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/68",
    "created_at": "2024-03-17T18:46:49Z",
    "updated_at": "2024-03-17T18:46:49Z",
    "body": "@SebastianZimmeck I created a different PR: https://github.com/privacycg/gpc-spec/pull/71",
    "user": "loganaden",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "This comment is requesting that another pull request (PR) be addressed, specifically asking the author to create a new PR and provide a link to it. This suggests that the commenter wants to see a feature or improvement in the codebase being developed."
  },
  {
    "id": 2008360306,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/72",
    "created_at": "2024-03-19T23:53:24Z",
    "updated_at": "2024-03-19T23:53:24Z",
    "body": "@HeinzBaumann, here is the [current timeline](https://www.w3.org/2023/12/proposed-wg-privacy.html) (section 3.4). Though, we are a bit delayed. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback regarding the proposed W3C working group document, specifically addressing a point in section 3.4 of the current timeline."
  },
  {
    "id": 2009501263,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/70",
    "created_at": "2024-03-20T12:53:40Z",
    "updated_at": "2024-03-20T12:53:40Z",
    "body": "> You mention GPP spec\r\n\r\nYes, for example, [GPC is included in GPP for California](https://github.com/InteractiveAdvertisingBureau/Global-Privacy-Platform/blob/main/Sections/US-States/CA/GPP%20Extension%3A%20IAB%20Privacy%E2%80%99s%20California%20Privacy%20Technical%20Specification.md#gpc-sub-section).\r\n\r\n> What about TCF in UE which does not support GPC?\r\n\r\nOnce it is clear to which extent GPC is applicable in the EU, I imagine a similar solution for TCF as for GPP.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on how Google Play Privacy Policy (GPP) relates to California General Data Protection Regulation (GDPR), suggesting that TCF (Transparency and Choice Framework) in the EU is similar to GPP in terms of its technical specifications, implying a request for a similar solution."
  },
  {
    "id": 2009928253,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/72",
    "created_at": "2024-03-20T16:00:42Z",
    "updated_at": "2024-03-20T16:00:42Z",
    "body": "@SebastianZimmeck Thank you for the link. Quick question: what does this actually mean? \"February 2025: Global Privacy Control, Candidate Recommendation\". Is this the data is goes into the w3 specification? ",
    "user": "HeinzBaumann",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on the technical details of a new feature or functionality (Global Privacy Control and Candidate Recommendation) in relation to its implementation (going into the W3 specification)."
  },
  {
    "id": 2010706662,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/51",
    "created_at": "2024-03-20T21:53:18Z",
    "updated_at": "2024-03-20T21:53:18Z",
    "body": "I believe there's potential in broadening the current single-bit encoding to a more comprehensive 6-bit system. This enhancement would accommodate the varying privacy laws across different regions, such as the United States, Europe, and beyond. In Europe, for instance, a single bit doesn't suffice due to the requirement for more detailed consent, exemplified by the 11 purposes outlined in the TCF (Transparency and Consent Framework). By incorporating such granularity into the header encoding, browsers could assume the role of gatekeepers, thereby obviating the need for numerous intrusive consent managers.\r\n\r\nWhile I acknowledge that the implementation may be more intricate than this simplified explanation, I believe it aligns with the broader goal of designing the GPC (Global Privacy Control) signal with scalability in mind. This direction holds promise for facilitating smoother compliance with evolving privacy regulations.",
    "user": "HeinzBaumann",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides technical insights and suggestions regarding an enhancement to a specific component, which is classified as a technical feedback. This type of input is typically provided by experts or developers working on the project, offering constructive criticism and recommendations for improvement."
  },
  {
    "id": 2010886606,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/72",
    "created_at": "2024-03-20T23:17:29Z",
    "updated_at": "2024-03-20T23:17:29Z",
    "body": "The [Candidate Recommendation](https://www.w3.org/2023/Process-20231103/#RecsCR) is just one particular step in the process.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback on a technical recommendation, suggesting it might be helpful but not necessarily crucial or impactful enough to warrant full consideration."
  },
  {
    "id": 2015217452,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/72",
    "created_at": "2024-03-22T14:23:32Z",
    "updated_at": "2024-03-22T14:23:32Z",
    "body": "@HeinzBaumann, if you have further questions, please feel free to reopen. ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This comment is from an administrator of a Stack Overflow-like platform, and its purpose appears to be notifying the commenter that they can reopen their question if they need additional information or clarification. The tone is polite and directive, with no explicit technical feedback, use case, feature request, or philosophical content."
  },
  {
    "id": 2015224314,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/69",
    "created_at": "2024-03-22T14:27:25Z",
    "updated_at": "2024-03-22T14:27:25Z",
    "body": "As we decided to generally transfer the discussion of laws to the Explainer, this issue is no longer relevant.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on a decision made in an administrative or internal context. It's meant to inform the author about what needs to be done next and clarifies their role within the process. The tone is neutral and instructional, indicating that it doesn't have a personal opinion or emotional attachment to the issue itself."
  },
  {
    "id": 2015232146,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/68",
    "created_at": "2024-03-22T14:31:44Z",
    "updated_at": "2024-03-22T14:31:44Z",
    "body": "I am closing this PR as it is superseded by #71.\r\n\r\n@jyasskin, if you like to continue discussing [your point above](https://github.com/privacycg/gpc-spec/pull/68#issuecomment-1985073388), please feel free to open a new issue or comment on an existing issue if you think your point fits there.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "No reason provided."
  },
  {
    "id": 2015317672,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/71",
    "created_at": "2024-03-22T15:13:30Z",
    "updated_at": "2024-03-22T15:13:30Z",
    "body": "> Thank you, @loganaden!\r\n> \r\n> > As GPC is intended to convey a generate request that data controllers limit the sale or sharing of the person's personal data to other data controllers, ...\r\n> \r\n> Do you mean \"general request\"? Otherwise, what do you mean by \"generate\"?\r\n> \r\nMy bad. Fixing this.\r\n> > Mauritian regulators may deem GPC to constitute a legally binding invocation of Article 24 rights. However, there might be ambiguities as there is no explicit mention of global opt-out mechanism winning over a direct consent to a specific sharing request on a specific site.\r\n> \r\n> Is it possible to make this statement a bit more specific as to which cases GPC applies to and for which there is ambiguity? For example, would the following be an accurate description:\r\n> \r\n> > Mauritian regulators may deem GPC to constitute a legally binding invocation of Article 24 rights. That would be the case if people's GPC opt out preferences are their only known opt out preferences or their GPC opt out preferences are in line with any other opt out preferences they invoked. However, in case of conflicts there might be ambiguities as there is no explicit mention of global opt-out mechanism winning over a direct consent to a specific sharing request on a specific site.\r\n> \r\nAgreed.\r\n> We are trying to make this as actionable as possible. Feel free to write as you see fit (if it can be made more precise).\r\n\r\n",
    "user": "loganaden",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment is asking for clarification and improvement in how the General Data Protection Controller (GPC) is applied, particularly regarding its applicability to specific cases, opt-out mechanisms, and ambiguity. It seeks a more detailed explanation of when GPC might be deemed binding and under what conditions it would apply."
  },
  {
    "id": 2050239247,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/64",
    "created_at": "2024-04-11T18:08:56Z",
    "updated_at": "2024-04-11T18:08:56Z",
    "body": "@ryan-a-guthrie, is this OK with you? If so, we we will close this issue. This resolves it for me.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment expresses a request from someone to add the issue, and the author agrees that it can be closed by the reviewer, indicating that it is seeking some form of acknowledgment or action from others in order to move forward."
  },
  {
    "id": 2050345537,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/63",
    "created_at": "2024-04-11T19:12:04Z",
    "updated_at": "2024-04-11T19:12:04Z",
    "body": "Maggie Oates is also working on this.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "This comment appears to be an update about someone's involvement in a project, specifically mentioning that another person, Maggie Oates, is also working on the same project. The comment is informal and descriptive, and it does not contain any technical or philosophical information. It primarily serves as a notification or confirmation that both parties are aware of each other's work, which could be relevant to a use case analysis in software development or research settings."
  },
  {
    "id": 2064922732,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/74",
    "created_at": "2024-04-18T18:48:04Z",
    "updated_at": "2024-04-18T18:48:04Z",
    "body": "We can address this issue as part of #73.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides specific information about an issue (the ability to address it through #73) and asks for input or clarification. It does not provide any context, propose a solution, or request assistance outside of addressing the specific issue being discussed in the given number."
  },
  {
    "id": 2067092891,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/74",
    "created_at": "2024-04-19T18:31:36Z",
    "updated_at": "2024-04-19T18:31:36Z",
    "body": "That works for me!",
    "user": "hober",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "philosophical",
    "reason": "This comment expresses satisfaction and approval of an action (the code or functionality working as intended), but it does not provide any specific information that would require further analysis or discussion."
  },
  {
    "id": 2067110329,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/73",
    "created_at": "2024-04-19T18:45:11Z",
    "updated_at": "2024-04-19T18:45:11Z",
    "body": "Per @hober in #74:\r\n\r\n> \u00a75 should end after the sentence \"For additional details on legal effects, consult the explainer.\"",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive criticism or improvement suggestions to the code, specifically regarding the organization of a section of text. It does not relate to a use case, feature request, administrative task, conclusion/resolution, or philosophical discussion."
  },
  {
    "id": 2104763867,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/51",
    "created_at": "2024-05-10T15:00:02Z",
    "updated_at": "2024-05-10T15:00:02Z",
    "body": "A complication has come up in the draft text of the APRA that is not elaborated on here. A single privacy law would have two different global opt outs that could (and maybe should) function independently. This is more support that we should expand the definition to >1 bit.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment expresses a suggestion for an expansion of the current definition of \"opt-in\" or \"opt-out\", specifically mentioning a need for two distinct global opt-outs, which aligns with the concept of a feature request."
  },
  {
    "id": 2115215207,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/73",
    "created_at": "2024-05-16T13:13:31Z",
    "updated_at": "2024-05-16T13:13:31Z",
    "body": "One point to elaborate on in the explainer is the default situation under various laws (e.g., that selecting a privacy-preserving browser, such as Brave or Firefox, qualifies as an active and deliberate choice and not as a default choice).\r\n\r\n(cc'ing @pes10k) ",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on the explainer, specifically pointing out that the context in which privacy-preserving browsers are used is different from how they are considered defaults, and it suggests clarifying this point for clarity."
  },
  {
    "id": 2134998481,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/76",
    "created_at": "2024-05-28T11:35:48Z",
    "updated_at": "2024-05-28T11:35:48Z",
    "body": "What is this? And why are you randomly approving PRs in my repo?",
    "user": "ReenigneArcher",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "administrative",
    "reason": "This comment appears to be an administrative message intended to provide information or clarification on the approval process for pull requests (PRs) in a repository. It does not request anything nor provides feedback, but rather serves as a notification about how PRs are being handled."
  },
  {
    "id": 2391757597,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/73",
    "created_at": "2024-10-03T15:48:06Z",
    "updated_at": "2024-10-03T15:48:06Z",
    "body": "I created PR #81 to try to address this.",
    "user": "j-br0",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "The comment is asking for feedback on a technical issue (a specific change) related to the code or software, indicating that it's meant to provide constructive criticism."
  },
  {
    "id": 2417987750,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/80",
    "created_at": "2024-10-16T21:20:59Z",
    "updated_at": "2024-10-16T21:20:59Z",
    "body": "When site-specific arrangements override universal GPC signals will be a question of law. Both California and Colorado, for example, have requirements for when consent to override a previous opt-out is deemed to be valid.\r\n\r\nI have no objection noting in the spec and/or the explainer that it is possible that specific consent may override a GPC signal, but I would want to also point to the fact that jurisdictions that have rules for when GPC is valid may also have rules for when GPC may be disregarded (which is probably best done in the explainer).",
    "user": "j-br0",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed feedback about a technical aspect of the system, specifically how site-specific arrangements can override universal GPC signals. It suggests that there are potential inconsistencies and complexities related to this issue that may need to be addressed in the specification or explainer."
  },
  {
    "id": 2450536015,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2024-10-31T18:14:16Z",
    "updated_at": "2024-10-31T18:14:16Z",
    "body": "Given widespread GPC deployment and no further discussion here we will move forward for now without a structured header.",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback about the current state of a project or system, specifically regarding the use of Global Priority Control (GPC) in its deployment. It suggests an improvement by mentioning that there should be a \"structured header\"."
  },
  {
    "id": 2454156518,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2024-11-04T09:06:38Z",
    "updated_at": "2024-11-04T09:06:38Z",
    "body": "What constitutes widespread deployment? How many browser engines are shipping an implementation? Just because there has been no further discussion doesn't invalidate the concerns raised.",
    "user": "annevk",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "This comment is expressing dissatisfaction about certain concerns raised previously, implying that some issues were not fully addressed or discussed. The commenter does not provide new information but rather reiterates their objections to a feature or deployment decision. This suggests that the issue is more of a philosophical one (e.g., whether the approach should be maintained) than an administrative or technical issue that needs to be resolved immediately, and hence it could also be classified as a Feature Request."
  },
  {
    "id": 2454644542,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/6",
    "created_at": "2024-11-04T12:54:46Z",
    "updated_at": "2024-11-04T12:54:46Z",
    "body": "This has been deployed as it is now for several years and is acted upon by [many sites](https://well-known.dev/?q=resource%3Agpc+gpc_support%3Atrue+is_base_domain%3Atrue#results) (and this is just those that use the .well-known resource, which it optional). Changing the header now would break most of that content (I know for a fact that it would break nytimes.com for instance) in a way that would turn those sites from complying with the law to breaking the law.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "feature_request",
    "reason": "The comment is asking for the feature to be changed, which is typically classified as a request or suggestion for improvement. This type of feedback is often necessary to identify and address issues that may cause problems in the future."
  },
  {
    "id": 2462901507,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/35",
    "created_at": "2024-11-07T18:03:26Z",
    "updated_at": "2024-11-07T18:03:26Z",
    "body": "My view is that the GPC is web spec. We're defining what the control signal should do at a minimum. It's independent of any laws but we should use those as an informative source for us setting what we believe should be the minimums.",
    "user": "rinchen",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment discusses a specific technical aspect (the GPC) and its relationship to other standards or regulations (laws), indicating that it is related to the definition of the use case for this standard. The comment also expresses an opinion on how the control signal should be set, suggesting that it may influence the implementation or behavior of the standard."
  },
  {
    "id": 2491875644,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/82",
    "created_at": "2024-11-21T17:40:23Z",
    "updated_at": "2024-11-21T17:40:23Z",
    "body": "Discussed adding language around these lines to the introduction in our most recent meeting. It was suggested we may want to reference https://w3ctag.github.io/privacy-principles/ ",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical advice and suggestions for improvement, which falls under the category of Technical Feedback."
  },
  {
    "id": 2491879754,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/83",
    "created_at": "2024-11-21T17:42:29Z",
    "updated_at": "2024-11-21T17:42:29Z",
    "body": "Sounds like there may be agreement here on clarifying the terminology, and also that removing a lot of the legal implications language might decrease the potential conflicts here. Justin to propose a small change as needed.",
    "user": "npdoty",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "use_case",
    "reason": "The comment is a suggestion or proposal from Justin for making a change in the conversation based on the tone (agreement) and context. It's a recommendation rather than providing technical feedback, suggesting it fits into the \"Use Case\" category."
  },
  {
    "id": 2491881418,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/83",
    "created_at": "2024-11-21T17:43:16Z",
    "updated_at": "2024-11-21T17:43:16Z",
    "body": "In the PATWG's charter we talk about \r\n\r\n> Ways in which new features might enable inappropriate processing include (but are not limited to) enabling of [cross-site or cross context recognition ](https://www.w3.org/TR/privacy-principles/#dfn-cross-site-recognition)of users or enabling [same-site or same-context recognition ](https://www.w3.org/TR/privacy-principles/#dfn-same-site-recognition)of users across the clearing of state.\r\n\r\nis that maybe the type of language we want to specify here with the same supporting language?",
    "user": "AramZS",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on the language and terminology used in a technical document, specifically suggesting alternative phrases or words to improve clarity and consistency."
  },
  {
    "id": 2491900962,
    "issue_url": "https://api.github.com/repos/w3c/gpc/issues/84",
    "created_at": "2024-11-21T17:52:37Z",
    "updated_at": "2024-11-21T17:52:37Z",
    "body": "I will take a shot at this based on the [Self-Review Questionnaire: Security and Privacy](https://w3ctag.github.io/security-questionnaire/).",
    "user": "SebastianZimmeck",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/GPC",
    "classification": "technical_feedback",
    "reason": "This comment appears to be providing constructive feedback or suggestions related to security and privacy, which falls under the category of technical feedback."
  },
  {
    "id": 1969205691,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/2",
    "created_at": "2024-02-28T15:16:43Z",
    "updated_at": "2024-02-28T15:16:43Z",
    "body": "Trying to take a crack at #3",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment is providing constructive feedback on a specific attempt, indicating that it needs improvement or refinement. It is not related to the use case, feature request, administrative aspect, conclusion/resolution, philosophical discussion, or unknown category."
  },
  {
    "id": 1969284901,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/4",
    "created_at": "2024-02-28T15:53:38Z",
    "updated_at": "2024-02-28T15:53:38Z",
    "body": "One solution: add to the Credential Manager API to allow a \"if this interface Credential is present, remove this other interface Credential\". This may also be done as a non-normative recommendation of this Credential type to not be included in the Credential Chooser if FedCM is there.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment suggests adding an additional feature to the Credential Manager API that allows users to exclude one credential from the selector process when using FedCM, while also providing a non-normative recommendation for excluding certain types of credentials in this specific scenario."
  },
  {
    "id": 1969302782,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/4",
    "created_at": "2024-02-28T16:01:48Z",
    "updated_at": "2024-02-28T16:01:48Z",
    "body": "Another solution: infer a CrossSiteCookieAccessCredential request from a FedCM credential's request. The IDP origin should be easy to pick out and the \"auth-link\" can be taken from the equivalent field in a FedCM request that allows a not-yet logged in IDP to work.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment is suggesting an improvement or alternative solution for accessing credentials, implying it's meant to enhance or modify the functionality of something (likely a system or framework). It also provides specific details about how the feature could be implemented."
  },
  {
    "id": 1978876008,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/5",
    "created_at": "2024-03-05T14:17:19Z",
    "updated_at": "2024-03-05T14:17:19Z",
    "body": "One solution would be to include a link tag, well-known resource, or uri in the request to allow a domain to show up for the redirect case. This would require a cross-origin request to the IDP before UI as shown up though. However if it is well-known we would mitigate the harms from link decoration. ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides an alternative solution, suggesting that including links in requests to allow a domain to show up for redirects could potentially work. It also addresses potential security concerns and proposes a mitigation strategy."
  },
  {
    "id": 1978886511,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/5",
    "created_at": "2024-03-05T14:22:24Z",
    "updated_at": "2024-03-05T14:22:24Z",
    "body": "I find this overall a fundamental challenge of supporting the cold redirect case. \r\n\r\nTo show an IDP origin in UI we should have IDP opt-in. To have IDP opt-in we need to send them a request (if we haven't been to the page before). To send them a request we need user opt-in. To have user opt-in we need to show the IDP origin. This is a cycle!\r\n\r\nI believe the weakest point of the cycle is \"To send them a request we need user opt-in.\" Especially since the request is partitioned. This means that the solution space above would be the best way to break the cycle. ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive criticism and suggests a potential workaround by suggesting a partitioned approach for optimizing the IDP origin, rather than relying on a user opt-in mechanism which may not always provide reliable or relevant data."
  },
  {
    "id": 2009431261,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/4",
    "created_at": "2024-03-20T12:15:42Z",
    "updated_at": "2024-03-20T12:15:42Z",
    "body": "Another solution: make this an operating mode of FedCM, sharing the \"identity\" namespace. It will require the spec to monkey patch FedCM and will only be used when there is no `configURL` argument.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment describes a specific scenario or use case for using another solution (FedCM) in an operating mode, which is not typically associated with administrative purposes. It does not explicitly mention the purpose of FedCM but suggests it can be used when no `configURL` argument is provided, implying it's related to configuration management."
  },
  {
    "id": 2009449517,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/7",
    "created_at": "2024-03-20T12:26:13Z",
    "updated_at": "2024-03-20T12:26:13Z",
    "body": "To make this simpler we should make the account info have an expiration option and an ability to delete the Credential.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment is requesting a feature or modification to an existing service, which falls under the category of a feature request. The comment is suggesting changes to be made to improve usability or functionality without necessarily providing any feedback on how to implement them."
  },
  {
    "id": 2009456695,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/4",
    "created_at": "2024-03-20T12:30:15Z",
    "updated_at": "2024-03-20T12:30:15Z",
    "body": "A complication of that last solution is that we need to make sure the button-flow and navigation aspects of this proposal are coherent. This is not insurmountable. We want to only have one argument and have similar user journeys for each.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive criticism, specifically about the coherence of a proposed solution in relation to its underlying technical implementation. It highlights potential issues that may impact usability and functionality, which is typically classified as a technical feedback."
  },
  {
    "id": 2021152996,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/8",
    "created_at": "2024-03-26T18:10:14Z",
    "updated_at": "2024-03-26T18:10:14Z",
    "body": "Actually, I don't think the `connected accounts set` makes sense as a trust signal for this Credential, since it can be stored and collected. This permits finer control over where storage access can be granted. \r\n\r\nThe key thing I think should be preserved here is whether or not the domain is [preventing silent access](https://w3c.github.io/webappsec-credential-management/#abstract-opdef-prevent-silent-access). If a site goes out of its way to call `navigator.credentials.preventSilentAccess()`, then we shouldn't be using things from the credential store without a dialog.\r\n\r\nWe could add that as a constraint to the proposal from Google: https://github.com/explainers-by-googlers/storage-access-for-fedcm\r\n\r\nor we could match that explainer to this syntax.\r\n\r\n@johannhof - this was really your issue - thoughts?\r\n\r\n ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment is suggesting an improvement or addition to the existing proposal regarding the use of `navigator.credentials.preventSilentAccess()`, which seems to be a specific implementation detail. It's not strictly related to trust signals or use cases, but rather provides additional information about how the credential store should be used."
  },
  {
    "id": 2021171607,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/7",
    "created_at": "2024-03-26T18:20:26Z",
    "updated_at": "2024-03-26T18:20:26Z",
    "body": "Since this is a credential that can be \"collected\" it should have a (CredentialUserData)[https://w3c.github.io/webappsec-credential-management/#credentialuserdata-mixin] mixin to provide this. We get it for free. \r\n\r\nDeletion and expiration are actually a little harder. Deletion is not currently supported in the WebCredAPI. Expiration can be done as a per-credential-feature though. And that could be used to do a kind of ad-hoc deletion. Let's do that for now.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment requests an addition to the credential management system, specifically regarding the deletion and expiration of credentials."
  },
  {
    "id": 2047390797,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/8",
    "created_at": "2024-04-10T12:16:11Z",
    "updated_at": "2024-04-10T12:16:11Z",
    "body": "That makes sense to me, I think. I filed the issue above to track this.",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides technical information and context about an issue being tracked, which is characteristic of technical feedback."
  },
  {
    "id": 2093177438,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/14",
    "created_at": "2024-05-03T14:50:50Z",
    "updated_at": "2024-05-03T14:50:50Z",
    "body": "Does this still look good to you? @johannhof ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment is providing feedback on the visual appearance of an image or content, suggesting that it might not be visually appealing."
  },
  {
    "id": 2093191462,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/1",
    "created_at": "2024-05-03T14:57:41Z",
    "updated_at": "2024-05-03T14:57:41Z",
    "body": "This actually isn't a problem, and we may graduate to a PR on a WG repo",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment provides feedback about an issue or situation (the person is using the tool in a non-technical way), but it does not directly ask for something that would require technical expertise. Instead, it expresses skepticism about whether this should be considered a problem to be addressed, implying a discussion rather than a request for a change."
  },
  {
    "id": 2093192110,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/14",
    "created_at": "2024-05-03T14:58:03Z",
    "updated_at": "2024-05-03T14:58:03Z",
    "body": "This also solves #8 ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment appears to provide information about solving an existing issue (#8), but it does so in a concise manner without providing further details. The tone seems neutral, indicating that the feedback is aimed at improving or fixing something rather than proposing a new feature, requesting one, or resolving a philosophical aspect of the system."
  },
  {
    "id": 2095746946,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/14",
    "created_at": "2024-05-06T11:00:46Z",
    "updated_at": "2024-05-06T11:00:46Z",
    "body": "This still seems good - I will have to think about the utility of the pending requests a little more but I'm okay keeping it in the explainer for now :)",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment is expressing an intention or suggestion regarding a potential feature that has not yet been implemented. It implies providing additional functionality (pending requests) to an existing system, which falls under the category of feature requests."
  },
  {
    "id": 2100399438,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/8",
    "created_at": "2024-05-08T11:48:49Z",
    "updated_at": "2024-05-08T11:48:49Z",
    "body": "I think this is resolved, but leaving open until we discuss in the CG.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment indicates that there's an ongoing issue (resolved), but it does not explicitly state what the use case or problem being discussed. It seems to be a placeholder for further discussion and clarification."
  },
  {
    "id": 2110326689,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/19",
    "created_at": "2024-05-14T14:01:39Z",
    "updated_at": "2024-05-14T14:01:39Z",
    "body": "I'll rename both dynamic_via_cors and origin_allowlist to be in relation to their purpose. The following paragraph would replace the start of \"Identity Provider API, Creating a Credential\" and gives their new names and reasoning.\r\n\r\n>The identity provider needs to specify at least one of two arguments when creating the credential (`effectiveOrigins` or `effectiveQueryURL`) to tell the browser which origins the credential is [effective](https://w3c.github.io/webappsec-credential-management/#credential-effective) for. A list of origins may be provided to `effectiveOrigins` if the list of relying parties may be made public and is known ahead of time. If the list of relying parties is dynamic or private, the identity provider may provide an HTTP-endpoint that will respond successfully to a CORS request from the relying party with `Sec-Fetch-Dest: web-identity` if the relying party can use the credential at that time.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment is suggesting changes to improve the functionality of the Identity Provider API, specifically by allowing the provider to specify more control over which origins are considered effective for a given credential. This implies an enhancement or improvement to existing functionality."
  },
  {
    "id": 2110701718,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/21",
    "created_at": "2024-05-14T16:55:09Z",
    "updated_at": "2024-05-14T16:55:09Z",
    "body": "This can't be tested yet, unfortunately. I will update the group once it can!",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment is providing feedback on an untested feature or functionality, suggesting that it cannot be verified at this time and therefore warrants further testing before implementation."
  },
  {
    "id": 2110822452,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/21",
    "created_at": "2024-05-14T18:05:49Z",
    "updated_at": "2024-05-14T18:05:49Z",
    "body": "No worries. Thanks!",
    "user": "philsmart",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "administrative",
    "reason": "This comment is simply a polite and appreciative expression of gratitude from someone who has been assisted or helped, indicating that it falls under the administrative category of providing support and assistance to others."
  },
  {
    "id": 2111315725,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/19",
    "created_at": "2024-05-14T23:19:58Z",
    "updated_at": "2024-05-14T23:19:58Z",
    "body": "Sounds reasonable.  Perhaps..\r\n\r\n> [...] the identity provider may provide an HTTP endpoint *with `effectiveQueryURL`*. That HTTP endpoint needs to respond successfully [...]",
    "user": "martinthomson",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "administrative",
    "reason": "No reason provided."
  },
  {
    "id": 2130143124,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/22",
    "created_at": "2024-05-24T18:33:35Z",
    "updated_at": "2024-05-24T18:33:35Z",
    "body": "Taking a common string to make any credential that is stored with it effective would be great!",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment is requesting the addition of an ability to use a specific type of string as a credential, which suggests a practical and functional improvement. This aligns with the description \"Taking a common string to make any credential that is stored with it effective.\""
  },
  {
    "id": 2140314630,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-30T17:11:30Z",
    "updated_at": "2024-05-30T17:11:30Z",
    "body": "Con: this rules out the enterprise use case of many IDPs on a single site.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment is expressing an opinion that the current rule is preventing users from taking advantage of its intended purpose, which is to facilitate the sharing and collaboration among multiple independent data providers (IDPs) operating on a single site. This implies it's related to the functionality or usability aspect of the rule set, making it a use case-related comment."
  },
  {
    "id": 2140400273,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-30T17:32:24Z",
    "updated_at": "2024-05-30T17:32:24Z",
    "body": "Con: this could be circumvented for widget mode by collecting with \"silent\" mediation and opening a popup anyway.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment is suggesting an alternative approach to implement the feature requested, indicating that it may not be feasible or desirable as initially thought. It proposes finding an easier way around the issue rather than directly implementing the solution."
  },
  {
    "id": 2140402291,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-30T17:33:02Z",
    "updated_at": "2024-05-30T17:33:02Z",
    "body": "Pro: this more closely matches FedCM's discovery pattern for button mode",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback about a potential change or improvement to a piece of software, specifically the behavior of FedCM in button mode. It suggests a correction or enhancement that could be implemented by someone who is familiar with the software's functionality."
  },
  {
    "id": 2140404574,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-30T17:33:44Z",
    "updated_at": "2024-05-30T17:33:44Z",
    "body": "Pro: This provides a more informative UI to the user in the not-yet-logged-in use case",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment is providing feedback on how to improve the user experience for someone who hasn't yet logged in, specifically highlighting an improvement to the User Interface. This type of comment focuses on enhancing or improving a specific aspect of the system based on its current state and intended functionality."
  },
  {
    "id": 2140487672,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-30T17:59:56Z",
    "updated_at": "2024-05-30T18:01:35Z",
    "body": "Important questions:\r\n\r\nShould we make the navigation gated by consent or constrain the navigation?\r\nShould the prompt be before or after the login popup is shown?\r\nWhich is worse, a \"your account on auth.example.com\" prompt for not-yet-logged-in-users or introducing a hard requirement on a site-level .well-known and making us keep the requestParameters function?\r\n",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comments appear to be seeking feedback from users on how to improve the login process. They are asking about navigation options, prompt timing, and potential security concerns related to requiring user authentication on non-logged-in sites or introducing hard requirements for site-wide authentication."
  },
  {
    "id": 2140490998,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-30T18:00:57Z",
    "updated_at": "2024-05-30T18:00:57Z",
    "body": "Con: no annotations allowed on the login url, so we would need to add request data parameters and could not remove the `pendingRequests` call",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "No reason provided."
  },
  {
    "id": 2140527666,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/24",
    "created_at": "2024-05-30T18:11:56Z",
    "updated_at": "2024-05-30T18:11:56Z",
    "body": "Actually, we don't even need the DNS option because this is a per-origin .well-known",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment is providing feedback on how to resolve a specific issue (the use of the DNS option for per-origin .well-known resources), indicating that it's related to functionality and workflow. It also mentions an actual implementation or scenario, which further supports this classification."
  },
  {
    "id": 2140586575,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/24",
    "created_at": "2024-05-30T18:28:48Z",
    "updated_at": "2024-05-30T18:28:48Z",
    "body": "But more generic opt-in mechanisms would be worth having. Also, we can avoid forcing a content-type",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment suggests an improvement or addition to the current system, specifically recommending more generalizable opt-in mechanisms and avoiding requiring a specific content type for every interaction. It implies that a change would be beneficial and is not related to technical feedback (since it's more about suggesting improvements), use cases (since it describes a proposed solution), administrative (since it mentions a procedure or action), conclusion/resolution (since it concludes with \"Resolution\"), or philosophical (since it doesn't have a clear, abstract nature)."
  },
  {
    "id": 2140592037,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-30T18:30:13Z",
    "updated_at": "2024-05-30T18:30:13Z",
    "body": "Con: We couldn't even have pendingRequests! we would need to have the IDP store all potential credentials on login, not knowing the RP. I don't think this works, because we need to provide a token on store.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment expresses a technical concern about implementing a system that stores pending requests (likely user authentication and authorization) in an IDP (Identity Provider), without being able to determine the Remote Procedure Call (RPC) identity of the requesting resource. The commenter highlights the potential security risks and suggests that storing credentials without token-based authentication would be impractical, as it would require the IDP to store sensitive information without a clear understanding of the RPC identity."
  },
  {
    "id": 2140663440,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/23",
    "created_at": "2024-05-30T18:48:30Z",
    "updated_at": "2024-05-30T18:48:30Z",
    "body": "If we do  #27, then we can similarly rely on URL parameters in the loginURL and close this",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback about how to improve a specific action or process (relying on URL parameters for login functionality). It offers suggestions for improvement without being too opinionated or judgmental, which is typical of technical feedback."
  },
  {
    "id": 2142012525,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-31T12:38:07Z",
    "updated_at": "2024-05-31T12:38:07Z",
    "body": "@samuelgoto : I think there may be a critical issue here. The IDP needs to know who the RP is when minting a credential under our model. That was made to work (and opened up the timing attack) in FedCM by splitting out the token and accounts endpoints and providing minimal credential and referrer information to them. This model has a single round trip, so I don't think that a RP-blind loginURL works. Thoughts?",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The commenter is suggesting a change to the current implementation of the Identity Provider (IDP) to address a critical issue related to user authentication in the Reputation Platform (RP). They are proposing a modification to the login URL that would prevent RP-blind login attempts. This suggests that the comment is focused on improving or enhancing the functionality of the system, specifically addressing an operational concern with the current design."
  },
  {
    "id": 2142292449,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-31T14:09:56Z",
    "updated_at": "2024-05-31T14:09:56Z",
    "body": "> The IDP needs to know who the RP is when minting a credential under our model\r\n\r\nWhat for? Wasn't it the case that the IdP could `store` a credential while logging in the user, before the `get` flow gets initiated by the RP?",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment requests the addition of identifying the RP (Right-Party) when minting a credential under an Identity Provider model, which is a functional requirement that aligns with the purpose of the request. This requires technical assistance to implement and manage such a feature within the framework of the system."
  },
  {
    "id": 2142379715,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-31T14:33:03Z",
    "updated_at": "2024-05-31T14:33:03Z",
    "body": "I was assuming that the credential's `token` may need some RP specific information in it in some use cases, as in indie auth's use of it.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback on a technical aspect (credential token) by suggesting an improvement (RP-specific information). This is typically classified as a technical feedback."
  },
  {
    "id": 2142450762,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-31T14:59:00Z",
    "updated_at": "2024-05-31T14:59:00Z",
    "body": "Isn't the `token` something that is produced **after** a browser prompt, through the `id assertion endpoint` or through the SAA auto grant?",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment provides technical details about how the token (or ID assertion) is generated in relation to a browser prompt and SAA auto-grant."
  },
  {
    "id": 2142512287,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-31T15:33:44Z",
    "updated_at": "2024-05-31T15:33:44Z",
    "body": "I have been treating the IDP page as the `id assertion endpoint` (as well as account chooser), so that you can use a credential obtained via Lightweight FedCM the same as one from regular FedCM- otherwise there can be no `token` member on the lightweight credential. \r\n\r\nAnother reason to expose the RP is that this allows the authorization flow to work in the same IDP-controlled window.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The commenter provides detailed technical explanations of a particular scenario or implementation, offering suggestions for improvement and clarification. They also provide specific examples and rationales behind their recommendations, demonstrating their expertise in the topic at hand."
  },
  {
    "id": 2142522501,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-05-31T15:40:07Z",
    "updated_at": "2024-05-31T15:40:07Z",
    "body": "I'm not sure I'm following you ... Indie Auth works fine with a login-url that is RP agnostic in the well known file ... And it could work equally well with a light weight credential store AND and id assertion endpoint.",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment expresses dissatisfaction with how Indie Auth handles authentication requests, suggesting there should be better flexibility or support for different types of credentials and authentications methods. This is a user concern that can lead to more users wanting the solution improved."
  },
  {
    "id": 2145883230,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/28",
    "created_at": "2024-06-03T18:41:08Z",
    "updated_at": "2024-06-03T18:41:08Z",
    "body": "Thanks!",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment is providing helpful information that suggests something went well or is working as intended, typically from someone who has provided assistance."
  },
  {
    "id": 2243397149,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-07-22T16:48:54Z",
    "updated_at": "2024-07-22T16:48:54Z",
    "body": "Actually reopening as this is now an open question.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment expresses concern and inquiry about the status of an ongoing or proposed feature, indicating that it is related to the use (or functionality) of a software application."
  },
  {
    "id": 2243398212,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/30",
    "created_at": "2024-07-22T16:49:33Z",
    "updated_at": "2024-07-22T16:49:33Z",
    "body": "This is actually completely fine by CredMan definitions.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment appears to be related to testing or approval procedures, as it references the \"CredMan definitions\" likely referring to the Credit Management Association (CMA) definitions of a use case."
  },
  {
    "id": 2243399117,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/22",
    "created_at": "2024-07-22T16:50:05Z",
    "updated_at": "2024-07-22T16:50:05Z",
    "body": "Covered by #31",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical information to an author, mentioning that they have covered certain parts of their document or code. The tone suggests that the reviewer is asking for clarification on specific details rather than offering a new feature or request, making it a technical feedback."
  },
  {
    "id": 2271631673,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-08-06T15:58:53Z",
    "updated_at": "2024-08-06T15:58:53Z",
    "body": "As you mentioned, this is equivalent to window.open from a privacy perspective.\r\n\r\nBut my question is, window.open may eventually get some kind of bounce tracking protection (or maybe already does, in Firefox?). The use here, however, has to bypass any such protection. So opening this popup without user action seems potentially problematic, without some kind of protection?",
    "user": "cbiesinger",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "philosophical",
    "reason": "The comment is raising a philosophical question about the ethics of exploiting tracking protections like window.open in order to access certain functionality without user consent. It's not providing technical feedback or asking for specific features, but rather questioning the morality and implications of this action."
  },
  {
    "id": 2271798580,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/26",
    "created_at": "2024-08-06T17:32:43Z",
    "updated_at": "2024-08-06T17:32:43Z",
    "body": "Bounce tracking protection is actually easy to prevent from firing here because the popup only needs to get user interaction to prevent it from clearing state.\r\n\r\nThe more general case of navigational tracking protection is the hard problem, however identifying what is and isn't navigational tracking in the first place is a hard problem that there are no general proposals for at this time. ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "philosophical",
    "reason": "The comment discusses philosophical questions about how to define navigation and tracking, which suggests an examination of deeper concepts rather than practical or technical issues."
  },
  {
    "id": 2299093051,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/34",
    "created_at": "2024-08-20T15:07:06Z",
    "updated_at": "2024-08-20T15:07:06Z",
    "body": "I'll review this in a bit but also tagging @ekovac :)",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment appears to be providing constructive feedback or suggestions for improvement, typically related to the technical details of a codebase, system, or software. The presence of the \"@\"mention suggests that the commenter wants their input acknowledged and potentially incorporated into the development process."
  },
  {
    "id": 2305434788,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/35",
    "created_at": "2024-08-22T18:58:25Z",
    "updated_at": "2024-08-22T18:58:25Z",
    "body": "The alternative of course is to update the demonstration page to match the explainer, but it's unclear which one is correct :)",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "This comment is asking for clarification on how to update two different pieces of content (the \"demonstration page\" and the \"explainer\") that appear to be related or serve the same purpose. It requires understanding the context and relationships between these elements, which falls under the category of use cases."
  },
  {
    "id": 2305441008,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/35",
    "created_at": "2024-08-22T19:02:20Z",
    "updated_at": "2024-08-22T19:02:20Z",
    "body": "Both should be supported IMO to be consistent with other Credential types, e.g. for PasswordCredential we have [create](https://w3c.github.io/webappsec-credential-management/#dom-passwordcredential-create-slot) and [new](https://w3c.github.io/webappsec-credential-management/#dom-passwordcredential-passwordcredential-data).",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment is providing a specific example of how the credential type should be implemented, which aligns with using cases as part of the standardization process for credential types in Credential Management."
  },
  {
    "id": 2305481472,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/35",
    "created_at": "2024-08-22T19:29:07Z",
    "updated_at": "2024-08-22T19:29:07Z",
    "body": "Closing this out; clarifying this probably doesn't need to be in the explainer.",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "philosophical",
    "reason": "This comment appears to be expressing an opinion or perspective on whether something needs to be included in an explanatory section, rather than providing a practical solution, soliciting feedback, detailing requirements, or discussing a specific feature. It also touches on the idea that sometimes clarifying information may not be necessary, which is a philosophical viewpoint."
  },
  {
    "id": 2306908370,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/35",
    "created_at": "2024-08-23T11:37:26Z",
    "updated_at": "2024-08-23T11:37:26Z",
    "body": ":+1:, but it is good a good catch. Something like the `webidl` is maybe a little out of scope for the explainer but would resolve this confusion. I'll think about including it.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment expresses an idea for improving or expanding the code, suggesting a potential addition to improve clarity and precision, which falls under the category of providing additional features or clarifications for users."
  },
  {
    "id": 2306910389,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/35",
    "created_at": "2024-08-23T11:38:49Z",
    "updated_at": "2024-08-23T11:38:49Z",
    "body": "@ekovac : also, FYI: [here is Firefox's webidl!](https://searchfox.org/mozilla-central/rev/a85b25946f7f8eebf466bd7ad821b82b68a9231f/dom/webidl/IdentityCredential.webidl)\r\n\r\n",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment provides a technical information or resource regarding Firefox's webIDL, which is related to the development and maintenance of its APIs and documentation."
  },
  {
    "id": 2307053359,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/36",
    "created_at": "2024-08-23T13:03:54Z",
    "updated_at": "2024-08-23T13:03:54Z",
    "body": "Closes  #32.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical support for an issue (Closes #32) and is likely related to fixing or resolving it."
  },
  {
    "id": 2315212893,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/37",
    "created_at": "2024-08-28T12:40:35Z",
    "updated_at": "2024-08-28T12:40:35Z",
    "body": "Good catch! My thought was that the UI would revert to the state as if the ui hint never existed.\r\n\r\nThat leads to you making a good point that displaying multiple accounts from the same IDP without any kind of UI hint is a challenge for the browser.\r\n\r\nCurrently Firefox naively shows all options and they look identical. I would probably want to define one to pick and display, leaving the others out of the UI. What are your thoughts on that/how to pick one? \r\n\r\n> Alternatively, does the expiration actually remove the stored credential entirely, thereby requiring the user to go through the Scenario 1 flow?\r\n\r\nNo, it should just be the hint that expires.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides a constructive analysis of a technical issue or potential improvement in Firefox. It offers suggestions and insights into how to improve the current behavior, which is typically classified as \"Technical Feedback\"."
  },
  {
    "id": 2318346037,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/37",
    "created_at": "2024-08-29T16:46:08Z",
    "updated_at": "2024-08-29T16:46:08Z",
    "body": "I'm actually curious what regular FedCM does in the case where there are multiple accounts with no name or picture...",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment is asking for clarification on how regular Fedora Core Multimedia (FedCM) handles cases where a user has no name and/or picture associated with their account. The commenter is seeking technical information to help them understand the behavior of the software, which falls under the category of providing assistance with using or troubleshooting the system."
  },
  {
    "id": 2318396924,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/37",
    "created_at": "2024-08-29T17:06:21Z",
    "updated_at": "2024-08-29T17:06:21Z",
    "body": "If required fields are missing we just fail the request, but you can maybe work around that with the magic of unicode, in which case the user would likely be confused...\r\n\r\nHowever, you'd still have the email to disambiguate.",
    "user": "cbiesinger",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "This comment describes a specific situation (missing required fields) and proposes a solution (disabling the functionality for users who don't respond). It appears to be related to user experience and how it can be improved."
  },
  {
    "id": 2318404404,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/37",
    "created_at": "2024-08-29T17:09:39Z",
    "updated_at": "2024-08-29T17:09:39Z",
    "body": "Ah, got it- given name and picture are the only optional ones there. Thanks Christian!",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback about a specific implementation or feature of an application. The user is giving technical guidance on how to enhance their experience with the software, focusing on the specifics of the system rather than making general comments or expressing a personal opinion."
  },
  {
    "id": 2331712582,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
    "created_at": "2024-09-05T13:39:32Z",
    "updated_at": "2024-09-05T13:39:32Z",
    "body": ">It could be some sort of encoded value such as a JSON.stringify\u2019d object containing additional information about the user that the IdP wants to provide to the RP, which may include one or both of the above two options.\r\n\r\nThis is the most useful bit in my mind, however it may be able to be communicated out of band as we already assume that would be the case. This just allows some more dynamic control from the IDP rather than it being tied to whatever is shipped in the RP. \r\n\r\nI agree that we should solve it soon though! Marked as agenda+f2f for TPAC.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment discusses a potential use case related to providing additional information about the user, which is likely tied to authentication or authorization within an Identity Provider (IDP) and Resource Provider (RP). It suggests that this information could be encoded in a value such as JSON, allowing for more dynamic control rather than being limited by what's shipped."
  },
  {
    "id": 2332142825,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
    "created_at": "2024-09-05T16:15:22Z",
    "updated_at": "2024-09-05T16:15:22Z",
    "body": "> I would love to hear your thoughts on this, @bvandersloot-mozilla and @samuelgoto.\r\n\r\nI think `token` is a red herring: I think this question is only occurring because you are `navigator.credentials.store()` something that isn't an [`IdentityCredential`](https://w3c-fedid.github.io/FedCM/#browser-api-identity-credential-interface) (which does indeed have a `token`) but rather an [`IdentityProviderAccount`](https://w3c-fedid.github.io/FedCM/#dictdef-identityprovideraccount) (which doesn't).\r\n\r\nThat is, I think that if you replaced `navigator.credentials.store()` with `navigator.login.setStatus()`, you'd be able to more clearly see \"the job to be done\" by what you are calling `token` here.\r\n\r\nFor example:\r\n\r\n```javascript\r\nnavigator.login.setStatus(\"logged-in\", {\r\n  accounts: [{\r\n    name: \"Sam Goto\",\r\n    photo: \"https://accounts.idp.com/photos/1234.jpg\",\r\n    email: \"goto@chromium.org\"\r\n  }]\r\n});\r\n```\r\n",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment suggests that the `token` is not a necessary or meaningful term in this context, and that using `navigator.login.setStatus()` instead would be more helpful in understanding what is happening. This implies a request to simplify or improve the current implementation by changing the terminology used."
  },
  {
    "id": 2334686942,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
    "created_at": "2024-09-06T19:28:58Z",
    "updated_at": "2024-09-06T19:28:58Z",
    "body": "> Is there a way to maintain UI hint freshness without falling back to heavyweight FedCM?\r\n\r\nI think the answer is: \"yes\" with a \"but\".\r\n\r\nThere are two solutions that I'm aware of:\r\n\r\n- The first involves Web Push. However, by the time that you involve Web Push, you have to spin up a lot of server-side infrastructure.\r\n- The second involves using expiration dates and triggering the \"Sign-in to IdP\" flows to refresh them. That's likely a lot more ergonomical for IdPs, at a small cost for users (with expired hints). \r\n\r\nJust as a data point in case it helps, we heard from IdPs that they have strict freshness requirements (e.g. in the order of hours, not days).\r\n",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment is providing suggestions and alternatives to improve the UI hint system's performance, specifically addressing a technical challenge of maintaining freshness without relying on FedCM."
  },
  {
    "id": 2340928793,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
    "created_at": "2024-09-10T14:07:43Z",
    "updated_at": "2024-09-10T14:07:43Z",
    "body": "That's a good point, Sam! \r\n\r\nBut then when you call `navigator.credentials.get()` what is the `IdentityCredential` like that you get back? Absent a `token`?",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment appears to be suggesting an improvement or a change in the behavior of the browser's credential management system, specifically asking about the return value of the `navigator.credentials.get()` method when no token is provided. The commenter believes that this behavior could be improved for better user experience."
  },
  {
    "id": 2341054953,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
    "created_at": "2024-09-10T14:40:38Z",
    "updated_at": "2024-09-10T14:40:38Z",
    "body": "> I think the answer is: \"yes\" with a \"but\".\r\n\r\nThat's my sense as well.\r\nI think these are two interesting choices for IdPs to have. I'm curious what infrastructure requirements are like for Web Push, as I've never deployed its use to a production environment before.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The commenter is expressing their personal opinion and suggesting improvements or features that may not necessarily align with the main goal of the platform. They also mention potential infrastructure requirements for implementing Web Push in production environments, which falls under technical feedback."
  },
  {
    "id": 2341368775,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
    "created_at": "2024-09-10T16:06:10Z",
    "updated_at": "2024-09-10T16:06:10Z",
    "body": "From the meeting, an alternative would be to allow two new behaviors, depending on how many IDPs are present in the request.\r\n\r\n1. If there is only one, then open the login page if one is provided, as if the credential doesn't exist. \r\n2. If there is more than one, add an optional account chooser that relies upon an IDP-endpoint request to let the user pick a particular account.\r\n\r\n(1) has the downside of maybe facilitating more \"blinking\" popups or redirects.\r\n(2) devolves to an \"IDP chooser\" rapidly for short-lived UI hints.\r\n",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback on how to improve a technical aspect (the implementation of IDPs in the login process), and is written in a clear and specific manner, indicating that it is intended to inform and assist rather than persuade or entertain."
  },
  {
    "id": 2341385591,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
    "created_at": "2024-09-10T16:11:26Z",
    "updated_at": "2024-09-10T16:11:26Z",
    "body": "From the meeting, we will remove the token field and have it be absent on `IdentityCredentials` from Lightweight FedCM.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides specific technical details (removal of a field) as part of a process change, which is typically considered a technical improvement or enhancement. It does not involve discussing the use case, feature request, administrative aspects, conclusion/resolution, or philosophical aspects."
  },
  {
    "id": 2341393580,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/37",
    "created_at": "2024-09-10T16:14:13Z",
    "updated_at": "2024-09-10T16:14:13Z",
    "body": "Closing as duplicate of #40; at the very least the two discussions are closely related and further discussion of this should happen there.",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "administrative",
    "reason": "No reason provided."
  },
  {
    "id": 2341664345,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
    "created_at": "2024-09-10T18:09:30Z",
    "updated_at": "2024-09-10T18:09:30Z",
    "body": "Should I go through, remove the references to the token from the explainer, and send a PR? Or will you take care of that @bvandersloot-mozilla ?",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment is asking for feedback on whether to merge or not to merge changes made by someone else (BVandersloot) into the explainer. The request is focused on the technical aspects, specifically if the changes are feasible and worth merging. The tone of the message is polite but slightly critical."
  },
  {
    "id": 2341849979,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/39",
    "created_at": "2024-09-10T19:26:13Z",
    "updated_at": "2024-09-10T19:26:13Z",
    "body": "I was planning to, but would be happy to review a PR for it :) Let me know which you prefer",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "philosophical",
    "reason": "The comment is more of a statement expressing the author's willingness to participate in reviewing a project rather than providing constructive feedback or specific details about the code. It does not seem to offer any actual insights, suggestions, or criticisms that would be useful for improving the PR."
  },
  {
    "id": 2344613694,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
    "created_at": "2024-09-11T20:11:05Z",
    "updated_at": "2024-09-11T20:11:05Z",
    "body": "I think option (D) is the most interesting here, but that might quickly devolve into something too complex to achieve the goals of Lightweight FedCM. Option (A) and (B) both \"feel\" fine to me.",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment appears to be a proposal or suggestion for adding a new feature, which is characteristic of a feature request. The speaker seems to be considering an option (D) that might complicate the implementation, but at least has the potential to meet their goals."
  },
  {
    "id": 2349252172,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
    "created_at": "2024-09-13T15:42:32Z",
    "updated_at": "2024-09-13T15:44:12Z",
    "body": "> I think option (D) is the most interesting here, but that might quickly devolve into something too complex to achieve the goals of Lightweight FedCM. Option (A) and (B) both \"feel\" fine to me.\r\n\r\nI agree with this take. The thing that I think might make D work is that putting the token endpoint URL inside of the argument to get() is possible, since it is fetched after the UI. We may even be able to have it auto-refetch on each collection from the credential store too, which would make it very FedCM-token-like. Whether we do that or just give the same token back that was stored probably is up to the details of the OAuth profile for FedCM.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides specific suggestions and ideas about how option (D) could be made more feasible, which aligns with technical feedback."
  },
  {
    "id": 2349301693,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
    "created_at": "2024-09-13T16:08:16Z",
    "updated_at": "2024-09-13T16:26:44Z",
    "body": "Just a couple of comments that may add more clarity here:\r\n\r\n1) `token` can typically either be an `id_token`, an `code`, or a `token` in [OIDC](https://openid.net/specs/openid-connect-core-1_0.html#Authentication) (not an OIDC expert here, probably worth sanity checking), so it is not always a JWT (e.g. it can be an access token). SAML would return something entirely different. So, (C) feels a bit off.\r\n2) `token` is overly (semantically) and unnecessarily (privacy/security wise) restrictive, and there is a proposal to allow the IdP to return some \"arbitrary\" `data` [here](https://github.com/w3c-fedid/idp-registration/issues/13), so that the browser doesn't have to form an opinion on what gets sent back to RPs. I don't know if that makes it more or less like (d).\r\n\r\n> I think option (D) is the most interesting here, but that might quickly devolve into something too complex to achieve the goals of Lightweight FedCM. Option (A) and (B) both \"feel\" fine to me.\r\n\r\nYeah, I tend to agree that (D) seems to be the most \"conceptually consistent\" option: the \"output\" of the IdentityCredential is something that gets created \"by the IdP\". As you noted, In \"full FedCM\", that's something that gets returned in the `id_assertion_endpoint`. \r\n\r\nJust curious: in \"light FedCM\", would it be possible to execute a Javascript callback (maybe using service workers?) that the IdP gets to control to generate a message back to the RP? I have no idea if this would be possible, but I think this might be \"complex on browser engines\" but \"light on developers\".\r\n\r\nFor reference, Mozilla Persona had a \"callback\" that the Identity Provider would get [here](https://github.com/mozilla/id-specs/blob/prod/browserid/index.md#identity-provisioning-flow). I'm not sure how that worked, but seems worth looking.\r\n\r\n> Update: seems like it accomplished some of that by this step (ironically, using well-known files):\r\n>> The user-agent checks https://eyedee.me/.well-known/browserid and determines that eyedee.me supports BrowserID. From this configuration file it determines the provisioning and authentication URLs.\r\n>> The user-agent loads, in an invisible IFRAME, the provisioning URL https://eyedee.me/browserid/provision.html",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "administrative",
    "reason": "The comments provide context and clarification about how IdentityCredential works, particularly regarding its `token` output, which is determined by the Identity Provider (IdP). They also mention a callback mechanism for the IdP to generate a response from the RP. This discussion appears to be related to administrative tasks such as configuring and testing IdentityCredential in various environments."
  },
  {
    "id": 2350051647,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
    "created_at": "2024-09-13T19:52:22Z",
    "updated_at": "2024-09-13T19:52:22Z",
    "body": "> 1. `token` can typically either be an `id_token`, an `code`, or a `token` in [OIDC](https://openid.net/specs/openid-connect-core-1_0.html#Authentication) (not an OIDC expert here, probably worth sanity checking), so it is not always a JWT (e.g. it can be an access token). SAML would return something entirely different. So, (C) feels a bit off.\r\n\r\nAh, thanks for clarifying. And yes, C was definitely not my favorite choice, I included it for completeness :)\r\n\r\n> 2. `token` is overly (semantically) and unnecessarily (privacy/security wise) restrictive, and there is a proposal to allow the IdP to return some \"arbitrary\" `data` [here](https://github.com/w3c-fedid/idp-registration/issues/13), so that the browser doesn't have to form an opinion on what gets sent back to RPs. I don't know if that makes it more or less like (d). \r\n\r\nI think that makes it, in practice, less like (d), especially if the implication is that the IdP would call `n.c.store()` with the `data` object defined on the IdentityCredential it is passing in.\r\n\r\n> Yeah, I tend to agree that (D) seems to be the most \"conceptually consistent\" option: the \"output\" of the IdentityCredential is something that gets created \"by the IdP\". As you noted, In \"full FedCM\", that's something that gets returned in the `id_assertion_endpoint`.\r\n\r\nI think @samuelgoto you've been mentioning the possibility of folding some of the lightweight FedCM design ideas into the main FedCM specification. Is there any reason we can't just make all the fields of the `IdentityProviderAPIConfig` optional?\r\n\r\nHere's a quick explanation of how this might work for the \"user has an account with the IdP and has visited the IdP already\" case:\r\n\r\nUser visits the IdP at some point, and it stores that they have an account with the IdP, and any UI hint they also want to provide via `n.c.store()`, as per the existing Lightweight FedCM explainer.\r\n\r\nRelying party call to .get() from the IdP is done as in the full FedCM specification.\r\n\r\n```js\r\nlet cred = await navigator.credentials.get(\r\n  {identity: {providers: {configURL: \"https://idp.example/config.json\"});\r\n```\r\n\r\nUser agent fetches the `config.json` and `.well_known/webidentity` as normal without any cookies etc. The `.well_known/webidentity` validates that the `config.json` URL is sound.\r\n\r\nThe `config.json` (minimally) looks like this:\r\n\r\n```json\r\n{\r\n  \"id_assertion_endpoint\": \"/assert\",\r\n}\r\n```\r\n\r\nSince there's no `accounts_endpoint` defined, we check our stored accounts/UI hints from earlier; if we have them, great, the user agent doesn't need to make any more calls before the user selects an account, so we've preserved the new privacy property we hoped to create. If the user agent doesn't have UI hints from before, and a loginUrl was provided in the config, then we could do something with that (I'd have to think through all the mediation mode and multi-IdP considerations to know exactly what.)\r\n\r\nThe user agent displays the account selector using the UI hints stored earlier, the user selects an account, and then the assertion endpoint is called as per the existing FedCM spec. (If a `clientId` wasn't provided in the .get() call, then the IdP may choose to reject the request, but in an open-federation usecase it would not.)\r\n\r\nThe IdP doesn't even have to implement an assertion endpoint if it doesn't want to. If the only goal is to get a nicer UX than a basic Storage Access prompt, they needn't define anything at all (except maybe a loginUrl for a redirect if the user hasn't visited the IdP on this browser yet.) The `IdentityCredential` that the RP gets back in this case won't be terribly useful, as mentioned in the original post, but it's a perfectly valid point along a continuum of functionality, instead of being the only option, and that makes this seem a lot more appealing.\r\n\r\nThis adds a lot more branches to the already complicated FedCM specification, but might well address a wide continuum of usecases and make piecemeal implementation of FedCM integration feasible for IdPs. It also gives a couple knobs for implementations to adjust (some browsers may decide the inconvenience of falling back to the loginURL is acceptable in contrast to the privacy impact of the up-front accounts endpoint call when no pre-stored accounts are available.) \r\n\r\n\r\n\r\n\r\n\r\n",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comments suggest that some technical aspects of OAuth 2.0, specifically regarding how `token` values can be represented and used in various use cases, could be improved. Specifically, the comment clarifies why `C` feels like a \"bit off\" choice for representing an `id_token`, which is typically either an `id_token`, an `access token`, or another type of response format depending on the OIDC specification being followed. Additionally, the comments discuss concerns about semantic and privacy nuances in how `token` values are used across different protocols and use cases."
  },
  {
    "id": 2350311583,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
    "created_at": "2024-09-13T21:33:44Z",
    "updated_at": "2024-09-13T21:34:53Z",
    "body": "> I think @samuelgoto you've been mentioning the possibility of folding some of the lightweight FedCM design ideas into the main FedCM specification. Is there any reason we can't just make all the fields of the IdentityProviderAPIConfig optional?\r\n\r\nYeah, I think that matches my intuition.\r\n\r\nJust as a concrete example of another variation, here is another case:\r\n\r\n> The IdP doesn't even have to implement an assertion endpoint if it doesn't want to. \r\n\r\nThey could also choose to implement the `accounts_endpoint` (to have the accounts \"pulled\" rather than \"push\") but not the `id_assertion_endpoint`:\r\n\r\n```json\r\n{\r\n  \"accounts_endpoint\": \"/accounts\",\r\n}\r\n```\r\n\r\nThis tells the browser: pull accounts from the `accounts_endpoint`, but don't hit the `id_assertion_endpoint`: the IdP will take it from there with the [Storage Access API auto-grant](https://github.com/explainers-by-googlers/storage-access-for-fedcm).\r\n\r\n> This adds a lot more branches to the already complicated FedCM specification, but might well address a wide continuum of usecases and make piecemeal implementation of FedCM integration feasible for IdPs.\r\n\r\nYeah, I agree that this can get complex quick, but maybe we don't need to think about every single permutation until we hear from developers that they need a specific one?",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment suggests adding optional fields to the IdentityProviderAPIConfig specification, allowing for more flexibility in implementing FedCM integration. This aligns with the idea of making the specification easier to implement and address different use cases."
  },
  {
    "id": 2352790581,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
    "created_at": "2024-09-16T12:32:56Z",
    "updated_at": "2024-09-16T12:32:56Z",
    "body": "I think it would also be interesting to have the token endpoint provided as an argument to the `n.c.get` call rather than via the site-level well-known. Even having a general \"config\" argument could be useful, if the IDP already opted into being used in this way via storing a credential. In fact, the argument could be on the `n.c.store`.\r\n\r\nThe accounts endpoint would be useful as well, however it would have to be fetched after an IDP-entry in the credential chooser, to prevent attacks on privacy.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment provides specific suggestions for improving the code by proposing alternative approaches and providing explanations for why they are suggested. It addresses potential issues with current implementation and proposes improvements that could enhance security or user experience."
  },
  {
    "id": 2353662987,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/44",
    "created_at": "2024-09-16T18:47:05Z",
    "updated_at": "2024-09-16T18:47:05Z",
    "body": "Accounts do not expire, UI hints do. So, all accounts having their hints expire is equivalent to having accounts with no UI hints, which is different than no stored accounts. ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment is providing information about the usability of an application (e.g., a banking or account management platform) and discussing how its functionality works, specifically regarding whether certain features should expire in relation to their UI presence. This focus on how user experience interacts with different aspects of the system makes it relevant to use cases."
  },
  {
    "id": 2353941016,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/44",
    "created_at": "2024-09-16T20:30:22Z",
    "updated_at": "2024-09-16T20:30:22Z",
    "body": "My question is what is the difference from the user's point of view.",
    "user": "npm1",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "administrative",
    "reason": "This comment appears to be an informal inquiry or request for clarification, and its primary purpose is to seek administrative guidance rather than provide technical feedback, use cases, a feature request, a conclusion/resolution, or any other type of philosophical analysis. The tone suggests a need for information on the topic from a specific authority or person involved in maintaining the system or process."
  },
  {
    "id": 2355750865,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
    "created_at": "2024-09-17T13:13:43Z",
    "updated_at": "2024-09-17T13:13:43Z",
    "body": "Relatedly, from #42 we are talking about adding pull requests for the token endpoint. This is akin to option 2 above.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment provides feedback on an existing issue or feature (adding a related thread) and references another thread (#42), indicating that it's commenting on the use of this feature rather than providing technical details, requesting new features, reporting errors, resolving issues, offering philosophical insights, or expressing uncertainty."
  },
  {
    "id": 2355850357,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
    "created_at": "2024-09-17T13:41:59Z",
    "updated_at": "2024-09-17T13:41:59Z",
    "body": "I think (1)'s downside can be resolved by requiring sticky user activation to store a credential! I lean toward that direction, and allowing stores in workers to facilitate using the Push API. There was a comment in the meeting with the push API requiring notifications, and I think that is reasonable given the infrequency of user information updates.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment provides an idea for resolving a technical issue (user credential storage) by suggesting to require sticky user activation. This suggests that the commenter is offering technical suggestions aimed at improving or fixing a problem, which is typical of technical feedback comments."
  },
  {
    "id": 2356390029,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
    "created_at": "2024-09-17T16:25:44Z",
    "updated_at": "2024-09-17T16:25:44Z",
    "body": "@ekovac: does this make sense in the context of the discussion on #42?",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment appears to be providing constructive feedback on an existing code or product, specifically evaluating its clarity and usefulness within a specific discussion."
  },
  {
    "id": 2356453417,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
    "created_at": "2024-09-17T17:00:24Z",
    "updated_at": "2024-09-17T17:00:24Z",
    "body": "(1) would certainly lead to the best UX and Privacy properties, I believe. It is unclear to me whether that's too big of a lift to IdPs or not, but seems like a better place to start from.",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "philosophical",
    "reason": "The comment raises questions about whether the implementation of identity management (IdP) could lead to overly complex and potentially privacy- compromising processes. It implies that it may be too much to handle for IdPs, which is a philosophical concern about the potential impact on usability and user experience in such systems."
  },
  {
    "id": 2356779541,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
    "created_at": "2024-09-17T19:55:05Z",
    "updated_at": "2024-09-17T19:58:02Z",
    "body": "> I think it would also be interesting to have the token endpoint provided as an argument to the `n.c.get` call rather than via the site-level well-known. Even having a general \"config\" argument could be useful, if the IDP already opted into being used in this way via storing a credential. In fact, the argument could be on the `n.c.store`.\r\n\r\nI think there's value in trying to minimize the amount of divergence between FedCM and Lightweight FedCM here and leverage the existing configuration. What benefit does supplying the config URL in the `n.c.store()` call have over just relying on the existing FedCM configuration mechanism?\r\n\r\nIt's true that if we take it as a given that the user will be picking the IdP from a list before any requests (credential-less or otherwise) are issued, there's probably no harm in doing this. But it seems like supplying this at .store() time is an unnecessary difference.\r\n\r\n> The accounts endpoint would be useful as well, however it would have to be fetched after an IDP-entry in the credential chooser, to prevent attacks on privacy.\r\n\r\nAgreed, I think this fits together nicely in this model.\r\n\r\n",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides specific suggestions and criticisms about the design of a FedCM (Federal Identity Management Component) system. It includes technical recommendations and ideas for improvement. The tone is helpful and constructive, suggesting ways to enhance the system's functionality and security."
  },
  {
    "id": 2356790113,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
    "created_at": "2024-09-17T19:59:46Z",
    "updated_at": "2024-09-17T19:59:46Z",
    "body": "If the tokenURL has to be supplied by the RP, that feels like an arbitrary difference vs \"full\" FedCM. Is there any reason we don't want to just use the existing configURL mechanism?",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment highlights a potential discrepancy between two different mechanisms for handling token URLs in the context of Full Federated Identity Management (FedCM) and suggests a potential solution, which is using the existing configURL mechanism instead. It implies that the current approach might not be ideal and could lead to confusion or inconsistencies if both approaches are used simultaneously."
  },
  {
    "id": 2358535135,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
    "created_at": "2024-09-18T13:52:23Z",
    "updated_at": "2024-09-18T13:52:23Z",
    "body": "I considered using the whole configURL mechanism. The biggest piece is that we don't need the protections offered by the `.well-known` resource's redirection, since this request is sent after the credential is chosen. Then it makes sense to me to make it as easy to use as possible, which is just another Javascript parameter. The well-known is still part of the opt-in path to FedCM, and the endpoint can stay the same.\r\n\r\nI realized while writing this that a better place to put this is in the IDP's store, which is more equivalent to the configURL. Change made.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides suggestions or insights on improving a specific system component (config URL mechanism), offering technical advice for making it more efficient and user-friendly."
  },
  {
    "id": 2359454667,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
    "created_at": "2024-09-18T21:41:07Z",
    "updated_at": "2024-09-18T21:41:07Z",
    "body": "Just ran into this, and may help:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Web_Periodic_Background_Synchronization_API",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical information about the Web Periodic Background Synchronization API. The commenter is offering their experience or discovery of this API, and it's intended to assist others in understanding its usage. There is no mention of a specific request, use case, or issue that needs to be resolved."
  },
  {
    "id": 2361374025,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
    "created_at": "2024-09-19T15:41:07Z",
    "updated_at": "2024-09-19T15:41:07Z",
    "body": "> I think there's value in trying to minimize the amount of divergence between FedCM and Lightweight FedCM here and leverage the existing configuration. \r\n\r\nI agree, which is why I would use the fetch description of the Token endpoint from FedCM.\r\n\r\n> What benefit does supplying the config URL in the n.c.store() call have over just relying on the existing FedCM configuration mechanism?\r\n\r\nIf an IDP wants to provide the token, I don't want to require adopting the site-level well-known resource since it is a challenge for some deployments. This is also why the loginURL is in the `n.c.store` arguments. FedCM had to fetch IDP config from a well-known resource because it had no prior guarantee of interaction with the IDP.  We have a convenient place for it!",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "This comment discusses the potential benefits and drawbacks of providing a configuration URL for token fetching, which is relevant to the use case of integrating FedCM (Federal Content Management) into an Identity Provider (IDP). The commenter asks whether supplying a config URL has any value over relying on existing FedCM mechanisms, highlighting the specific scenario where IDPs need to provide tokens and do not want to adopt site-level well-known resources."
  },
  {
    "id": 2363866116,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
    "created_at": "2024-09-20T14:26:41Z",
    "updated_at": "2024-09-20T14:26:41Z",
    "body": "Is tokenUrl the same as the id_assertion_endpoint?",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment is asking for clarification on whether two specific variables (tokenUrl and idAssertionEndpoint) are the same. It's a straightforward question that requires technical expertise to answer, making it a technical feedback request."
  },
  {
    "id": 2363943497,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
    "created_at": "2024-09-20T15:03:50Z",
    "updated_at": "2024-09-20T15:03:50Z",
    "body": "Exactly! Maybe it would be better to rename it to idAssertionURL?",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment is asking for a rewording of the code or software, suggesting that renaming the identifier 'idAssertionURL' might improve readability and clarity. This indicates that the issue at hand is related to how the user can interact with or understand the system's components."
  },
  {
    "id": 2364004437,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/45",
    "created_at": "2024-09-20T15:35:36Z",
    "updated_at": "2024-09-20T15:35:36Z",
    "body": "It is a little ugly, but I think conceptually right :)",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment expresses a subjective opinion about the design or presentation of the code, suggesting that it meets its purpose (i.e., being \"conceptually right\") despite some aesthetic issues."
  },
  {
    "id": 2364588203,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/42",
    "created_at": "2024-09-20T20:41:45Z",
    "updated_at": "2024-09-20T20:43:49Z",
    "body": "Just an idea that occurred to me after thinking about this a bit more on (C) ...\r\n\r\n> (C) On output, we could include a token field that contains an unsigned JWT with assertions corresponding to the UI hints that the IdP provided when .store() was called.\r\n\r\nSo, something that could be very interesting, but may be something that we'd want to layer on top of the other options, is to use a signed [SD-JWT](https://datatracker.ietf.org/doc/draft-ietf-oauth-selective-disclosure-jwt/) and the the [Three Party Model](https://www.w3.org/TR/vc-data-model/#ecosystem-overview) with the browser (or a wallet or a password manager) as the holder: have the `navigator.credentials.store()` store an SD-JWT and the browser to derive a selective disclosure presentation at `navigator.credentials.get()` (without ever phone-homing the IdP).\r\n\r\nThis would be clearly not retrofittable into the current system, requiring the RP to redeploy, so not a great starting point, but seems like a good long term design: something that allows us a gradual upgrade path from `pull` (heavyweight) > `push` (lighweight) > `issue` (delegated) for IdPs.\r\n\r\nIt is not clear to me whether that's a FedCM concern or a [Digital Credentials](https://github.com/wicg/digital-credentials) concern and where to draw the line between the two (maybe the former is more \"high level\" and the latter is more \"low level\"?), but just wanted to throw it out there as a possible \"long term design\" that can be built on top of lightweight.",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment is providing suggestions and ideas for how to improve or implement OAuth 2.0, specifically proposing an interesting idea about storing user data in tokens that correspond to UI hints provided by the identity provider (IdP). The commenter also discusses potential concerns related to FedCM (Federal Identity, Mobility, and Connectivity) and Digital Credentials initiatives, which adds a technical and conceptual layer of analysis."
  },
  {
    "id": 2372065022,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/46",
    "created_at": "2024-09-24T18:54:42Z",
    "updated_at": "2024-09-24T18:54:42Z",
    "body": "I don't think the prototype in Firefox nightly is actually up to date with the recent changes to the explainer yet.",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment provides specific feedback about an aspect of the browser's behavior, which is typically associated with technical issues or bugs. It also implies that there may be discrepancies between what the users expect and the actual implementation of a feature or update. This suggests that the comment is intended to inform developers about potential problems or areas for improvement in Firefox nightly."
  },
  {
    "id": 2372069327,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/46",
    "created_at": "2024-09-24T18:57:19Z",
    "updated_at": "2024-09-24T18:57:19Z",
    "body": "The testing websites linked here: https://github.com/fedidcg/LightweightFedCM/issues/33 should work in Firefox Nightly but don't represent the latest state of the explainer.",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment is requesting a specific workaround or patch for a feature issue, rather than providing feedback on technical implementation details, discussing use cases, resolving an administrative issue, or offering philosophical insights. It also does not provide any conclusive evidence of the issue's resolution, leaving room for further investigation."
  },
  {
    "id": 2372093416,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/46",
    "created_at": "2024-09-24T19:04:06Z",
    "updated_at": "2024-09-24T19:04:06Z",
    "body": "No problems. Thanks. ",
    "user": "philsmart",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment is providing feedback on the quality of a system or product, specifically mentioning that there are no issues to report. This type of comment is typically left by an end-user or user after completing their interaction with a service or application."
  },
  {
    "id": 2372431046,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
    "created_at": "2024-09-24T21:35:16Z",
    "updated_at": "2024-09-24T21:35:16Z",
    "body": "> Just ran into this, and may help:\r\n> \r\n> https://developer.mozilla.org/en-US/docs/Web/API/Web_Periodic_Background_Synchronization_API\r\n\r\nThat requires installing the app as a PWA, and exposes user activity & IP address to the IDP. (We considered that in https://github.com/w3c-fedid/FedCM/blob/main/meetings/2022/FedCM_%20Options%20for%20the%20Timing%20Attack%20Problem%202022-08-31.pdf)",
    "user": "cbiesinger",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides a technical observation about the Web Periodic Background Synchronization API, which suggests that it may require additional considerations or modifications for a specific use case (installing as a Progressive Web App), and could expose sensitive user data such as IP address."
  },
  {
    "id": 2372456151,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
    "created_at": "2024-09-24T21:54:38Z",
    "updated_at": "2024-09-24T21:54:38Z",
    "body": "I'd like that. I think it shouldn't be a problem and is explicitly a target for e.g. the Mode API.\r\n\r\nHow do you feel about the Registration API? Are these two APIs similar enough that there's a point in convergence / better integration?",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on the functionality of two APIs, suggesting they should not be a problem and offering suggestions for improvement. It specifically addresses the mode to registration API relationship, which implies it is focused on technical issues with the implementation or design of these APIs rather than aspects such as use cases or features."
  },
  {
    "id": 2372498477,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
    "created_at": "2024-09-24T22:27:56Z",
    "updated_at": "2024-09-24T22:28:41Z",
    "body": "> How do you feel about the Registration API? Are these two APIs similar enough that there's a point in convergence / better integration?\r\n\r\nYeah, that's a good question, but I do think that this aligns well with the IdP Registration API. \r\n\r\nI think you are right in that there is something awkward about them, but this seems like a resolvable issue (i.e. where to put the parameters of the `configURL`).\r\n\r\n```javascript\r\n// No prompts, tells the browser that the user is logged in\r\nnavigator.login.setStatus(\"logged-in\");\r\n\r\n// Doesn't prompt the user, caches the user's metadata\r\nnavigator.credentials.store({\r\n  identity: {\r\n    name: \"John Doe\",\r\n    email: \"john@doe.com\"\r\n\r\n    // .. oof, is it awkward that we could store the accounts / token endpoint here or at the IdP Registration API?\r\n  }\r\n});\r\n\r\n// Prompts the user to register the origin as an IdP\r\nIdentityProvider.register({\r\n  // IdP Registration typically gets a configURL as a parameter here, but for lightweight, maybe there won't be one?\r\n  // Do I specify them here? Or in the store?\r\n  // no id_assertion_endpoint, no accounts_endpoint, etc\r\n});\r\n```",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides technical feedback and suggestions to improve a code snippet related to browser authentication APIs. It highlights potential issues or areas for improvement and proposes solutions. The tone is constructive and professional, indicating that it falls under the \"Technical Feedback\" category."
  },
  {
    "id": 2372515397,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
    "created_at": "2024-09-24T22:44:32Z",
    "updated_at": "2024-09-24T22:44:32Z",
    "body": "Since lightweight FedCM does not use ID assertion endpoints, continuation API (and params API) does not really work with it as I understand it.",
    "user": "cbiesinger",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment is suggesting an improvement or modification to the current implementation of the FedCM. The user is expressing a desire for better compatibility with lightweight FedCM due to limitations in using ID assertion endpoints and continuation API/params API."
  },
  {
    "id": 2372579421,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
    "created_at": "2024-09-24T23:43:16Z",
    "updated_at": "2024-09-24T23:43:16Z",
    "body": "I've been operating under the assumption during implementation that this should work alongside Multi-IDP and the Mode API since there's no reason not to.\r\n\r\nThe registration API is interesting; it seems that the separate registration step shouldn't be necessary for a lightweight credential provider. Why would the user register an IdP they don't have an account with? Presumably if they are on a lightweight FedCM IdP page and opting to register the IdP, they've also had an account stored?\r\n\r\nI think the registration API, as I understand it, is still useful for \"full\" FedCM IdPs, but lightweight FedCM doesn't really benefit from it.\r\n\r\n",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The reviewer's suggestion that the registration API should not be necessary for a lightweight credential provider suggests an improvement to functionality rather than addressing an issue with existing code or adding new functionality. This can often be categorized as a feature request, as it seeks to enhance user experience and usability of the system."
  },
  {
    "id": 2372597641,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
    "created_at": "2024-09-25T00:00:56Z",
    "updated_at": "2024-09-25T00:02:22Z",
    "body": "It does feel that way, now that the `token` is not provided at store-time. When there was a possibility there was something sensitive in there, we definitely needed that control. Now that that's being retrieved using something compatible with the Identity Assertion endpoint (which has the Origin in the headers etc) this shouldn't be necessary.\r\n\r\nThat is to say, +1 to this (and ditto for effectiveOrigins, probably?)\r\n\r\n",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment provides specific feedback about a technical issue with retrieving sensitive data ('token') from the store. It explains why the original solution was problematic and how it has been improved in a new way using Identity Assertion endpoint."
  },
  {
    "id": 2372964174,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
    "created_at": "2024-09-25T04:53:48Z",
    "updated_at": "2024-09-25T04:53:48Z",
    "body": "IdP registration could still work, right? Instead of just storing the accounts, the IdP registers as being available for a certain 'type', and then the RP can request IdPs of a given type.",
    "user": "npm1",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment proposes an alternative approach to idp registration, where an identity provider (IdP) registers itself with a specific type designation rather than storing individual user accounts. This request is seeking a new solution or paradigm for idp management."
  },
  {
    "id": 2374821405,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
    "created_at": "2024-09-25T18:06:26Z",
    "updated_at": "2024-09-25T18:06:26Z",
    "body": "> IdP registration could still work, right? Instead of just storing the accounts, the IdP registers as being available for a certain 'type', and then the RP can request IdPs of a given type.\r\n\r\nn.c.store(IdentityCredential({...}) as defined in the explainer already supports a 'type' on the IdentityCredential, so it already covers this case without needing to invoke the registration API.",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides technical insight and explanation about a specific feature of an identity provider (IdP) and how it works. It does not relate to use cases or features requests, administrative tasks, conclusions/resolutions, philosophical discussions, or unknown elements."
  },
  {
    "id": 2374857399,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
    "created_at": "2024-09-25T18:24:37Z",
    "updated_at": "2024-09-25T18:24:37Z",
    "body": "That means that IdP registration is supported. That is literally what IdP registration API is.",
    "user": "npm1",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed information about the functionality of an Identity Provider (IdP) registration process, which is a technical aspect of the system's design and operation. It offers constructive feedback on how to improve or optimize this process in the future."
  },
  {
    "id": 2377432850,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
    "created_at": "2024-09-26T16:31:40Z",
    "updated_at": "2024-09-26T16:31:40Z",
    "body": "IdP Registration shows a user prompt though, right? Just wanted to make sure we're on the same page there. I agree that registration feels like something that could be frequently used with LW.\r\n\r\nI'm curious if we could make Continuation API work without the endpoints since it sounds potentially useful? I would need to read up more on Continuation API :)\r\n\r\ncc @bvandersloot-mozilla ",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical advice and information, specifically asking about the functionality of IdP Registration and suggesting ways to improve it. It does not request a feature or provide an idea for improvement beyond what's already been said."
  },
  {
    "id": 2377512395,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
    "created_at": "2024-09-26T17:16:21Z",
    "updated_at": "2024-09-26T17:16:21Z",
    "body": "I think the concern we're trying to mitigate here is the \"reputation attack\" where an IdP might want to prevent its prompt being shown on unreputable / illegal sites to avoid the impression of endorsement.\r\n\r\nWould be interested in @bvandersloot-mozilla's thoughts.",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment expresses a concern about the security and privacy implications of an Identity Provider (IdP) preventing its prompts from being shown on unreputable or illegal sites, suggesting that the feature is intended to mitigate this threat."
  },
  {
    "id": 2377515337,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
    "created_at": "2024-09-26T17:18:01Z",
    "updated_at": "2024-09-26T17:28:23Z",
    "body": "I'm going to open a separate issue specifically about whether the 'type' parameter should remain as part of the IdentityCredential passed to the n.c.store() call (in which case we will need to add a user prompt at store time) or if we should require using the registration API for that functionality, for consistency. (This came up in a discussion with @npm1)\r\n\r\nSee: https://github.com/fedidcg/LightweightFedCM/issues/49",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment is requesting a change to an existing behavior (removing the 'type' parameter from IdentityCredential) for consistency across different authentication scenarios. This falls under the category of Feature Requests, as it proposes adding new functionality or modifying existing ones for improved usability and alignment with standards."
  },
  {
    "id": 2377546607,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-09-26T17:32:04Z",
    "updated_at": "2024-09-26T17:32:04Z",
    "body": "If there are no objections I can put together a PR for this to update the explainer.\r\n\r\n@bvandersloot-mozilla what are your thoughts?",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment is requesting that someone (bvandersloot-mozilla) provide feedback on a specific topic, which suggests that it's intended as an improvement or enhancement rather than a general discussion or administrative matter."
  },
  {
    "id": 2377654226,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
    "created_at": "2024-09-26T18:29:40Z",
    "updated_at": "2024-09-26T18:29:40Z",
    "body": "This starts to come back around to \"Is Lightweight FedCM for all IdPs or is Lightweight FedCM for small IdPs,\" I think.",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment appears to be expressing concern about the current implementation of Lightweight Federated Identity for Common Models (FedCM) and suggesting a potential improvement or refinement to make it more suitable for all identity providers (IdPs), especially small ones."
  },
  {
    "id": 2383944047,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/40",
    "created_at": "2024-09-30T19:00:36Z",
    "updated_at": "2024-09-30T19:00:36Z",
    "body": "Discussed at TPAC 2024: https://github.com/fedidcg/meetings/blob/main/2024/2024-09-24-TPAC-notes.md#lightweight",
    "user": "wseltzer",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment is providing information about a past meeting, specifically the notes from TPAC 2024. It appears to be a factual report or summary of an event rather than a discussion or request."
  },
  {
    "id": 2386577632,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/48",
    "created_at": "2024-10-01T17:31:31Z",
    "updated_at": "2024-10-01T17:31:31Z",
    "body": "It might be possible to call the store internally from the IDP registration API, if all of the arguments are there.\r\n\r\nI think it is worth considering putting the credential store operation behind a dialog regardless!",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment appears to describe a proposed solution or suggestion within the context of integrating the IDP (Identity Provider) registration API with a store. It proposes that a credential store operation should be considered as part of this integration and could potentially be performed internally, indicating it's an idea for improving or expanding the existing functionality."
  },
  {
    "id": 2386579949,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-10-01T17:32:49Z",
    "updated_at": "2024-10-01T17:32:49Z",
    "body": "I think the better solution would be to move the store to an internal call by the registration API, assuming the information we need to create a credential is available there.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment suggests making changes to how something (in this case, possibly an authentication process or authorization system) works. It proposes alternative solutions and specific actions that would likely be part of using a larger system or service. This description aligns with the definition of a use case in software engineering, which involves identifying scenarios or requirements for a particular feature or functionality within a system."
  },
  {
    "id": 2386581827,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
    "created_at": "2024-10-01T17:33:56Z",
    "updated_at": "2024-10-01T17:33:56Z",
    "body": "> I think the concern we're trying to mitigate here is the \"reputation attack\" where an IdP might want to prevent its prompt being shown on unreputable / illegal sites to avoid the impression of endorsement.\r\n\r\nPrecisely. And many IdPs, not just large ones, can't disclose their RP lists, so they require a dynamic fetch.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment is expressing an idea for improvement in how Identity Providers (IdPs) handle reputation and prompt fetching, specifically to mitigate the \"reputation attack\" by dynamically fetching the user's RP list. This suggests that it is an improvement or enhancement being proposed to address a specific issue."
  },
  {
    "id": 2386582297,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
    "created_at": "2024-10-01T17:34:12Z",
    "updated_at": "2024-10-01T17:34:12Z",
    "body": "> This starts to come back around to \"Is Lightweight FedCM for all IdPs or is Lightweight FedCM for small IdPs,\" I think.\r\n\r\nMy position is that it should work for all IdPs.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The commenter is requesting a solution to make Lightweight Federated Identity Communication (Lightweight FedCM) suitable for use with any Identity Provider (IdP), rather than just those designed for small IdPs. They seem to be advocating for a universal approach, which suggests that this comment falls under the category of feature requests."
  },
  {
    "id": 2386618906,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-10-01T17:56:01Z",
    "updated_at": "2024-10-01T17:56:01Z",
    "body": "So the .store() call would be as-is currently defined, but an IdP registration would happen under the hood?",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "philosophical",
    "reason": "This comment expresses an opinion or perspective about how authentication services (IdPs) typically work, which can be a philosophical discussion about the underlying principles and design choices of identity protocols. The author is not providing specific technical details or asking for a practical solution but rather questioning the assumption behind the current implementation."
  },
  {
    "id": 2386737922,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-10-01T18:56:56Z",
    "updated_at": "2024-10-01T18:56:56Z",
    "body": "I meant the other way, but I think this might be better. I'm not certain",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment appears to be expressing an opinion or idea about how something could be improved or changed, which is a common request for features in software development."
  },
  {
    "id": 2389174449,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/47",
    "created_at": "2024-10-02T17:03:01Z",
    "updated_at": "2024-10-02T17:03:01Z",
    "body": "> And many IdPs, not just large ones, can't disclose their RP lists, so they require a dynamic fetch.\r\n\r\nIf it requires a dynamic fetch, maybe it belongs into the `client_metadata_endpoint` rather than `navigator.credentials.store()`?",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment suggests that some IdPs (Identification Providers) cannot store their Real Party lists dynamically and instead require a more complex setup for the client to retrieve this information, potentially requiring an endpoint. This is indicative of a feature request for simplifying the process or removing certain complexities in handling identity providers' real party lists."
  },
  {
    "id": 2391782035,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
    "created_at": "2024-10-03T15:59:49Z",
    "updated_at": "2024-10-03T15:59:49Z",
    "body": "I think that contextual integrity issue only applies if the UX matches what exists in Chrome today. As written, surely other implementations could choose to avoid it?",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "philosophical",
    "reason": "This comment does not provide specific technical information or propose a solution; instead, it offers an interpretation and perspective on the concept of contextual integrity. It also makes a value judgment about the applicability of this concept in different contexts, which is characteristic of philosophical discussions rather than technical or practical ones."
  },
  {
    "id": 2391814564,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
    "created_at": "2024-10-03T16:14:44Z",
    "updated_at": "2024-10-03T16:14:44Z",
    "body": "Certainly- there is no normative language on showing those accounts in the UI. But the spec is certainly written with an assumption of presenting this information to the user, e.g. \"Display an account chooser displaying the options from accountsList\" really only makes sense if you use account information to show those options.\r\n\r\nI'm interested in if we agree that this is a problem and if so, what design considerations we can make to mitigate it in Lightweight FedCM, especially since the first thing that came to my mind lets us easily solve #40 ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on how to improve the UI's presentation of account information. The commenter suggests adjusting the spec to make it more readable and understandable for users, which is a technical issue that requires an improvement in the design."
  },
  {
    "id": 2391986417,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-10-03T17:47:56Z",
    "updated_at": "2024-10-03T17:47:56Z",
    "body": "> As currently written, the explainer describes a new parameter to the IdentityCredential constructor called type, which would serve the same function as the type parameter on the proposed IdentityProvider.register() method.\r\n\r\nConceptually speaking, I think that `IdentityProvider.register()` and the `navigator.credentials.store()` to be fairly orthogonal and independent concepts: the former allows users to \"register identity providers\" whereas the latter allows \"identity providers to register accounts\".\r\n\r\nAs a concrete example, I think it should be possible for an IdP to be (a) registered and, at the same time, (b) have their user logged-out without any account available. All of the other 4 combinations are also valid: unregistered but logged-in, unregistered and logged-out as well as registered and logged-in.\r\n\r\n> One issue this raises is that it means that the store() call now needs to prompt the user to prevent malicious or simply ill-behaved IdPs from drive-by registering themselves for a broad type class of RPs for the user.\r\n\r\nYeah, I think that's correct: you need to prompt the user for permission, because otherwise any website could spam the list without any user awareness, as you said, just driving by.\r\n\r\n> I think the natural choice here is to remove 'type' from the IdentityCredential itself, and if we want IdP Registration type behavior we rely on IdentityProvider.register() .\r\n> This makes the behavior more consistent with full FedCM, and eliminates the need to introduce a user prompt for n.c.store().\r\n\r\nI think that overall makes sense.\r\n\r\nJust to be concrete if I understand this correctly, but roughly speaking, here is what this would look like for an IdP:\r\n\r\n```javascript\r\n// Tells the browser that the user is logged in\r\n// TODO: should this be bundled / inferred with the next call?\r\nnavigator.login.setStatus(\"logged-in\");\r\nnavigator.credentials.store(new IdentityCredential({\r\n  name: \"John Doe\",\r\n  email: \"foobar@gmail.com\"\r\n}));\r\nIdentityProvider.register( /** to we start accepting undefined for lightweight? */ );\r\n```\r\nDid I get this more or less right?\r\n\r\n> So the .store() call would be as-is currently defined, but an IdP registration would happen under the hood?\r\n\r\nIs the suggestion here to bundle the last two (and maybe the first one too) into the semantics of the `store()`? For example:\r\n\r\n```javascript\r\n// This is semantically isomorphic syntactic sugar to the code snippet above\r\nnavigator.credentials.store(new IdentityCredential({\r\n  type: \"indie-auth\",\r\n  name: \"John Doe\",\r\n  email: \"foobar@gmail.com\"\r\n}));\r\n```\r\n\r\nDid I get this right?\r\n",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "philosophical",
    "reason": "The comment is philosophical because it discusses the design and behavior of a specific feature (navigator.credentials.store) within the context of web authentication. It questions whether a certain design choice will be beneficial, reasonable, or necessary for the intended functionality."
  },
  {
    "id": 2391994190,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-10-03T17:52:15Z",
    "updated_at": "2024-10-03T17:52:15Z",
    "body": "> > One issue this raises is that it means that the store() call now needs to prompt the user to prevent malicious or simply ill-behaved IdPs from drive-by registering themselves for a broad type class of RPs for the user.\r\n> \r\n> Yeah, I think that's correct: you need to prompt the user for permission, because otherwise any website could spam the list without any user awareness, as you said, just driving by.\r\n\r\nDo you think user permission is also needed for store() if the type is moved to a separate register() call? That is, do you think storing just the logged in user data also needs permission?",
    "user": "cbiesinger",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment is discussing the implications of updating the `store()` function and highlights potential issues that arise when it is called without user permission. It specifically mentions the need to prompt users for their consent before allowing them to log in or register as an RPM (Remote Procedure) for a particular type class of RP, implying that the updated `store()` function may not require user permission if the data being logged and registered is not sensitive or personal information."
  },
  {
    "id": 2391994241,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-10-03T17:52:17Z",
    "updated_at": "2024-10-03T17:52:17Z",
    "body": "> Just to be concrete if I understand this correctly, but roughly speaking, here is what this would look like for an IdP:\r\n> \r\n> ```js\r\n> // Tells the browser that the user is logged in\r\n> // TODO: should this be bundled / inferred with the next call?\r\n> navigator.login.setStatus(\"logged-in\");\r\n> navigator.credentials.store(new IdentityCredential({\r\n>   name: \"John Doe\",\r\n>   email: \"foobar@gmail.com\"\r\n> }));\r\n> IdentityProvider.register( /** to we start accepting undefined for lightweight? */ );\r\n> ```\r\n> \r\n\r\nThis is what I had in mind, exactly. And yes, IdentityProvider.register() for a lightweight IdP could just take `undefined`, we've got the origin from context. I think it'd be harmless to make the login status call implied from the .store() call.\r\n\r\n",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides specific technical suggestions and corrections, addressing potential errors or issues with the given code snippet. The comments are written in a clear and concise manner, suggesting that they originate from someone who has reviewed and tested the provided JavaScript code."
  },
  {
    "id": 2392001408,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
    "created_at": "2024-10-03T17:56:41Z",
    "updated_at": "2024-10-03T17:56:41Z",
    "body": "With regards to the following points that @ekovac and @bvandersloot-mozilla raised earlier:\r\n\r\n> I think that contextual integrity issue only applies if the UX matches what exists in Chrome today. As written, surely other implementations could choose to avoid it?\r\n> Certainly- there is no normative language on showing those accounts in the UI.\r\n> it is deceptive to present information from one context into another, making it appear that the contexts are already linked before the user makes their choice.\r\n\r\nWould you feel that it is `equally deceptive to present information from one context into another, making it appear that the contexts are already linked before the user makes their choice` if we had chosen different UX formulations? For example, if Chrome had chosen to implement the FedCM UX in an area that is clearly part of the browser UI rather than the content UI, would we still feel that it is being deceitful? Does requiring user activation change some of this equation?\r\n\r\nFor example, just to check, would the following UX choice be both (a) spec compliant and (b) non deceitful?\r\n\r\n<img width=\"598\" alt=\"Screenshot 2024-10-03 at 10 53 54\" src=\"https://github.com/user-attachments/assets/2e44635b-d541-45ef-8fef-6b5c33e2e22b\">\r\n\r\nWhat about the following UX that requires user activation?\r\n\r\n<img width=\"600\" alt=\"Screenshot 2024-10-03 at 10 56 05\" src=\"https://github.com/user-attachments/assets/449bfb86-d5a3-45e9-b8c1-5749f16ee17c\">\r\n\r\n",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The comment is providing technical feedback on the design of Chrome, specifically addressing potential issues with contextual integrity and deceptive presentation of information in UX. It provides suggestions for improvement and questions about whether similar issues would apply to different implementations or UX formulations."
  },
  {
    "id": 2392005962,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-10-03T17:59:19Z",
    "updated_at": "2024-10-03T17:59:35Z",
    "body": "> This is what I had in mind, exactly. And yes, IdentityProvider.register() for a lightweight IdP could just take undefined, we've got the origin from context. I think it'd be harmless to make the login status call implied from the .store() call.\r\n\r\nAh, glad that I understood what you had in mind. I just realized that I forgot your actual original point in this thread, using the `type` from the `IdentityProvider.register()`, so here is a more complete snippet:\r\n\r\n```javascript\r\n// navigator.login.setStatus() is implied in the `store()`\r\nnavigator.credentials.store(new IdentityCredential({\r\n  name: \"John Doe\",\r\n  email: \"foobar@gmail.com\"\r\n}));\r\nIdentityProvider.register({\r\n  type: \"inde-auth\"\r\n});\r\n```\r\n\r\nDid I get this right?",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "philosophical",
    "reason": "This comment discusses the intention behind a piece of code and expresses agreement, but does not explicitly state what is being agreed upon. It also provides an example to demonstrate the point, which makes it more of a discussion or thought experiment rather than providing direct feedback on the original code."
  },
  {
    "id": 2392016611,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-10-03T18:05:11Z",
    "updated_at": "2024-10-03T18:11:06Z",
    "body": "On a related note:\r\n\r\n>  I think it'd be harmless to make the login status call implied from the .store() call.\r\n\r\nThis reminds me to re-notify you that I think that what you actually want is the reverse: drop the `navigator.credentials.store()` and extend the `navigator.login.setStatus()` instead.\r\n\r\nI think that what you actually want, is the following:\r\n\r\n```javascript\r\nnavigator.login.setStatus(\"logged-in\", {\r\n  accounts: [{\r\n    name: \"John Doe\",\r\n    email: \"foobar@gmail.com\"\r\n  }]\r\n}));\r\nIdentityProvider.register({\r\n  type: \"inde-auth\"\r\n});\r\n```\r\n\r\nFor example, what's the reverse of `navigator.credentials.store()`? Conceptually speaking, I think you want the following to be the reverse of `navigator.credentials.store()`:\r\n\r\n```javascript\r\nnavigator.login.setStatus(\"logged-out\");\r\n```\r\n\r\nI think I mentioned this a few times, and it is fine to leave this discussion for later, but as we go along and learn more about the relationship between the parts, it helps to re-test these ideas.",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "The commenter provides specific suggestions on how to improve or modify existing code, including an alternative implementation of the `navigator.login.setStatus()` method. They also clarify their own thought process and explain why they think a certain approach is better."
  },
  {
    "id": 2392055737,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
    "created_at": "2024-10-03T18:26:52Z",
    "updated_at": "2024-10-03T18:26:52Z",
    "body": "> For example, if Chrome had chosen to implement the FedCM UX in an area that is clearly part of the browser UI rather than the content UI, would we still feel that it is being deceitful?\r\n\r\nClear to whom? Personally, I'm partial to [Emily's interpretations around the line of death](https://emilymstark.com/2022/12/18/death-to-the-line-of-death.html), particularly her intuition \"that the line of death is simply a foreign, incomprehensible idea to many, many browser users.\"\r\n\r\n> Does requiring user activation change some of this equation?\r\n\r\nI don't think so.\r\n\r\n> For example, just to check, [...]\r\n\r\nThe URL-bar nugget is probably the subtlest one, and is much better than the one-tap-widget. But I think the reasonable question here is \"what users understand that the browser is sending them a message, not the page? and unless they click the nugget the site doesn't learn about their twitter account?\", and I don't know if many do, even with this mock. \r\n\r\n\r\n\r\n\r\n",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "This comment appears to be discussing how Chrome's implementation of Federated Multi-User Communication (FedCM) affects its use in the browser UI versus content UI, specifically regarding user activation and the interaction with specific features like the URL-bar nugget. It touches on a philosophical aspect related to understanding what users understand when interacting with their Twitter accounts via Facebook."
  },
  {
    "id": 2392183088,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-10-03T19:34:55Z",
    "updated_at": "2024-10-03T19:34:55Z",
    "body": "> On a related note:\r\n> \r\n> > I think it'd be harmless to make the login status call implied from the .store() call.\r\n> \r\n> This reminds me to re-notify you that I think that what you actually want is the reverse: drop the `navigator.credentials.store()` and extend the `navigator.login.setStatus()` instead.\r\n> \r\n> I think that what you actually want, is the following:\r\n> \r\n> ```js\r\n> navigator.login.setStatus(\"logged-in\", {\r\n>   accounts: [{\r\n>     name: \"John Doe\",\r\n>     email: \"foobar@gmail.com\"\r\n>   }]\r\n> }));\r\n> IdentityProvider.register({\r\n>   type: \"inde-auth\"\r\n> });\r\n> ```\r\n> \r\n> For example, what's the reverse of `navigator.credentials.store()`? Conceptually speaking, I think you want the following to be the reverse of `navigator.credentials.store()`:\r\n> \r\n> ```js\r\n> navigator.login.setStatus(\"logged-out\");\r\n> ```\r\n> \r\n> I think I mentioned this a few times, and it is fine to leave this discussion for later, but as we go along and learn more about the relationship between the parts, it helps to re-test these ideas.\r\n\r\nI'm warming up to this idea, in part because it gets rid of the awkward detail of there being an \"input\" IdentityCredential and an \"output\" IdentityCredential that behave distinctly but are the same class in WebIDL. @bvandersloot-mozilla does this make sense to you as well?",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment is requesting a modification of the login status call from `.store()` to `setStatus()`, which would essentially drop the stored credentials and extend the `login.setStatus()` method. This change would provide an alternative for users who want to store their credentials without having an \"input\" IdentityCredential and an \"output\" IdentityCredential with distinct behaviors in WebIDL."
  },
  {
    "id": 2392187860,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
    "created_at": "2024-10-03T19:37:49Z",
    "updated_at": "2024-10-03T19:37:49Z",
    "body": "Still trying to understand you, a few more clarification questions.\r\n\r\n> Clear to whom? \r\n\r\nTo the user.\r\n\r\n> But I think the reasonable question here is \"what users understand that the browser is sending them a message, not the page? and unless they click the nugget the site doesn't learn about their twitter account?\", and I don't know if many do, even with this mock.\r\n\r\nHow does this user comprehension argument stand with autocomplete? Doesn't the following UX also fit the description of \"present information from one context into another\"?\r\n\r\n<img width=\"932\" alt=\"Screenshot 2024-10-03 at 12 36 38\" src=\"https://github.com/user-attachments/assets/564dcf20-5edd-4bab-9206-9eeafe52bd35\">\r\n",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical feedback on the clarity and responsiveness of a user interface, specifically addressing the issue with how the browser handles messages from another context (e.g. Twitter account) and suggesting improvements for understanding the context. The tone is informative and objective, and the question being asked seems to be aimed at improving the UX rather than simply expressing dissatisfaction or offering an opinion on a philosophical topic."
  },
  {
    "id": 2392256533,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/51",
    "created_at": "2024-10-03T20:17:57Z",
    "updated_at": "2024-10-03T20:17:57Z",
    "body": "Agreed, this needs to be made more explicit. I believe we came to an agreement that, yes, this will use the same behavior as the assertion endpoint from FedCM. https://github.com/fedidcg/LightweightFedCM/issues/42#issuecomment-2361374025",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "technical_feedback",
    "reason": "This comment provides technical feedback on a proposed solution to implement the same behavior as an existing assertion endpoint in the context of FedCM. The comment is specific and focused on details, suggesting that its purpose is to refine or improve the implementation rather than explore broader topics or offer suggestions for new functionality."
  },
  {
    "id": 2392706990,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
    "created_at": "2024-10-04T03:05:54Z",
    "updated_at": "2024-10-04T03:05:54Z",
    "body": "I really understand your intuition here @bvandersloot-mozilla and I appreciate the evocation of Contextual Integrity as a concern for FedCM and similar new APIs that avoid cross-site tracking but preserve an integrated user experience on a composable web.\r\n\r\nIt's super interesting because I think these APIs (specifically FedCM and Fenced Frames w/ unpartitioned storage) walk a thin line between actually giving users a contextual choice about sharing their information and the possibility for violating contextual integrity through showing user-identifying data where a user does not expect it.  I personally believe that we can be successful in building and refining (and educating our users about) these new privacy-preserving UI patterns over time, and thus shape the norms and user expectations that make the difference here.\r\n\r\nThe autocomplete example that Sam showed is a great one in my opinion, if it didn't exist today we might argue that a user would find it concerning to see their credit card information listed on a page and that it may lead them to believe that their payment information was already shared with the site. But we (users) have been trained to understand that it is indeed the opposite: We are in control whether data is shared, and the fact that it is shown on the site where the data is needed provides us with much *better* contextual integrity than, say, a full-screen browser prompt that hides the page in order to make it as clear as possible that it's the browser communicating with the user.\r\n\r\nI think it would be incorrect to say that FedCM is fully there yet, but it has the correct underlying principles: User data is not shared until the user chooses to, and its metadata allows for very contextual presentation. I absolutely agree with you that we should continue to evaluate as user agents whether the presentation we choose is as contextual as possible, but I don't think that \"make it clear this is from the browser\" is the only criterion for such an evaluation.",
    "user": "johannhof",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment requests a feature or improvement in the context of new APIs that prioritize user privacy and avoid cross-site tracking. It specifically asks about addressing concerns related to contextual integrity, suggesting that FedCM (Financial Contextual Data Management) is being used as an example of how these new APIs work, but also noting that this is not yet fully implemented. The comment expresses agreement with the author's evaluation of the API's underlying principles and acknowledges a need for continued evaluation of user agent behavior to ensure contextual presentation."
  },
  {
    "id": 2393562966,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/50",
    "created_at": "2024-10-04T12:10:57Z",
    "updated_at": "2024-10-04T12:10:57Z",
    "body": "I definitely don't mean to imply that \"make it clear this is from the browser\" is the only criterion. But it is an important one that hasn't been discussed. And that is a really good point that when joining contexts, both are important.\r\n\r\nThe autocomplete example is a great one and I think it can help illuminate where the finer points of concern are. I think there are a few big differences, one of which Johann pointed to already:\r\n\r\n1. the credit card case already exists, and has some amount of user training around the \"click-to-fill\" semantic built in already, and is presented in the context of a form-fill action being done by the user. FedCM adds new functionality and the existing training around social login is built around the opposite semantic of \"would you like to use this info we already have?\" and with it being pushed to the user as a suggestion.\r\n2. Credit card info is my data from the real world that I share with a site, whereas my Google account info is data I constructed on one site already so having it appear elsewhere on the web is more complicated by bringing in another informational context.\r\n3. Credit card autofill's alternative leaves us with more users allowing sites to store their data. This leaves users at higher risk for credential compromise overall. If a user doesn't use a social login, we have password managers and passkeys as strong authentication alternatives. ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The commenter is discussing the implications of Federated Identity (FedCM) on the concept of \"make it clear this is from the browser\" and how different types of data being shared (credit card info vs. Google account info) affect user experience, security, and overall use case."
  },
  {
    "id": 2396810390,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-10-07T12:36:27Z",
    "updated_at": "2024-10-07T12:36:27Z",
    "body": ">  in part because it gets rid of the awkward detail of there being an \"input\" IdentityCredential and an \"output\" IdentityCredential that behave distinctly but are the same class in WebIDL\r\n\r\nwe could drop the create and constructor and only allow `n.c.store()` to solve that problem. \r\n\r\nIMO if it is all the same it makes more sense to have one function call that does two things and use the state management that already exists in CredMan, rather than the IDP calling two functions to accomplish one task. ",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment suggests a potential improvement by reducing the number of functions called from the Identity Provider (IDP) library. This is framed as a concern about whether combining these functions into one makes more sense and could lead to better code management."
  },
  {
    "id": 2397289811,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/49",
    "created_at": "2024-10-07T15:45:27Z",
    "updated_at": "2024-10-07T15:45:27Z",
    "body": "> we could drop the create and constructor and only allow n.c.store() to solve that problem.\r\n\r\nPerhaps, one way to think about this problem, is to ask ourselves: is a \"stored\" credential still \"valid\" if the user is logged out? If not, what's the operation that \"deletes\" the \"store\"?\r\n",
    "user": "samuelgoto",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment suggests an improvement or addition to the current functionality by removing unnecessary code and focusing on a more meaningful and necessary aspect of credential management. It proposes rethinking how a stored credential is used, rather than just providing a workaround for a specific problem."
  },
  {
    "id": 2397713057,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/51",
    "created_at": "2024-10-07T19:25:36Z",
    "updated_at": "2024-10-07T19:25:36Z",
    "body": "That makes sense. I guess someone needs to figure out how to deal with the account_id the assertion endpoint sends right now.",
    "user": "cbiesinger",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "philosophical",
    "reason": "The comment expresses an opinion about a particular situation or concept, rather than providing feedback on its technical feasibility, asking for more information, requesting changes, or proposing solutions. It also touches on a larger issue and encourages reflection, making it a philosophical discussion."
  },
  {
    "id": 2400019016,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/46",
    "created_at": "2024-10-08T14:29:56Z",
    "updated_at": "2024-10-08T14:29:56Z",
    "body": "I'll close this, I can track https://github.com/fedidcg/LightweightFedCM/issues/51 and https://github.com/fedidcg/LightweightFedCM/issues/42.",
    "user": "philsmart",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "administrative",
    "reason": "This comment is related to the maintenance of issues trackers for a project, indicating that it's about closing or resolving issues."
  },
  {
    "id": 2433200484,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/52",
    "created_at": "2024-10-23T19:01:28Z",
    "updated_at": "2024-10-23T19:02:12Z",
    "body": "> I think there is probably a more interesting direction to pursue if doing a \"a full re-work toward creating the axiomatic base of FedCM\".\r\n> \r\n> This proposal creates a sort of parallel construction in the client side for the IDP under setStatus. What if we instead think about what we can accomplish if we take the subset to the extreme. The biggest pain point is custom infrastructure and the site-level well-known. I think we can remove both of those with three changes:\r\n> \r\n> 1. Don't fetch account information before the user has consented to link identities via an IDP-targeted dialog on the RP site.\r\n\r\nMaking sure I understand you correctly; User clicks a button on the RP's site that says \"sign in with ExampleIdP\", the user gets a generic prompt of the form \"This site would like to link to your identity with ExampleIdp.com, is that OK?\" and then if the user selects \"yes\", we invoke the current FedCM logic (check login status, if status is logged-in at ExampleIdp.com, retrieve the specified config and do the /accounts endpoint lookup, then go through the standard FedCM flow with several elements being optional now? And if the IDP isn't logged in, navigate to the login_url in the config file?\r\n\r\n> 2. Remove the .well-known requirement\r\n\r\nOne wrinkle here is that there is a [proposal in-flight](https://github.com/w3c-fedid/FedCM/issues/552#issuecomment-2035673343) for moving the `login_url` to the `.well_known/identity` file, though I'm guessing we'd keep the `login_url` through the config JSON as an option.\r\n\r\n> 3. Permit the entire config contents to be given in the sign in status endpoint, if desired.\r\n\r\nAlongside the account profile information if the IdP doesn't want to have to implement /accounts? Could you outline what this looks like in practice with a small code snippet?\r\n\r\n\r\n",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "administrative",
    "reason": "The comment is primarily discussing administrative aspects of implementing FedCM, such as reworking the client-side logic and removing infrastructure requirements. It also mentions technical details but does not require immediate resolution or clarification from the developer team. This type of discussion is typically handled by administrators to ensure that the implementation meets organizational goals and best practices."
  },
  {
    "id": 2435748956,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/52",
    "created_at": "2024-10-24T16:32:54Z",
    "updated_at": "2024-10-24T16:32:54Z",
    "body": "> > I think there is probably a more interesting direction to pursue if doing a \"a full re-work toward creating the axiomatic base of FedCM\".\r\n> > This proposal creates a sort of parallel construction in the client side for the IDP under setStatus. What if we instead think about what we can accomplish if we take the subset to the extreme. The biggest pain point is custom infrastructure and the site-level well-known. I think we can remove both of those with three changes:\r\n> > \r\n> > 1. Don't fetch account information before the user has consented to link identities via an IDP-targeted dialog on the RP site.\r\n> \r\n> Making sure I understand you correctly; User clicks a button on the RP's site that says \"sign in with ExampleIdP\", the user gets a generic prompt of the form \"This site would like to link to your identity with ExampleIdp.com, is that OK?\" and then if the user selects \"yes\", we invoke the current FedCM logic (check login status, if status is logged-in at ExampleIdp.com, retrieve the specified config and do the /accounts endpoint lookup, then go through the standard FedCM flow with several elements being optional now? And if the IDP isn't logged in, navigate to the login_url in the config file?\r\n\r\nYes, with some smoothing like skipping the account chooser UI where there is only one account.\r\n> \r\n> > 2. Remove the .well-known requirement\r\n> \r\n> One wrinkle here is that there is a [proposal in-flight](https://github.com/w3c-fedid/FedCM/issues/552#issuecomment-2035673343) for moving the `login_url` to the `.well_known/identity` file, though I'm guessing we'd keep the `login_url` through the config JSON as an option.\r\n\r\nI think that proposal's motivation is obviated by removing the well-known.\r\n\r\n> > 3. Permit the entire config contents to be given in the sign in status endpoint, if desired.\r\n> \r\n> Alongside the account profile information if the IdP doesn't want to have to implement /accounts? Could you outline what this looks like in practice with a small code snippet?\r\n\r\nThis is what I meant. The nice bit here is we could drop the Lightweight FedCM specific stuff from the n.c.get.\r\n\r\n```js\r\nnavigator.login.setStatus(\"logged-in\", {\r\n\taccounts: [{\r\n\t\tid: \"1234\",\r\n\t\tname: \"John Doe\",\r\n\t\temail: \"foobar@example.com\",\r\n                picture: \"https://example.com/users/foobar.jpg\",\r\n        }],\r\n        apiConfig: { // example name and a few useful parameters.\r\n          id_assertion_endpoint: \"/foo/id\",\r\n          login_url: \"/login.html\",\r\n        },\r\n        expiration: 86_400_000 // 24 hours\r\n});\r\n```\r\n\r\nThis bullet is also the one I think could just be dropped, since the user could just put whatever they want in the config file easily.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "The comment discusses a proposal to rework a specific part of FedCM ( Federated Identity and Credential Management) and outlines potential changes that would improve its functionality. It also provides some technical details about how these changes could be implemented, which is related to the use case of providing users with options for their login status and identity profile information."
  },
  {
    "id": 2436289820,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/52",
    "created_at": "2024-10-24T20:34:23Z",
    "updated_at": "2024-10-24T20:34:43Z",
    "body": "> This is what I meant. The nice bit here is we could drop the Lightweight FedCM specific stuff from the n.c.get.\r\n\r\nI think we already get there with the current state of the PR.\r\n\r\n> This bullet is also the one I think could just be dropped, since the user could just put whatever they want in the config file easily.\r\n\r\nAgreed; I think it's not strictly necessary and we can add it later if there's demand for it. \r\n\r\nSo, I think the change that needs to happen to this PR is this: `.well-known/identity` is optional. If `.well-known/identity` isn't present for an IdP, the UA must present a confirmation to the user before any further requests are issued to the IdP OR any stored account information is presented. If a `.well-known/identity` is present (and contains the provided configURL) and the user has `logged-in` status with the IdP, it's UA-defined whether the UA elides that confirmation and instead just displays a list of available accounts.\r\n\r\nDoes that sound right?",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "This comment proposes to remove a specific requirement from the current PR (n.c.get), which suggests that this is an opinion on how to improve or enhance the feature, rather than providing constructive feedback. The commenter also mentions adding a bullet point later if demand for it arises, indicating that they may not be entirely satisfied with the solution proposed by others."
  },
  {
    "id": 2438061520,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/52",
    "created_at": "2024-10-25T15:01:42Z",
    "updated_at": "2024-10-25T15:01:42Z",
    "body": "> > This is what I meant. The nice bit here is we could drop the Lightweight FedCM specific stuff from the n.c.get.\r\n> \r\n> I think we already get there with the current state of the PR.\r\n\r\nI was looking at the rp: field where the metadata endpoint was replaced and thought that was a new addition.\r\n\r\n> \r\n> > This bullet is also the one I think could just be dropped, since the user could just put whatever they want in the config file easily.\r\n> \r\n> Agreed; I think it's not strictly necessary and we can add it later if there's demand for it.\r\n> \r\n> So, I think the change that needs to happen to this PR is this: `.well-known/identity` is optional. If `.well-known/identity` isn't present for an IdP, the UA must present a confirmation to the user before any further requests are issued to the IdP OR any stored account information is presented. If a `.well-known/identity` is present (and contains the provided configURL) and the user has `logged-in` status with the IdP, it's UA-defined whether the UA elides that confirmation and instead just displays a list of available accounts.\r\n> \r\n> Does that sound right?\r\n\r\nYeah, that sounds right.\r\n\r\n\r\nFrom an editorial perspective, it may be worth a clarifying pass too (either in this PR or after). The original proposal was written as an independent credential type, so the current structure with this PR is a little confusing. Specifically, it would be nice to concisely enumerate the additions this makes to FedCM and the minimal list of FedCM features this relies upon to accomplish the goals set out. That would clarify the \"what\" of the proposal.",
    "user": "bvandersloot-mozilla",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "feature_request",
    "reason": "The comment is primarily focused on a technical improvement to the proposal (clarifying that `.well-known/identity` is optional) rather than asking for feedback, requesting new information, or exploring philosophical implications."
  },
  {
    "id": 2448284042,
    "issue_url": "https://api.github.com/repos/fedidcg/LightweightFedCM/issues/52",
    "created_at": "2024-10-30T20:17:47Z",
    "updated_at": "2024-10-30T20:17:47Z",
    "body": "I've added a bunch of sections about what supplying configuration via `setStatus` means for the privacy model and functionality, and what mitigations or changes need to happen.",
    "user": "ekovac",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "fedidcg/LightweightFedCM",
    "classification": "use_case",
    "reason": "This comment is providing additional context and explanation related to how the API (or system) will function, specifically regarding its ability to supply configuration. The specific details about \"supplying configuration via `setStatus`\" are of interest in this type of use case, indicating a discussion about its usage, implications, or requirements for functionality."
  },
  {
    "id": 2472731320,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/2",
    "created_at": "2024-11-13T07:55:31Z",
    "updated_at": "2024-11-13T07:55:31Z",
    "body": "The way this has been structured is based on user feedback. In terms of the innovation roadmap, the ultimate request from users is that accessibility issues are resolved by AI seamlessly without user intervention. Some AI innovations like autogenerated alt text for example, if accurate, would address this so user agent accessibility done on-the-fly would be a possible innovation roadmap, but widely applicable across other technologies as AI develops.\r\n\r\nMost of the document focuses on AI potential and accessibility issues, but acknowledges it is still fairly general in most use cases. However, some recent developments are becoming improved such as recent integration of Google Gemini into Talkback on Android. It is much better than Microsoft AI examples mentioned here for alt text. Also, there are notable improvements with live captioning. Hence, I think we can look at things AI could do well but are still in their infancy. Sign language for example, isn't really effective yet despite apps being available and is also very localised by mostly ASL. This could be an example of something that is really good that does not exist without AI, but if AI improves, then sign language online could become effective over time.\r\n\r\nIt is true that there is a lot of focus on automation, but I think there is a differentiation between how users can benefit from AI seamlessly and how people trying to address accessibility issues can also be supported by AI.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "use_case",
    "reason": "The comment discusses potential use cases where AI could make a significant impact in addressing accessibility issues, such as sign language or live captioning. It highlights the benefits of AI in these areas and notes that while there are existing solutions like Google Gemini's integration into Talkback on Android and live captioning, they still have limitations. This suggests that the comment is discussing potential applications where AI could bring significant improvements to accessibility, rather than providing technical feedback or administrative insights, nor philosophical debates, and not concluding with a resolution or recommending changes."
  },
  {
    "id": 2472733215,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/3",
    "created_at": "2024-11-13T07:56:44Z",
    "updated_at": "2024-11-13T07:56:44Z",
    "body": "Agreed.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on something specific (an action or decision) and expresses an agreement with it. The context suggests that the commenter is evaluating the quality of something, likely in a technical setting."
  },
  {
    "id": 2472734197,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/4",
    "created_at": "2024-11-13T07:57:22Z",
    "updated_at": "2024-11-13T07:57:22Z",
    "body": "Agreed.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "administrative",
    "reason": "This comment appears to be providing approval or confirmation for something, as indicated by the word \"Agreed\". It does not provide any technical feedback, use case, feature request, philosophical insights, or conclusion/resolution."
  },
  {
    "id": 2472741727,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/5",
    "created_at": "2024-11-13T08:01:35Z",
    "updated_at": "2024-11-13T08:01:35Z",
    "body": "I think GIGO is a really good point. One of the challenges with AI is that is lies with confidence and therefore it is hard to determine. For example, autogenerated alt text will change every time it is created, even if it is the exact same image. Which one is correct? Perhaps all of them, perhaps one of them. Each time subtle details are changed yet all versions may still be helpful. So how to consider these issues would be good to add in.\r\n\r\nAnother example is live captioning, if 9 out of 10 words are accurate and paired with curated content, is this enough for an end-user to have reliable information or is the inaccuracies which are represented without warning too much of a problem for the end-user.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "philosophical",
    "reason": "The comment provides philosophical insights into the nature of AI and its reliability. It raises questions about the role of human intuition, uncertainty, and ambiguity in decision-making, and whether these factors can be adequately addressed through technical means alone. The comment also touches on the importance of considering subtleties and nuance in AI systems, particularly in high-stakes applications like live captioning."
  },
  {
    "id": 2472745955,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/6",
    "created_at": "2024-11-13T08:03:25Z",
    "updated_at": "2024-11-13T08:03:25Z",
    "body": "Agreed as it relates to comments in Issue #2.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback on a technical aspect of an issue, specifically related to comments in Issue #2. It offers suggestions or corrections that can help improve the code or workflow."
  },
  {
    "id": 2472767527,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/7",
    "created_at": "2024-11-13T08:09:06Z",
    "updated_at": "2024-11-13T08:09:06Z",
    "body": "Agreed, this should be fleshed out. For example, the recent Talkback update on Android provides user choice on whether alt text that is already present is used or generative AI alt text is used, and also provides the opportunity for multiple attempts on AI alt text results. However, it never indicates the accuracy of these alt texts unlike in Microsoft 365, where Microsoft does acknowledge its view on confidence levels, i.e. low confidence, high confidence of its alt text. That being said, sometimes its high confidence is still very wrong, so this all needs to be explained in this guidance.\r\n\r\nAgree with the suggested approach but would still like to differentiate between the user experience of AI and professionals tasked with using AI to address accessibility issues.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "use_case",
    "reason": "This comment provides specific feedback on a current or proposed feature (the Talkback update on Android) in relation to how it should be explained or presented, specifically highlighting its importance for different stakeholders. The use of the phrase \"user experience\" emphasizes that this is not just a technical issue but also impacts accessibility and user interaction with AI tools."
  },
  {
    "id": 2472834701,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/2",
    "created_at": "2024-11-13T08:34:39Z",
    "updated_at": "2024-11-13T08:34:39Z",
    "body": "Another example of a user benefit not necessarily about repair might be connected to some of our XR guidance, where tactile representation in XR space could be generated to support people who are blind. AI could scan images to determine the texture of objects, represent them in a 3D environment, and then provide haptic feedback to the user.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "use_case",
    "reason": "The comment discusses a specific use case related to accessibility (supporting users who are blind) that involves technical concepts such as image processing and AI-powered haptic feedback. This is an example of how technology can be applied to improve human experience, making it relevant to the category of \"Use Case\"."
  },
  {
    "id": 1082592560,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/40",
    "created_at": "2018-07-09T20:46:51Z",
    "updated_at": "2018-07-09T20:46:51Z",
    "body": "Perhaps we should clarify that multi-factor authentication need not require multiple computing devices to be used. For example, my ssh key (something I have) and the pass phrase used to unlock it (something I know) amount to multi-factor authentication, if I understand correctly, but do not require more than one computer. The same is true, for instance, of an RSA SecureID soft token, or TOTP authentication - where the one-time codes can be generated on the same device used for log-in.",
    "user": "jasonjgw",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "use_case",
    "reason": "This comment provides a practical example and explanation to help understand how multi-factor authentication works, specifically using SSH keys and pass phrases as an alternative to requiring multiple devices. It supports the idea of using a single computing device to achieve multi-factor authentication, making it relevant to use cases where convenience or simplicity is key."
  },
  {
    "id": 1082592096,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/39",
    "created_at": "2018-07-10T09:47:27Z",
    "updated_at": "2018-07-10T09:47:27Z",
    "body": "@Logarek wrote:\r\n>The draft says that Google ReCAPTCHA will look through heuristics to figure out if someone is a human or not (such as browser history). Doesn't this present a privacy issue which could be added as another reason why Google's ReCAPTCHA has some concerns? Privacy is mentioned when discussing Public-key infrastructure solutions but how Google ReCAPTCHA does things is just as concerning.>\r\n\r\nThis is a really good point, and one that deserves more investigation. There are several things happening at the moment, that will make disability fingerprinting a common thing on the web (it's already possible in native apps on mobile devices). This is a huge concern.",
    "user": "LJWatson",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment provides technical feedback and analysis of Google ReCAPTCHA's functionality, specifically highlighting potential privacy concerns. It encourages more investigation into disability fingerprinting and other aspects that could impact user trust and online security."
  },
  {
    "id": 1082592561,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/40",
    "created_at": "2018-07-17T02:40:53Z",
    "updated_at": "2018-07-17T02:40:53Z",
    "body": "multi-device authentication is common in China Internet environment, such as someone need to pay money to merchant on Web/App, the customer transaction interface ask customer to input \"the code of mobile authentication\",  customer press \"send\" button, will have a code be sent to customer phone, then input the code, the transaction will be completed.\r\n\r\nProblem is someone have no phone, or the area without mobile signal, it will be awkward.  Beyond that, this is an accessible way for CAPTCHA.",
    "user": "hbwhzk",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "feature_request",
    "reason": "This comment describes a problem (no access to phone or poor mobile signal) and proposes a solution (transferring the request to the merchant's server via email or other secure method), indicating that it is a feature request rather than administrative, use case, philosophical, or technical feedback."
  },
  {
    "id": 1082590188,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/37",
    "created_at": "2019-03-19T15:24:07Z",
    "updated_at": "2019-03-19T15:24:07Z",
    "body": "Common biometric systems today (e.g. Android login) have the biometric data stored and checked on the device.  I don't see how such architectures help as a CAPTCHA.  Section 3.3 needs a rewrite.",
    "user": "samuelweiler",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "feature_request",
    "reason": "This comment is expressing a need or expectation for improvement (specifically, rewriting of section 3.3 to address the lack of CAPTCHA in biometric systems). It does not provide constructive feedback related to code quality, security, or technical implementation."
  },
  {
    "id": 1082589839,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/35",
    "created_at": "2019-04-04T07:04:43Z",
    "updated_at": "2022-03-30T03:40:53Z",
    "body": "Hello:\n\nThank you for your very helpful comments. We are working to revise our\ndraft to incorporate your references, and to respond to other\nsubstantive comments received in recent weeks.\n\nIt is now clear to us that we will need to publish a second wide-review\ndraft before finalizing this document.\n\nBest,\n\nJanina Sajka\nAPA Chair\n\ne271828- writes:\n> We are working on extending the OPRF draft IETF standard  (https://github.com/chris-wood/draft-sullivan-cfrg-oprf/blob/master/draft-sullivan-cfrg-oprf.md) to address the accessibility use case, in particular for our hCaptcha.com service. \n> \n> It is currently used by Cloudflare and hCaptcha.com for Privacy Pass (https://privacypass.github.io) anonymous user-authentication.\n> \n> Will take us another week or so before we are ready to publish a proposal, but we believe it solves many issues in a way that preserves privacy while being substantially more robust to typical attacks.\n> \n> Audio is dead as a countermeasure, so is no longer a plausible alternative. If it were effective, there would be no reason for reCAPTCHA to disable it when suspicious, as @dessant points out in w3c/captcha-accessibility#28 .\n> \n> If this draft is still open for comments let me know, and we will work with you on extending it to cover this work.\n> \n> -- \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#27\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "This comment is providing constructive feedback on the draft document being reviewed. The author of the comment is pointing out potential issues or solutions to address specific use cases (e.g., accessibility) and proposing improvements (e.g., reCAPTCHA). The tone is professional and technical, suggesting that this type of feedback is intended for a technical audience."
  },
  {
    "id": 1082589633,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/34",
    "created_at": "2019-04-05T22:50:15Z",
    "updated_at": "2019-04-05T22:50:15Z",
    "body": "Hello:\n\nA response to this issue is provided in the rewritten opening paragraph\nof the Introduction section at this branch:\n\nhttps://raw.githack.com/w3c/apa/editorial2-captcha/captcha/index.html\n\n\nComments on the revised paragraph most welcome.\n\nBest,\n\nJanina\n\nSamuel Weiler writes:\n> >From section 1, first paragraph.  Is a better term available?  If not, define this one.\n> \n> -- \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#34\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment provides specific feedback on a technical aspect of the code or text being reviewed, in this case, suggesting a better term for the section mentioned. This type of feedback is typically provided by someone with expertise in the subject matter and is intended to improve the accuracy or clarity of the original material."
  },
  {
    "id": 1082588979,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/30",
    "created_at": "2019-04-06T14:17:32Z",
    "updated_at": "2019-04-06T14:17:32Z",
    "body": "We agree and have simplified the BookShare reference. Updated language\navailable here:\n\nhttps://raw.githack.com/w3c/apa/editorial2-captcha/captcha/index.html\n\nOur point is to demonstrate that there are services which\nprovide sufficient value to their users so that persons with\ndisabilities are willing to self-identify as persons with disabilities.\n\nThe current text could be made even simpler by eliminating the reference\nto the WIPO treaty. For now the reference is retained as it provides a\npointer to why the example service is so valuable, but it does not\nattempt to directly explain why in this document.\n\nFurther comments welcome.\n\nJanina\n\nSamuel Weiler writes:\n> This sentence needs work:\n> \n> >  to allow copyrighted materials to be provided to print disabled users in specialized formats.\n> \n> -- \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#30\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment from Samuel Weiler and the follow-up reply from Janina Sajka provide constructive feedback on how to improve accessibility in providing copyrighted materials to users with disabilities, specifically by adding a disclaimer regarding print disabled users. They suggest making the reference to the WIPO treaty optional and directly explaining why services like BookShare are valuable for persons with disabilities."
  },
  {
    "id": 1082589420,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/33",
    "created_at": "2019-04-06T14:23:35Z",
    "updated_at": "2019-04-06T14:23:35Z",
    "body": "The paragraph is rewritten in hopes of more clearly stating the issue.\nDraft rewrite here:\n\nhttps://raw.githack.com/w3c/apa/editorial2-captcha/captcha/index.html\n\nSamuel Weiler writes:\n> Section 1, first paragraph: is the issue really \"exposing their data and content\" or it is \"provide service\" or \"providing resources\"?\n> \n> \n> -- \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#33\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment provides specific feedback on the rewritten paragraph in Section 1 of the provided source code, suggesting that the original text may be misleading as to what the \"issue\" is. It implies that a different interpretation or focus might make more sense and clearer to readers."
  },
  {
    "id": 1082589289,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/32",
    "created_at": "2019-04-06T14:34:12Z",
    "updated_at": "2019-04-06T14:34:12Z",
    "body": "Agreed. Rewrite draft at:\n\nhttps://raw.githack.com/w3c/apa/editorial2-captcha/captcha/index.html\n\nSamuel Weiler writes:\n> \"...simply results in the presentation of a traditional inaccessible CAPTCHA as a fall-back mechanism becoming but a mere extra hurdle in the user's quest for access.\" is confusing.  Break it up somehow?\n> \n> -- \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#32\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "use_case",
    "reason": "This comment appears to be a feedback on the accessibility of a CAPTCHA system, specifically highlighting its potential impact and suggesting ways to improve it. The tone is constructive and focused on providing useful information, rather than simply expressing disagreement or requesting changes for their own sake."
  },
  {
    "id": 1082588574,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/28",
    "created_at": "2019-04-06T15:12:59Z",
    "updated_at": "2019-04-06T15:12:59Z",
    "body": "Thank you for your comment and the pointers you provide. We've edited\nour discussion of reCAPTCHA to incorporate this observation. The draft\nedits are here:\n\nhttps://raw.githack.com/w3c/apa/editorial2-captcha/captcha/index.html\n\nBest,\n\nJanina\n\nArmin Sebastian writes:\n> I've seen your feedback request for the Inaccessibility of CAPTCHA Working Draft, and I'd like to share what I have learned about the reCAPTCHA service while I was working on [Buster](https://github.com/dessant/buster).\n> \n> The most prominent issue is that reCAPTCHA selectively blocks the audio challenge, while the visual challenge remains available for solving. This practice discriminates against people with visual disabilities, and blocks them from getting access to services and information on the web.\n> \n> The reCAPTCHA Google Group and other forums have several threads about people with disabilities looking for a solution because of the blocked audio challenge, this is one of them: https://groups.google.com/forum/#!topic/recaptcha/5TFQ2c4phPU/discussion\n> \n> https://groups.google.com/forum/?nomobile=true#!searchin/recaptcha/audio%7Csort:date\n> https://www.google.com/search?q=%22audio%22+%22captcha%22+OR+%22recaptcha%22+%22automated+queries%22\n> \n> This is the message people are encountered with when they try to access the audio challenge: Your computer or network may be sending automated queries. To protect our users, we can't process your request right now.\n> \n> ![](https://i.imgur.com/6EuPNdj.png)\n> \n> This happens because the reCAPTCHA algorithm erronously flags real people as bots, and it simply blocks access to the audio challenge instead of offering a challenge that is harder to solve.\n> \n> The blocking of the reCAPTCHA audio challenge is a regular occurence while browsing the web from residential IP addresses. People have reported some level of success in accessing the audio challenge by switching to Chrome and staying always logged into their Google accounts.\n> \n> The reCAPTCHA service is also hostile to users connecting from VPNs or anonymizing services such as Tor. The audio challenge is almost always blocked when using Tor, and the visual challenge may be blocked as well, or serves several challenges in a row and refuses to accept correct solutions.\n> \n> Because of the dominance of the reCAPTCHA service, people seeking privacy are effectively prevented from accessing large portions of the web.\n> \n> -- \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#28\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "administrative",
    "reason": "This comment is primarily an administrative update or acknowledgement of a process change within the reCAPTCHA service. It mentions updating the discussion to incorporate feedback and providing a draft edit to the caption, but the tone of the message suggests that it's more about organizational process rather than technical feedback or use case details."
  },
  {
    "id": 1082593162,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/41",
    "created_at": "2019-04-16T15:16:33Z",
    "updated_at": "2019-04-16T15:16:33Z",
    "body": "Dear Kenny:\n\nWe would like to say more concerning the CAPTCHA issue you raise, but\nwe're having little success finding examples in the wild. Can you please\npoint us to several? Thanks.\n\nJanina\n\nKenny Zhang writes:\n> Ask user to move or slide one object to right place, it is used to check the operator can do human action.\n> \n> problem: not only visual involvement and also some action, it is not accessible for visual and physical disabled.\n> \n> -- \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#41\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment is providing technical feedback on a specific issue with the CAPTCHA functionality, highlighting its accessibility problems for visually and physically disabled users. Janina Sajka is pointing out that the current implementation does not provide sufficient visual and action-related information to ensure accessibility. This kind of constructive criticism is typically classified as \"Technical Feedback\" because it aims to improve or resolve a specific technical issue."
  },
  {
    "id": 1082588296,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/27",
    "created_at": "2019-04-19T08:16:17Z",
    "updated_at": "2022-03-30T03:40:54Z",
    "body": "Hello:\n\nThank you for your most informative comment. We look forward to hearing\nabout your accessibility enhancements. Meanwhile we want to clarify our\nunderstand of how the user will experience this protocol.\n\nIf we're understanding correctly, the user still needs to satisfy a host\nthat they are human and not robotic. But, following that, they bank a\nquantity of tokens which can be spent against future Turing challenges.\nIs this essentially correct?\n\nIf so, what are the restrictions on the initial verification of\nhumanity? Might it be satisfied through biometric identifiers for\ninstance?\n\nThank you in advance for your help.\n\nJanina\n\n\ne271828- writes:\n> We are working on extending the OPRF draft IETF standard  (https://github.com/chris-wood/draft-sullivan-cfrg-oprf/blob/master/draft-sullivan-cfrg-oprf.md) to address the accessibility use case, in particular for our hCaptcha.com service. \n> \n> It is currently used by Cloudflare and hCaptcha.com for Privacy Pass (https://privacypass.github.io) anonymous user-authentication.\n> \n> Will take us another week or so before we are ready to publish a proposal, but we believe it solves many issues in a way that preserves privacy while being substantially more robust to typical attacks.\n> \n> Audio is dead as a countermeasure, so is no longer a plausible alternative. If it were effective, there would be no reason for reCAPTCHA to disable it when suspicious, as @dessant points out in w3c/captcha-accessibility#28 .\n> \n> If this draft is still open for comments let me know, and we will work with you on extending it to cover this work.\n> \n> -- \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#27\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "feature_request",
    "reason": "This comment is a feature request from the developer Janina regarding the accessibility use case of the hCaptcha.com service and its compatibility with the Open Web Accessibility Policy Framework (OPRF) draft. She asks for verification of humanity to be ensured during user interactions, suggesting that biometric identifiers could be used as an alternative method."
  },
  {
    "id": 1082588298,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/27",
    "created_at": "2019-05-17T10:46:06Z",
    "updated_at": "2022-03-30T03:40:54Z",
    "body": "Hello:\n\nOur CAPTCHA Note document will be published late in May for a second\nwide public review. We have added a section to describe and reference\nyour approach. We were unsure what to call the approach, though, so we\nmade up a name for you: \"Turing Tokens,\" in honor of Alan Turing. If\nthere's a more appropriate generic name, please advise.\n\nPlease note that we thought \"blinded verification tokens\" was more a\ndescriptor than a name. Also, \"Privacy Pass\" is great, but seems to\nrefer to a particular product, and we thought your approach needed a\ngeneric handle. All this is provisional, of course. Reactions are\nwelcome.\n\nTo review our \"turing Tokens\" section ahead of second wide review draft\npublication late May, please see the Editor's Draft text here:\n\n\nhttps://w3c.github.io/apa/captcha/#privpass\n\nBest,\n\nJanina\n\ne271828- writes:\n> We are working on extending the OPRF draft IETF standard  (https://github.com/chris-wood/draft-sullivan-cfrg-oprf/blob/master/draft-sullivan-cfrg-oprf.md) to address the accessibility use case, in particular for our hCaptcha.com service. \n> \n> It is currently used by Cloudflare and hCaptcha.com for Privacy Pass (https://privacypass.github.io) anonymous user-authentication.\n> \n> Will take us another week or so before we are ready to publish a proposal, but we believe it solves many issues in a way that preserves privacy while being substantially more robust to typical attacks.\n> \n> Audio is dead as a countermeasure, so is no longer a plausible alternative. If it were effective, there would be no reason for reCAPTCHA to disable it when suspicious, as @dessant points out in w3c/captcha-accessibility#28 .\n> \n> If this draft is still open for comments let me know, and we will work with you on extending it to cover this work.\n> \n> -- \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#27\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "use_case",
    "reason": "The comment is discussing the implementation details of a specific use case, namely extending the Open Web Application Security Project (OWASP) draft standard to address accessibility. It provides examples and context about how this work is being implemented in an existing service, hCaptcha.com, which serves as a model for new applications like the one described in the comment."
  },
  {
    "id": 1082588009,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/26",
    "created_at": "2019-06-04T20:57:47Z",
    "updated_at": "2019-06-04T20:57:47Z",
    "body": "Thank you, Russell. We've added a Proof of Work section here:\n\nhttps://w3c.github.io/apa/captcha/#proof-of-work-techniques\n\n\nPlease let us know if you think we missed anything, or if you think\nwe've not fully captured the relevance for CAPTCHA.\n\nBest,\n\nJanina\n\nRussell Smith writes:\n> This is missing proof of work based solutions - these slow down spammers by changing the amount of work they can do in a given time, making a site using them less profitable per attack. \n> \n> Upsides; non-interactive, will always work eventually with JS enabled, no obvious human language issue or accessibility issues. Downsides; takes longer on slower computers (phones, older machines), doesn't actually stop spam - just makes it less profitable per unit of compute\n> \n> Examples:\n> * https://github.com/xenohunter/lapti-pow-captcha\n> * https://github.com/trikota/flask_hashcash\n> * http://www.hashcash.org/\n> \n> -- \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#26\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "This comment provides a detailed analysis of the existing Proof of Work section for CAPTCHAs and suggests improvements, such as providing alternative proof-of-work techniques that are faster and more reliable. The commenter also mentions potential downsides to the current solution, but frames them in a neutral manner without taking an adversarial stance."
  },
  {
    "id": 1082588576,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/28",
    "created_at": "2019-06-11T11:18:51Z",
    "updated_at": "2019-06-11T11:18:51Z",
    "body": "@JaninaSajka It seems that link 404s.",
    "user": "chancecarey",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment provides an error message indicating the problem (link 404) and asks for assistance, which is typical of technical feedback."
  },
  {
    "id": 1082588578,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/28",
    "created_at": "2019-06-19T21:49:21Z",
    "updated_at": "2019-06-19T21:49:21Z",
    "body": "Thanks for the heads up. Just checked all links with linkchecker and\nfixed the one bad href. One is certainly too many!\n\nJanina\n\ncmcarey writes:\n> @JaninaSajka It seems that link 404s.\n> \n> -- \n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#28\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback about a specific issue with the link provided, specifically mentioning that there are 404 errors. It also includes information about who was mentioned in the email and provides a clear call to action to reply directly or view the email on GitHub."
  },
  {
    "id": 1082588581,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/28",
    "created_at": "2019-06-19T21:51:05Z",
    "updated_at": "2019-06-19T21:51:05Z",
    "body": "Still 404s for me.  Referring to the draft link.\n\nOn Thu, 20 Jun 2019, 00:49 JaninaSajka, <notifications@github.com> wrote:\n\n> Thanks for the heads up. Just checked all links with linkchecker and\n> fixed the one bad href. One is certainly too many!\n>\n> Janina\n>\n> cmcarey writes:\n> > @JaninaSajka It seems that link 404s.\n> >\n> > --\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly or view it on GitHub:\n> > w3c/captcha-accessibility#28\n>\n> --\n>\n> Janina Sajka\n>\n> Linux Foundation Fellow\n> Executive Chair, Accessibility Workgroup: http://a11y.org\n>\n> The World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\n> Chair, Accessible Platform Architectures http://www.w3.org/wai/apa\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <w3c/captcha-accessibility#28?email_source=notifications&email_token=AHXL4IXQ5P7IAZTD4ZBXXN3P3KSWHA5CNFSM4HATDKD2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODYDMGSQ#issuecomment-503759690>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AHXL4IQ7MQCYN5LIVFBT5YTP3KSWHANCNFSM4HATDKDQ>\n> .\n>\n",
    "user": "chancecarey",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "This comment provides detailed information about a problem or an error (404s) that is affecting the user's experience, specifically referencing a draft link. It also includes technical details and troubleshooting steps, indicating that it contains actionable advice for resolving the issue."
  },
  {
    "id": 1082588584,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/28",
    "created_at": "2019-06-27T17:17:24Z",
    "updated_at": "2019-06-27T17:17:24Z",
    "body": "404 because that branch/tag no longer exists?\r\n\r\nAlternatives that may or may not be reflecting the update:\r\n\r\nBranch \"Editorial\" -  https://raw.githack.com/w3c/apa/editorial/captcha/index.html\r\nBranch \"master\" - https://raw.githack.com/w3c/apa/master/captcha/index.html",
    "user": "sumodx",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "administrative",
    "reason": "The comment is asking for clarification or an update on a technical issue (404 error), but it's not providing any specific suggestions, alternatives, or information that would require further review or action from the developer. It appears to be more of a notification about a bug rather than providing useful feedback."
  },
  {
    "id": 1082588586,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/28",
    "created_at": "2019-06-27T17:19:44Z",
    "updated_at": "2019-06-27T17:19:44Z",
    "body": "The updated draft has been published: https://www.w3.org/TR/turingtest/",
    "user": "dessant",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "This comment provides information about a newly published document (the Turing Test standard), which is relevant to the technical community. It also implies that someone wants to update or modify this document, suggesting it may be a request for changes to improve its quality or effectiveness. The tone of the comment is professional and informative."
  },
  {
    "id": 1082588588,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/28",
    "created_at": "2019-06-27T17:30:12Z",
    "updated_at": "2019-06-27T17:30:12Z",
    "body": "Thank you for this, recaptcha is probably the most evil tool Google employs in order to subjugate users seeking privacy, all the while trying to exploit plausible deniability that they're only doing this to capture bot traffic. The new version is going to be even more evil, demanding to spy on all user actions across the entire website: https://www.fastcompany.com/90369697/googles-new-recaptcha-has-a-dark-side",
    "user": "nukeop",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "feature_request",
    "reason": "This comment expresses a concern and suggestion about Google's reCAPTCHA system, specifically highlighting its potential to infringe on users' privacy by spying on their actions across the website. The user is requesting that this issue be addressed in order to protect their privacy."
  },
  {
    "id": 1082587467,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/24",
    "created_at": "2019-07-30T09:14:17Z",
    "updated_at": "2019-07-30T09:14:17Z",
    "body": "Thank you for this comment. We have rewritten the list item in question\nwith what we hope is more understandable language.\n\nBest,\n\nJanina\n\nysmartin writes:\n> There is one point in the conclusion whose current wording (or more specifically, current punctuation) makes it difficult to understand.\n> \n> > Whenever an interactive CAPTCHA is to be implemented in order to obviate security and privacy considerations, it is important to minimize how often users are subjected to interactive CAPTCHA challenges. With CAPTCHA less interactivity is clearly more accessibility.\n> \n> An interactive CAPTCHA is implemented to oppose security and privacy or disregarding security and privacy, etc.?\n> \n> -- \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> w3c/captcha-accessibility#24\n\n-- \n\nJanina Sajka\n\nLinux Foundation Fellow\nExecutive Chair, Accessibility Workgroup:\thttp://a11y.org\n\nThe World Wide Web Consortium (W3C), Web Accessibility Initiative (WAI)\nChair, Accessible Platform Architectures\thttp://www.w3.org/wai/apa\n\n",
    "user": "JaninaSajka",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "administrative",
    "reason": "The comment is an administrative message from the W3C organization to inform users about a thread and its contents, with no specific feedback or suggestions for improvement. It appears to be a routine notification rather than a technical inquiry."
  },
  {
    "id": 967243819,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/3",
    "created_at": "2021-11-12T16:24:32Z",
    "updated_at": "2021-11-12T16:24:32Z",
    "body": "The recent proposal by Cloudflare may address this issue more effectively than other options documented in the current version of the Note.\r\n\r\nThe Research Questions Task Force plans to discuss this question at an upcoming meeting. Meanwhile, pull request #2 includes a description of and references to the proposal.",
    "user": "jasonjgw",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment is providing technical feedback on a proposal or research question by suggesting another approach that may be more effective, which implies a critique or evaluation of the current solution."
  },
  {
    "id": 967468333,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/3",
    "created_at": "2021-11-12T20:14:14Z",
    "updated_at": "2021-11-12T20:14:14Z",
    "body": "> The recent proposal by Cloudflare may address this issue more effectively than other options documented in the current version of the Note.\r\n> The Research Questions Task Force plans to discuss this question at an upcoming meeting. Meanwhile, pull request #2 includes a description of and references to the proposal.\r\n\r\nHi Jason @jasonjgw  thank you, that does look promising.\r\n",
    "user": "Myndex",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "use_case",
    "reason": "This comment discusses a potential improvement or solution (the Cloudflare proposal) in relation to an existing issue (a Research Questions Task Force meeting), and invites feedback. The language used suggests it's related to the project's functionality or workflow, indicating that it's part of the use case."
  },
  {
    "id": 972895818,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/5",
    "created_at": "2021-11-18T14:06:07Z",
    "updated_at": "2021-11-18T14:06:07Z",
    "body": "I've had some experience with the version of hCaptcha used by Cloudflare, which I assume is the commercial version. There was an option for a person with a disability to register with the vendor to bypass the CAPTCHA challenge, which was otherwise inaccessible to nonvisual users.\r\n\r\nProblem 1: to bypass the CAPTCHA, I had to register, thus revealing myself to have a disability.\r\n\r\nProblem 2: The bypass process, involving a cookie, didn't work. I eventually identified the reason: I had to turn off or create an exception to browser privacy settings that blocked third-party cookies in order for their cookie to be available on the Web sites that presented the CAPTCHA challenge. In other words, it was necessary to reduce one's privacy protection by manipulating browser settings.\r\n\r\nIn general, I don't think this is the kind of solution we should be encouraging in our document.",
    "user": "jasonjgw",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "administrative",
    "reason": "This comment appears to be a discussion about the use of CAPTCHA technology and its accessibility features, particularly with regards to individuals with disabilities. It highlights an issue and provides suggestions for improvement, which suggests that it is related to an administrative aspect of the documentation or guidelines provided by Cloudflare."
  },
  {
    "id": 975908919,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/5",
    "created_at": "2021-11-22T20:53:17Z",
    "updated_at": "2021-11-22T20:53:17Z",
    "body": "In my converations with botstop, I learned that their goal is to never ask users to solve puzzles. They are extremely open to a11y feedback. ",
    "user": "TzviyaSiegman",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "administrative",
    "reason": "This comment appears to be providing feedback on the design and functionality of a service (botstop), specifically its goals, accessibility features, or user experience. It does not seem to ask for anything new or propose an improvement, making it more relevant to administrative tasks than technical feedback, use cases, philosophical discussions, conclusions/resolutions, or unknown purposes."
  },
  {
    "id": 983974698,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/5",
    "created_at": "2021-12-01T19:14:24Z",
    "updated_at": "2021-12-01T19:14:24Z",
    "body": "Please also note that cloudflare uses BotStop.",
    "user": "TzviyaSiegman",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "feature_request",
    "reason": "The comment is asking for clarification regarding a feature or technology (Cloudflare and BotStop), suggesting that it may be an issue or problem they are experiencing. It appears to be a request for more information rather than feedback on their products, use case, or administrative tasks."
  },
  {
    "id": 1011303701,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/16",
    "created_at": "2022-01-12T17:51:41Z",
    "updated_at": "2022-01-12T17:51:41Z",
    "body": "Useful background: https://github.com/WICG/trust-token-api",
    "user": "jasonjgw",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "This comment provides information about an existing project, specifically a GitHub repository. It does not ask for a solution or suggest a new idea, but rather reports on the current state of the project and its functionality. The tone is neutral and informative."
  },
  {
    "id": 1025008538,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/16",
    "created_at": "2022-01-29T23:45:52Z",
    "updated_at": "2022-01-29T23:45:52Z",
    "body": "Hi @Malvoz We appreciate your interest and advocacy for web accessibility, e.g., your recent post in w3c/sdw. We welcome your attention, however we are not clear, which specific issue is relevant to the CAPTCHA document? If it is trust tokens we are very eager to coordinate any work going on with that. If there's a specific pointer you can share please let us know.",
    "user": "lwolberg",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "feature_request",
    "reason": "The comment appears to be seeking clarification or more information about how to utilize the CAPTCHA document, specifically asking about which specific issue it is relevant to and if trust tokens are involved. This type of inquiry suggests a request for technical support or guidance on using the document."
  },
  {
    "id": 1025013891,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/17",
    "created_at": "2022-01-30T00:19:47Z",
    "updated_at": "2022-01-30T00:19:47Z",
    "body": "One more: this \"V\" is unclear\r\n\r\nas a fallback mechanism and has dropped it from v reCAPTCHA",
    "user": "lwolberg",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "feature_request",
    "reason": "The comment appears to be expressing dissatisfaction or frustration with the current implementation of \"V\", which is being dropped as part of an update or redesign, prompting a request for its reinstatement."
  },
  {
    "id": 1025080282,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/16",
    "created_at": "2022-01-30T06:24:22Z",
    "updated_at": "2022-01-30T06:24:22Z",
    "body": "@lwolberg I'm not sure, many issues in the Trust Tokens API repository [mention CAPTCHA](https://github.com/WICG/trust-token-api/issues?q=is%3Aissue+CAPTCHA). Though I think https://github.com/WICG/trust-token-api/issues/88 can be considered the umbrella issue.\r\n\r\nI haven't familiarized myself with trust tokens, my personal interest lies in the \"UA-driven\" aspect of it.",
    "user": "Malvoz",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "feature_request",
    "reason": "The comment asks for feedback on a technical issue within the Trust Tokens API repository and requests that the author consider https://github.com/WICG/trust-token-api/issues/88 as an umbrella issue. This suggests that the author is seeking guidance or clarification regarding trust tokens, which aligns with the definition of a feature request."
  },
  {
    "id": 1025787165,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/17",
    "created_at": "2022-01-31T14:19:54Z",
    "updated_at": "2022-01-31T14:19:54Z",
    "body": "Having checked Google's documentation, it appears that the reference should be to v3 in both instances. I have created a pull request accordingly.",
    "user": "jasonjgw",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment provides information about a specific issue or discrepancy found during research (checking Google's documentation) and proposes a correction by referencing the correct version number (v3). This is an opinion-based response aimed at improving the accuracy of information."
  },
  {
    "id": 1050833231,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/23",
    "created_at": "2022-02-25T13:01:12Z",
    "updated_at": "2022-02-25T13:04:47Z",
    "body": "Janina and I investigated the use of WebAuthn to establish personhood via a known to be reliable authentication device, here is some progress.\r\n\r\nI read the Cloudflare proposal and did the test. It worked very smoothly on my iPhone using FaceID without any preliminary registration.  This is huge step forward from the first versions which seemed to indicate that users would need a hardware key e.g. Yubico. \r\n\r\nYou can try the test here\r\nhttps://cloudflarechallenge.com/\r\n\r\n============\r\n\r\nSome useful sources for the above:\r\n\r\nWebauthn Level 2 (which seems to incorporate Level 1)\r\nhttps://www.w3.org/TR/webauthn-2/\r\n\r\nCloudflare's readable overview of the issues and their approach\r\nhttps://blog.cloudflare.com/introducing-cryptographic-attestation-of-personhood/\r\nBy Thibault Meunier\r\n\r\nCloudflare's list of common hardware authentication devices: Apple Face ID and Touch ID, Microsoft Windows Hello, Google Android Biometric Authentication. \r\nhttps://blog.cloudflare.com/cap-expands-support/\r\nBy Wesley Evans and Tara Whalen\r\n\r\nA technical review of the standard\r\nhttps://support.cloudflare.com/hc/en-us/articles/200170136-Understanding-Cloudflare-Captchas-Managed-Challenge-and-Challenge-Passage",
    "user": "lwolberg",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "use_case",
    "reason": "This comment discusses an experiment or investigation into using WebAuthn to establish personhood via a known authentication device. It provides details about the test, its results, and some useful resources for further learning about the topic. The tone is informative and instructive, suggesting that this is not just a technical feedback but also a teaching tool or a guide for others who might be interested in exploring this idea."
  },
  {
    "id": 1051310097,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/23",
    "created_at": "2022-02-25T22:07:57Z",
    "updated_at": "2022-02-25T22:07:57Z",
    "body": "It isn't entirely clear from the documentation whether CloudFlare's WebAuthn-based technique has now been deployed widely to their clients, but one of the pages cited in Lionel's comment suggests it may have been.\r\n\r\nImplementing this or a similar solution in place of, or even alongside any form of CAPTCHA would seem to me to address the accessibility problem for users with disabilities. There is a sufficient variety of hardware devices supporting WebAuthn that no single biological characteristic need be relied upon for biometrics - as is required for accessibility. Non-biometric authentication devices are, I assume, also supported. Of course, the user can choose the authentication device, as long as the vendor is trusted by the Web site operator whose services are to be accessed.\r\n\r\nWould such a solution meet the security requirements of Web-based service providers? If specific security devices are good enough for authentication, are they sufficient in cases of potentially anonymous access as well (the central use case for which CAPTCHA is especially well suited)?",
    "user": "jasonjgw",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "This comment provides a detailed analysis and suggestion regarding the technical aspects of implementing WebAuthn-based technique, addressing issues related to accessibility, security, and compatibility. It offers specific recommendations based on Lionel's experience with a particular page suggesting it might be deployed widely by CloudFlare, suggesting this solution meets the security requirements for web-based service providers but may not address all potential security concerns in cases of anonymous access."
  },
  {
    "id": 1057122273,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/23",
    "created_at": "2022-03-02T16:30:21Z",
    "updated_at": "2022-03-02T16:30:21Z",
    "body": "As discussed at the meeting, the results of my testing the cloudflarechallenge.com application are as follows.\r\n\r\n* Mac OS: no success with Chrome or Safari.\r\n* Windows 11: successful response to the challenge with Chrome and Windows Hello.\r\nLionel reported similar results for Mac OS, and, as above, positive results for iOS.",
    "user": "jasonjgw",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "administrative",
    "reason": "No reason provided."
  },
  {
    "id": 1122152510,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/44",
    "created_at": "2022-05-10T09:29:29Z",
    "updated_at": "2022-05-10T09:29:29Z",
    "body": "This is great and the new content distinghishes nicely between the previous content and the new state of the art solutions. Only comment I'd make is to change 'he or she' to 'person' as gender is not relevant. ",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment provides specific suggestions for improvement, namely changing \"he or she\" to \"person\", which indicates that it is intended to assist in refining the user interface or content to make it more effective and inclusive."
  },
  {
    "id": 1122338878,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/44",
    "created_at": "2022-05-10T12:40:14Z",
    "updated_at": "2022-05-10T12:40:14Z",
    "body": "Thank you, Scott - I've reworked the sentence.",
    "user": "jasonjgw",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback on an existing code or document by expressing appreciation for a change made. It is addressing something that has been improved and offering suggestions for further improvement, which is a common purpose of technical feedback."
  },
  {
    "id": 2016245866,
    "issue_url": "https://api.github.com/repos/w3c/captcha-accessibility/issues/40",
    "created_at": "2024-03-23T00:57:59Z",
    "updated_at": "2024-03-23T00:58:57Z",
    "body": "Video-game CAPTCHAs also provide a barrier to people with repetitive strain injury or other hand mobility impairments. Or for that matter, people who don't enjoy playing video games.",
    "user": "ChasBelov",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/captcha-accessibility",
    "classification": "administrative",
    "reason": "This comment is primarily focused on administrative details and organizational considerations, addressing the potential impact of CAPTCHAs on certain groups of users (people with repetitive strain injury or other hand mobility impairments) rather than providing technical feedback, using a specific feature, or proposing an improvement."
  },
  {
    "id": 1997613881,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/2",
    "created_at": "2024-03-14T14:40:07Z",
    "updated_at": "2024-03-14T14:40:07Z",
    "body": "@koalie any advice?",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "The comment appears to be asking for advice or suggestions on how to proceed, which is a common type of technical feedback. It does not contain information that would make it clear whether the intention is to ask about a specific feature request, use case, or philosophical topic."
  },
  {
    "id": 1998048166,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/2",
    "created_at": "2024-03-14T18:09:57Z",
    "updated_at": "2024-03-14T18:09:57Z",
    "body": "@dontcallmedom I concur with @danyork but when I reviewed the document I chose to ignore it for the sake of readability because \"Machine Learning-based systems\" looks odd, and \"Machine-Learning-based systems\" is complex. There is just this one occurrence in the document. I suggest to leave as is or flip the words: \"systems based on Machine Learning\".",
    "user": "koalie",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "feature_request",
    "reason": "The commenter suggests modifying a specific sentence (\"Machine Learning-based systems\") for clarity, but their feedback does not provide sufficient context or details about why they think this modification would be beneficial. Additionally, the suggestion seems to relate more to readability than to addressing a core issue with the document's content."
  },
  {
    "id": 1999101372,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/6",
    "created_at": "2024-03-15T07:45:04Z",
    "updated_at": "2024-03-15T07:45:04Z",
    "body": "could you help qualify more specifically what this isn't a good balance? I imagine two aspects make this less good than the search engines model:\r\n* fewer relevant sources being exposed\r\n* less incentives to visit the sources if the AI system has already provided (what at least looks like) the specific answer",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on a hypothetical AI system's performance, specifically highlighting a potential drawback or improvement opportunity. However, it doesn't offer any concrete suggestions for how to address the issue. Instead of providing actionable recommendations, it simply states what could be done differently. A more effective example would provide specific details and examples to illustrate its points."
  },
  {
    "id": 1999110578,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/4",
    "created_at": "2024-03-15T07:52:33Z",
    "updated_at": "2024-03-15T07:52:33Z",
    "body": "my understanding of C2PA is that it allows to embed signed claims into media files on their sources, including potential ML-based processing; but as far as I understand, it doesn't provide a mechanism that prevents removing these claims, and in particular, wouldn't prevent someone with nefarious intent to present synthetic content as a human creation. Is that correct? this is what I was trying to convey in terms of \"no credible solution\".\r\n\r\n+1 on adding the potential role of UA in surfacing provenance information",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "This comment provides an analysis and critique of C2PA, specifically its limitations regarding preventing removal of embedded claims. It suggests a solution (adding provenance information via User-Generated Media) that is technically feasible but not addressed by the current mechanism in C2PA."
  },
  {
    "id": 1999363634,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/6",
    "created_at": "2024-03-15T10:27:18Z",
    "updated_at": "2024-03-15T10:27:18Z",
    "body": "Yes, it's both of those things. For any given topic, a search engine is likely to return a larger number of sources. And because of the interactive nature of LLM AI interfaces, users may well prefer to stay there rather than visit the sources, reducing the creator's ability to build its own audience, or for users even to recognise that the value they received in getting an answer is attributable to the original sources.",
    "user": "chrisn",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "philosophical",
    "reason": "The comment discusses how the interactive nature of LLM AI interfaces may lead to a situation where users prefer to stay on a search engine rather than engaging with the creator's own resources, potentially reducing their understanding and appreciation of the value of those resources. This is framed within a broader philosophical discussion about the balance between user experience and content ownership/credit."
  },
  {
    "id": 2004044097,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/5",
    "created_at": "2024-03-18T14:17:55Z",
    "updated_at": "2024-03-18T14:17:55Z",
    "body": "That topic is (meant to be) covered in [4.1.1 \"Transparency on AI-generated content\"](https://www.w3.org/reports/ai-web-impact/#transparency-on-ai-generated-content):\r\n> it creates a systemic risk for content consumers in no longer being able to distinguish or discover authoritative or curated content in a sea of credible (but either possibly or wilfully wrong) generated content.\r\n\r\nIs there a different angle that you think should be covered in the context of [4.5 \"Balancing content creators incentives and consumers rights\"](https://www.w3.org/reports/ai-web-impact/#balancing-content-creators-incentives-and-consumers-rights)? or additional description needed on this point in 4.1.1?",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "feature_request",
    "reason": "This comment is raising an idea for improvement and suggesting a potential solution to address the systemic risk mentioned, which aligns with the purpose of the feature request discussion in section 4.5 of W3C's AI Web Impact Report."
  },
  {
    "id": 2004616354,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/5",
    "created_at": "2024-03-18T18:13:30Z",
    "updated_at": "2024-03-18T18:13:30Z",
    "body": "It does, and re-reading it I think it's OK as is.",
    "user": "chrisn",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "No reason provided."
  },
  {
    "id": 2006832146,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/6",
    "created_at": "2024-03-19T10:56:22Z",
    "updated_at": "2024-03-19T10:56:22Z",
    "body": "I've filed https://github.com/w3c/ai-web-impact/pull/12 with some proposed related additions",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "This comment provides feedback on an issue or proposal, suggesting changes to improve the quality of a specific codebase. It does not ask for anything in return (e.g., a feature, bug fix, or new functionality), nor is it related to the use case or feature itself. Instead, it aims to provide constructive criticism and guidance to the maintainers."
  },
  {
    "id": 2006832853,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/12",
    "created_at": "2024-03-19T10:56:32Z",
    "updated_at": "2024-03-19T10:56:32Z",
    "body": "@chrisn does this work?",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "The comment appears to be asking whether the code or functionality provided works as intended. It is providing feedback based on its own experience or observation, which suggests it is technical in nature."
  },
  {
    "id": 2007735615,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/4",
    "created_at": "2024-03-19T17:19:43Z",
    "updated_at": "2024-03-19T17:19:43Z",
    "body": "Yes, claims can be removed, and C2PA is also not a \"truth\" mechanism, it's a provenance mechanism, so someone can make untrue claims but these are traceable to who made them, and then they take on the associated reputational risk.\r\n\r\nI'll think about a proposed wording change ... I think \"no credible solution that could guarantee\" is maybe too strong as there are solutions that well-intentioned actors can use if they choose to.\r\n\r\nI'll also create a PR for the UA aspect.",
    "user": "chrisn",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on how to improve the C2PA (Cloud-Based Transaction Settlement) mechanism, suggesting alternatives to claim removal and offering suggestions for language changes. The tone is informative and helpful, indicating that it's intended to assist in improving the current implementation rather than simply advocating for a specific change or providing additional information about the topic."
  },
  {
    "id": 2011383820,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/18",
    "created_at": "2024-03-21T07:35:45Z",
    "updated_at": "2024-03-21T07:35:45Z",
    "body": "many thanks\u00a0@xueyuanjia ! I've made a few changes in the doc to fix errors in ReSpec associated with autolinks to definitions: https://github.com/w3c/ai-web-impact/pull/18/commits/a02055b20a51d100396b4cb4ec5cb271407cbb86 - if you could check that I didn't mess it up, this would be great!\r\n\r\nDo you know which version of the document the translation is based on? e.g. what date or commit was it built from?",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "feature_request",
    "reason": "The comment requests technical feedback on a specific issue with the ReSpec associated with autolinks to definitions, mentioning a pull request on GitHub and providing a link to the relevant repository."
  },
  {
    "id": 2011700073,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/18",
    "created_at": "2024-03-21T09:11:42Z",
    "updated_at": "2024-03-21T09:11:42Z",
    "body": "> I've made a few changes ... [a02055b](https://github.com/w3c/ai-web-impact/commit/a02055b20a51d100396b4cb4ec5cb271407cbb86) \r\n\r\nI made [one edit](https://github.com/w3c/ai-web-impact/pull/18/commits/6ff56080a7b5832674ec76f0e8064558f2be0bb9) .\r\n\r\n> \r\n> Do you know which version of the document the translation is based on? e.g. what date or commit was it built from?\r\n\r\nThe translation is based on the version firstly [announced on 13 March](https://www.w3.org/blog/2024/managing-the-impact-of-ai-machine-learning-on-the-web/), which should be [this version](https://github.com/w3c/ai-web-impact/tree/c528c37b81c970e631b547499d056741f5a51824). Further commits since 14 March haven't been reflected.\r\n\r\n",
    "user": "xueyuanjia",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "The comment provides specific information about a technical issue (the translation not being based on the latest version of the document) and offers suggestions for improvement, which is characteristic of technical feedback."
  },
  {
    "id": 2011836585,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/18",
    "created_at": "2024-03-21T10:16:15Z",
    "updated_at": "2024-03-21T10:16:15Z",
    "body": "I've made [another change](https://github.com/w3c/ai-web-impact/pull/18/commits/c41b6b9fa59267e7728b33cf265f65f873af388a) to pacify respec - can you take another look?",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "administrative",
    "reason": "The comment appears to be a request for the maintainers or contributors of the GitHub repository to review and possibly approve another change made by the author, rather than providing any feedback on its technical merit or proposing an improvement."
  },
  {
    "id": 2012153703,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/18",
    "created_at": "2024-03-21T12:27:26Z",
    "updated_at": "2024-03-21T12:28:13Z",
    "body": "> I've made [another change](https://github.com/w3c/ai-web-impact/pull/18/commits/c41b6b9fa59267e7728b33cf265f65f873af388a) to pacify respec..\r\n\r\nThank you @dontcallmedom I made [a further edit](https://github.com/w3c/ai-web-impact/pull/18/commits/08a034b74d69124cfbf0f280268589a8111e7431) and the translation still makes perfect sense.",
    "user": "xueyuanjia",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on a specific code change made to pacify a typo in a language specification. The commenter offers detailed explanations of their edits, which suggests that they are sharing technical insights with someone else. There is no mention of the language itself or its purpose, making it more of a technical note rather than an explanation for something specific (use case)."
  },
  {
    "id": 2014533235,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/17",
    "created_at": "2024-03-22T07:55:21Z",
    "updated_at": "2024-03-22T07:55:21Z",
    "body": "The document links to the ethics in ML document on bias, which itself quotes a definition as \"a systematic skew in decision-making that results in unfair outcomes\" from  the [CDEI Review into Bias in Algorithmic Decision-Making](https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/938857/Summary_Slide_Deck_-_CDEI_review_into_bias_in_algorithmic_decision-making.pdf).\r\n\r\n[A Survey on Bias and Fairness in Machine Learning](https://arxiv.org/pdf/1908.09635.pdf) quotes a definition of fairness as \"absence of any prejudice or favoritism toward an individual or group based on their inherent or acquired characteristics\".\r\n\r\n(this suggests that using a model trained on the general population in the context of a pediatric hospital wouldn't be an illustration of bias - merely a case of using the wrong tool for the job)\r\n\r\nShould the document directly quote a definition of bias (rather than just link to it)? should that include a definition of fairness as well (such as the one above)?",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "The comment is providing technical feedback on the way the document has been structured and presented. Specifically, it suggests that the document should provide more concrete examples or definitions to illustrate its points about bias and fairness in machine learning. It also raises a point of confusion by mentioning a survey that quotes a definition of fairness without directly quoting the definition itself, which could make the discussion confusing for those unfamiliar with the concept of fairness in this context."
  },
  {
    "id": 2014632334,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/17",
    "created_at": "2024-03-22T08:50:11Z",
    "updated_at": "2024-03-22T08:50:11Z",
    "body": "There is a similar case proposed by Dr Kate Vredenburgh of LSE when [Google Mistakenly Tags Black People as \u2018Gorillas,\u2019 Showing Limits of Algorithms](https://www.wsj.com/articles/BL-DGB-42522). \r\n\r\nIf can be useful to say that a bias can be generated also by the  _accuracy_ of the data set if it were interesting to specify ",
    "user": "simoneonofri",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "The comment provides constructive feedback on the accuracy of a similar case proposed in another article, suggesting ways to improve the analysis or presentation. It does not appear to be related to use cases, features requests, administrative concerns, conclusions/ resolutions, or philosophical discussions. It is primarily focused on technical aspects and suggests improvements for data set accuracy."
  },
  {
    "id": 2014668030,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/17",
    "created_at": "2024-03-22T09:14:42Z",
    "updated_at": "2024-03-22T09:14:42Z",
    "body": "another reference: ISO 22989 has the following definition for bias \"systematic difference in treatment of certain objects, people or groups in comparison to others\"",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "use_case",
    "reason": "This comment refers to a specific term (\"bias\") and its definition within the context of the International Organization for Standardization (ISO) standard 22989. It is discussing how bias affects the treatment of certain objects, people, or groups in comparison to others, which aligns with the purpose of this type of information - to explain or discuss a concept, rule, or principle in a specific context."
  },
  {
    "id": 2015457432,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/17",
    "created_at": "2024-03-22T16:26:53Z",
    "updated_at": "2024-03-22T16:26:53Z",
    "body": "\"unfair outcomes\" seems to move the definition problem to asking what's fair. The ISO definition is better, IMHO. ",
    "user": "dwsinger",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "philosophical",
    "reason": "The comment expresses a philosophical opinion on how to define fairness in scenarios where there may be perceived unfair outcomes. It questions whether the current ISO definition is sufficient and proposes an alternative approach by considering what constitutes \"unfair\". This type of comment often deals with deeper, more abstract aspects of a topic rather than technical details or practical implementation."
  },
  {
    "id": 2015654421,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/17",
    "created_at": "2024-03-22T18:13:16Z",
    "updated_at": "2024-03-22T18:13:16Z",
    "body": "Please see https://dl.acm.org/doi/10.1145/230538.230561 Friedman, B., Nissenbaum, H. (1996) Bias in Computing Systems,. ACM Transactions on Information Systems, 14(3), 330 \u2013347, ACM 1046-8188/96/0700 \u20130330 for a fuller understanding of technical and computational bias.",
    "user": "TzviyaSiegman",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "This comment provides information about a specific piece of research or paper that Friedman and Nissenbaum discussed in the context of computing systems, including details about its content and relevance to their work. It does not contain any suggestions for improvement, nor is it related to the user's inquiry, which appears to be about finding a fuller understanding of bias in computing systems (i.e., computational bias)."
  },
  {
    "id": 2015689194,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/17",
    "created_at": "2024-03-22T18:34:13Z",
    "updated_at": "2024-03-22T18:34:13Z",
    "body": "That paper uses \"Accordingly, we use the term bias to refer to computer systems that systematically and unfairly discriminate against certain individuals or groups of individuals in favor of others.\"\r\n\r\nHowever, their initial example is of a biased airline reservation system which effectively preferred US domestic carriers, and carriers aren't individuals\u2026\r\n\r\nAnd again we hit the question of what's 'unfair'.",
    "user": "dwsinger",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "The comment provides feedback on the accuracy or correctness of an author's statement about computer systems, specifically a definition of bias in computer systems. It suggests that the author may have made a mistake by referring to carriers as individuals rather than recognizing their difference as a discriminatory factor."
  },
  {
    "id": 2022740210,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/17",
    "created_at": "2024-03-27T13:15:55Z",
    "updated_at": "2024-03-27T13:15:55Z",
    "body": "I have prepared a pull request adding the ISO definition of bias to the document https://github.com/w3c/ai-web-impact/pull/21 \r\n\r\n@dwsinger would this address partially or completely this issue?",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "use_case",
    "reason": "This comment is asking about whether a specific action (adding an ISO definition) will fully resolve the identified problem, which relates to addressing bias in AI models. The user wants to know if the addition of the ISO definition addresses a significant portion or all of the issue at hand."
  },
  {
    "id": 2022905997,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/17",
    "created_at": "2024-03-27T14:25:57Z",
    "updated_at": "2024-03-27T14:25:57Z",
    "body": "[ISO/IEC TR 24027](https://www.iso.org/obp/ui/en/#iso:std:iso-iec:tr:24027:ed-1:v1:en) in section 5 contains a good discussion of how bias relates to fairness in the context of AI systems. Worth a look.",
    "user": "chrisn",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "use_case",
    "reason": "The comment provides information about a specific standard (ISO/IEC TR 24027) related to fairness and bias in AI systems, indicating that it is providing an educational or informational contribution rather than a constructive criticism or request for improvement. It does not contain any technical errors or suggestions, nor does it provide a conclusion or recommendation."
  },
  {
    "id": 2023106533,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/17",
    "created_at": "2024-03-27T15:46:47Z",
    "updated_at": "2024-03-27T15:46:47Z",
    "body": "yes, adding a definition would address my direct concern. we can then argue about whether it's right, of course, but that's separate",
    "user": "dwsinger",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "This comment is providing technical suggestions or ideas related to the code or system being developed. It expresses a specific concern and proposes a solution (adding a definition), which fits within the category of technical feedback. The tone is constructive and focused on improving the code, rather than raising an argument about its appropriateness or addressing a broader use case."
  },
  {
    "id": 2030462685,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/22",
    "created_at": "2024-04-01T20:00:39Z",
    "updated_at": "2024-04-01T20:00:39Z",
    "body": "Hi @iherman,\r\n\r\nThat's a very good point. From my analysis, AI raises the bar from both a defender's and an attacker's point of view. It is a powerful tool that complicates the fateful cat-and-mouse game.\r\n\r\nAs you say, to defend sites from anti-automation, there are CAPTCHAs. CAPTCHAs can be resolved by AIs relatively easily, and then the defender perhaps puts other countermeasures in place to protect himself. Also, there is an ongoing discussion in several communities regarding CAPTCHAs' usefulness (and the use, for example, of JavaScript challenges that do not worsen the user's UX). \r\n\r\nConversely, defenders can use WAFs that use AIs to protect themselves from attacks and not use regexp or visitation behaviors to figure out whether it is a bot (which may also have privacy effects).\r\n\r\nIs a particularly interesting and broad topic.",
    "user": "simoneonofri",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "use_case",
    "reason": "This comment appears to be describing the use case of AI in defending against anti-automation attacks, specifically discussing how both defenders and attackers can use CAPTCHAs and WAFs (Web Application Firewalls) as tools. The comment highlights the benefits and potential drawbacks of using these technologies, and its purpose seems to be exploratory and informative rather than providing technical details or requesting a feature."
  },
  {
    "id": 2031041851,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/22",
    "created_at": "2024-04-02T04:17:28Z",
    "updated_at": "2024-04-02T04:17:28Z",
    "body": "> CAPTCHAs can be resolved by AIs relatively easily\r\n\r\nwhich is all the more ironic because, as far as I know, CAPTCHAS, as far as I know, were originally used (maybe still are) to train AI systems :-)",
    "user": "iherman",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "philosophical",
    "reason": "This comment expresses a question and observation about the relationship between CAPTCHAs and artificial intelligence, implying that the use of CAPTCHAs in this context may be seen as ironic or self-referential. The author's tone seems to value critical thinking and examination over practical application, leading them to ponder on the potential contradictions in how these systems are utilized."
  },
  {
    "id": 2031361320,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/22",
    "created_at": "2024-04-02T08:16:50Z",
    "updated_at": "2024-04-02T08:16:50Z",
    "body": "CAPTCHAs were used to avoid programs, and now they are still used to train programs (AI) using humans for free :)\r\n\r\nReminds me a little bit of:\r\n\r\n> It was said that you would destroy the Sith, not join them! Bring balance to the Force, not leave it in darkness!",
    "user": "simoneonofri",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "philosophical",
    "reason": "The comment starts with a thought-provoking quote and then transitions into a discussion about CAPTCHAs. However, instead of providing practical insights or new information, it simply makes an analogy between the Sith from Star Wars and AI training programs that use humans for free, essentially poking fun at the idea of using CAPTCHAs to train AI without proper compensation."
  },
  {
    "id": 2034910383,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/9",
    "created_at": "2024-04-03T15:21:18Z",
    "updated_at": "2024-04-03T15:21:18Z",
    "body": "I think that depends on how the PDS is architected. Some PDSs are basically stores with an ACL layer, and once you've granted access the horses have fled the barn. But an alternative (and I would say better) design is one in which the code comes to the data and runs in a sandbox from which it cannot exfiltrate data. #26 hints at this, though it's not made explicit.",
    "user": "darobin",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "feature_request",
    "reason": "The comment expresses dissatisfaction with the current PDS architecture, suggesting that it is allowing for unauthorized access to sensitive data. It proposes an alternative design where the code runs in a sandboxed environment from which access is limited, aligning with the purpose of security and control in software development."
  },
  {
    "id": 2037017862,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/25",
    "created_at": "2024-04-04T12:14:58Z",
    "updated_at": "2024-04-04T12:14:58Z",
    "body": "cross-linking with issue #15 which has some commonality to this topic",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "This comment provides constructive feedback on an existing topic, suggesting that it is not fully addressed. It implies that the content is incomplete or missing certain information, and offers a suggestion for improvement. This type of feedback typically involves providing specific details about what needs to be improved."
  },
  {
    "id": 2037018427,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/15",
    "created_at": "2024-04-04T12:15:08Z",
    "updated_at": "2024-04-04T12:15:08Z",
    "body": "cross-linking with issue #25 which has some commonality to this topic",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "This comment provides specific feedback on an existing product or service (issue #25) and mentions another related issue (cross-linking). It seems to be offering suggestions for improvement or addressing a potential compatibility issue."
  },
  {
    "id": 2039707169,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/26",
    "created_at": "2024-04-05T12:40:55Z",
    "updated_at": "2024-04-05T12:42:37Z",
    "body": "I believe W3C's role may include developing guidelines on the conversational user interface in browsers, which still dominates the way people interact with AI LLMs today (and the inclusion of LLMs in search might reinforce this). These guidelines might address accessibility and internationalization aspects, but also issues related to provenance of the data and the underlying reasoning and, possibly, aspects of both security and privacy.  (Many of these issues are already mentioned in other \"advisement\" sections.) Issues on ergonomy, on user interface, etc, should also get a special attention.\r\n\r\nW3C has experience, largely, though not exclusively, due to the WAI activity, on creating such guidelines, how to manage them, present them, etc. This may become extremely useful.\r\n\r\n(This is clearly related to #25.)",
    "user": "iherman",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "feature_request",
    "reason": "The commenter suggests that W3C should develop guidelines for the conversational user interface in browsers, which could address various aspects such as accessibility, internationalization, provenance of data, and security/privacy issues. They also mention that this is related to a previous discussion (#25)."
  },
  {
    "id": 2041870323,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/24",
    "created_at": "2024-04-08T05:05:13Z",
    "updated_at": "2024-04-08T05:05:13Z",
    "body": "There is also the case to be made for different accessibility needs as well; speech to text transcription is already deployed in the wild which provides text descriptions for audio content. Cognitive accessibility needs could also be served through text models (e.g. please rephrase this in simple english, please summarize for two simple examples).\r\n\r\nWhile both have limits on the guarantees in terms of bias and accuracy, there is definite promise for incremental progress for both cases.",
    "user": "cynthia",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "This comment provides suggestions and reasons to support or challenge certain design decisions, specifically regarding accessibility features. It aims to improve or refine existing functionality rather than proposing a completely new idea or asking a philosophical question."
  },
  {
    "id": 2072391826,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/24",
    "created_at": "2024-04-23T13:57:47Z",
    "updated_at": "2024-04-23T13:57:47Z",
    "body": "for future reference (including my own since I haven't read it through yet) https://lists.w3.org/Archives/Public/w3c-wai-gl/2024AprJun/thread.html#msg5",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "technical_feedback",
    "reason": "This comment appears to be providing specific suggestions for improvement, guidance or advice related to the work being discussed. The reference provided seems to be a list of future references from W3C (World Wide Web Consortium) which may include guidelines, best practices, and technical specifications relevant to web accessibility standards and development."
  },
  {
    "id": 2117069819,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/30",
    "created_at": "2024-05-17T08:53:04Z",
    "updated_at": "2024-05-17T08:53:04Z",
    "body": "Left unchecked, search engines could evolve to progressively encroach on the value provided by individual websites, with the risk of monopolistic control and stifling of innovation.  Open standards are needed to enable open and free competition for personal assistants based upon generative AI.  Such assistants would build upon an open ecosystem of services with heterogeneous business models and machine interpretable descriptions that facilitate service composition. In principle, W3C could play a strategic role for community building and standards development.  We would need to identify which national and international bodies would have a shared interest in encouraging this further. A co-organized workshop would seem a good stepping stone.\r\n\r\n> On 16 May 2024, at 19:58, Ivan Herman ***@***.***> wrote:\r\n> \r\n> \r\n> A recent article on Google I/O <https://www.platformer.news/google-io-ai-search-sundar-pichai/> describes a vision for the evolution of search. \"Let Google do the Googling for you\" is the slogan used in the keynote of S. Pichai. It is not only Google; Bing, perplexity.ai, you.com, the Arc browser, maybe Siri tomorrow all use the same approach.\r\n> \r\n> I quote the last paragraph of the paper:\r\n> \r\n> [\u2026] to everyone who depended even a little bit on web search to have their business discovered, or their blog post read, or their journalism funded, the arrival of AI search bodes ill for the future. Google will now do the Googling for you, and everyone who benefited from humans doing the Googling will very soon need to come up with a Plan B.\r\n> \r\n> This strikes me as potentially having an effect on W3C's activity in this area <https://www.w3.org/ecosystems/advertising/>, too: it may indeed become a paradigm shift, affecting business models that make the Web function today.\r\n> \r\n> Would it be worth mentioning this in the document?\r\n> \r\n> \u2014\r\n> Reply to this email directly, view it on GitHub <https://github.com/w3c/ai-web-impact/issues/30>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAOKGNXSFDP6CUXOUNFUQMDZCT6T3AVCNFSM6AAAAABH2ZEAHOVHI2DSMVQWIX3LMV43ASLTON2WKOZSGMYDCMJSGY4TCNA>.\r\n> You are receiving this because you are subscribed to this thread.\r\n> \r\n\r\nDave Raggett ***@***.***>\r\n\r\n\r\n\r\n",
    "user": "draggett",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "feature_request",
    "reason": "This comment highlights a potential issue with the future of personal assistants based on generative AI, where search engines might encroach on individual websites' value by adopting similar approaches. It suggests that W3C could play a role in shaping standards and promoting competition for these services. The tone is constructive and focused on addressing a concern about the impact of AI search on web ecosystems."
  },
  {
    "id": 2172860540,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/26",
    "created_at": "2024-06-17T09:28:53Z",
    "updated_at": "2024-06-17T09:28:53Z",
    "body": "To \"reinforce or reinstate the web's status as a public commons\" would in my understanding also mean initiating recommendations for the access of non-public data securely, using, for instance, techniques like [Federated Learning](https://ai.googleblog.com/2017/04/federated-learning-collaborative.html), [Differential Privacy](https://en.wikipedia.org/wiki/Differential_privacy), and [Encrypted Computation](https://en.wikipedia.org/wiki/Homomorphic_encryption).\r\nThere are as well solutions emerging in the open source community for this reason, e.g. [OpenMined](https://openmined.org).  ",
    "user": "densalzmann",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-web-impact",
    "classification": "feature_request",
    "reason": "This comment expresses a desire to reinforce or reinstate the web's public commons status, which implies that it is proposing an enhancement or modification of its current state. The mention of specific techniques for securely accessing non-public data further suggests a request for implementing new security measures to protect sensitive information."
  },
  {
    "id": 2182463238,
    "issue_url": "https://api.github.com/repos/w3c/ai-web-impact/issues/28",
    "created_at": "2024-06-21T10:18:53Z",
    "updated_at": "2024-06-21T10:18:53Z",
    "body": "also relevant:\r\n* https://github.com/wiCG/handwriting-recognition Handwriting recognition\r\n* https://developer.chrome.com/docs/ai/built-in?hl=en LLM prompt API (and similar proposal discussed in a lightning talk at W3C AC Meeting 2024 https://www.youtube.com/watch?v=7S60LNBAFj0 )\r\n",
    "user": "dontcallmedom",
    "is_owner": false,
    "is_contributor": true,
    "repository_id": "w3c/ai-web-impact",
    "classification": "feature_request",
    "reason": "This comment appears to be requesting the integration of a Limited Language Model (LLM) prompt API into Chrome, as well as discussing its proposal at the W3C AC Meeting 2024. The commenter seems excited about the potential benefits and is seeking input from others in their field of work."
  },
  {
    "id": 2472731320,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/2",
    "created_at": "2024-11-13T07:55:31Z",
    "updated_at": "2024-11-13T07:55:31Z",
    "body": "The way this has been structured is based on user feedback. In terms of the innovation roadmap, the ultimate request from users is that accessibility issues are resolved by AI seamlessly without user intervention. Some AI innovations like autogenerated alt text for example, if accurate, would address this so user agent accessibility done on-the-fly would be a possible innovation roadmap, but widely applicable across other technologies as AI develops.\r\n\r\nMost of the document focuses on AI potential and accessibility issues, but acknowledges it is still fairly general in most use cases. However, some recent developments are becoming improved such as recent integration of Google Gemini into Talkback on Android. It is much better than Microsoft AI examples mentioned here for alt text. Also, there are notable improvements with live captioning. Hence, I think we can look at things AI could do well but are still in their infancy. Sign language for example, isn't really effective yet despite apps being available and is also very localised by mostly ASL. This could be an example of something that is really good that does not exist without AI, but if AI improves, then sign language online could become effective over time.\r\n\r\nIt is true that there is a lot of focus on automation, but I think there is a differentiation between how users can benefit from AI seamlessly and how people trying to address accessibility issues can also be supported by AI.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "feature_request",
    "reason": "The comment discusses the potential for AI to improve accessibility in various ways, including seamless resolution of user issues without intervention, improved integration of Google Gemini into existing technologies, live captioning, and sign language. However, it does not specifically request a new feature or technology, but rather highlights areas where AI can be beneficial and supports existing ones."
  },
  {
    "id": 2472733215,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/3",
    "created_at": "2024-11-13T07:56:44Z",
    "updated_at": "2024-11-13T07:56:44Z",
    "body": "Agreed.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment is providing constructive feedback on the current state of something (likely software, project, or system), suggesting an improvement or correction to achieve better results. It does not explicitly request a change or solution but rather offers insight into how it could be improved."
  },
  {
    "id": 2472734197,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/4",
    "created_at": "2024-11-13T07:57:22Z",
    "updated_at": "2024-11-13T07:57:22Z",
    "body": "Agreed.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment is providing suggestions for improvement or clarification regarding the original discussion. It does not contain any information that suggests it is related to user experience, feature requests, administrative tasks, a conclusion, or philosophical insights. It appears to be a neutral, factual expression of agreement."
  },
  {
    "id": 2472741727,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/5",
    "created_at": "2024-11-13T08:01:35Z",
    "updated_at": "2024-11-13T08:01:35Z",
    "body": "I think GIGO is a really good point. One of the challenges with AI is that is lies with confidence and therefore it is hard to determine. For example, autogenerated alt text will change every time it is created, even if it is the exact same image. Which one is correct? Perhaps all of them, perhaps one of them. Each time subtle details are changed yet all versions may still be helpful. So how to consider these issues would be good to add in.\r\n\r\nAnother example is live captioning, if 9 out of 10 words are accurate and paired with curated content, is this enough for an end-user to have reliable information or is the inaccuracies which are represented without warning too much of a problem for the end-user.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "technical_feedback",
    "reason": "The comment provides specific examples and explanations about the challenges in AI technology, particularly with regards to accuracy and reliability. It offers suggestions on how to address these issues and presents data-driven insights, making it a technical feedback piece that aims to improve the performance of AI systems."
  },
  {
    "id": 2472745955,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/6",
    "created_at": "2024-11-13T08:03:25Z",
    "updated_at": "2024-11-13T08:03:25Z",
    "body": "Agreed as it relates to comments in Issue #2.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "feature_request",
    "reason": "The comment is requesting to add more information or features related to comments, which falls under the category of feature requests."
  },
  {
    "id": 2472767527,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/7",
    "created_at": "2024-11-13T08:09:06Z",
    "updated_at": "2024-11-13T08:09:06Z",
    "body": "Agreed, this should be fleshed out. For example, the recent Talkback update on Android provides user choice on whether alt text that is already present is used or generative AI alt text is used, and also provides the opportunity for multiple attempts on AI alt text results. However, it never indicates the accuracy of these alt texts unlike in Microsoft 365, where Microsoft does acknowledge its view on confidence levels, i.e. low confidence, high confidence of its alt text. That being said, sometimes its high confidence is still very wrong, so this all needs to be explained in this guidance.\r\n\r\nAgree with the suggested approach but would still like to differentiate between the user experience of AI and professionals tasked with using AI to address accessibility issues.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "use_case",
    "reason": "The comment discusses a specific scenario (fleshing out the Talkback update on Android) and highlights an existing problem (the lack of indication of accuracy in AI alt texts). It then proposes a suggested approach but also emphasizes the importance of differentiating between the user experience and the professional perspective, suggesting that professionals may have a slightly more nuanced understanding of AI's limitations."
  },
  {
    "id": 2472834701,
    "issue_url": "https://api.github.com/repos/w3c/ai-accessibility/issues/2",
    "created_at": "2024-11-13T08:34:39Z",
    "updated_at": "2024-11-13T08:34:39Z",
    "body": "Another example of a user benefit not necessarily about repair might be connected to some of our XR guidance, where tactile representation in XR space could be generated to support people who are blind. AI could scan images to determine the texture of objects, represent them in a 3D environment, and then provide haptic feedback to the user.",
    "user": "sehollier",
    "is_owner": false,
    "is_contributor": false,
    "repository_id": "w3c/ai-accessibility",
    "classification": "use_case",
    "reason": "The comment discusses how using augmented reality (XR) can benefit users by providing tactile representation of objects in virtual space. This is an example of an \"application\" or a practical solution that improves people's experiences, rather than something technical, like repairing devices."
  }
]